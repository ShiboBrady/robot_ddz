// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBGameDDZ.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBGameDDZ.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PBGameDDZ {

namespace {

const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandCardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandCardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableCardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableCardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallScoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallScoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallScoreAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallScoreAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeoutCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeoutCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeoutCardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeoutCardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustLiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustLiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustLiftAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustLiftAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepPlayingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepPlayingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepPlayingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepPlayingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepPlayingAck_GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepPlayingAck_GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepPlayingAck_PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepPlayingAck_PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStatusNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatusNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSwitchSceneNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSwitchSceneNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealCardNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealCardNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCallScoreNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCallScoreNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* LordSetNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LordSetNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBaseCardNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBaseCardNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeoutCardNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeoutCardNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustLiftNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustLiftNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOverNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOverNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActTimeoutNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActTimeoutNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* reqMsgID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* notifyMsgID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* gameErrno_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* gameStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBGameDDZ_2eproto() {
  protobuf_AddDesc_PBGameDDZ_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBGameDDZ.proto");
  GOOGLE_CHECK(file != NULL);
  UserInfo_descriptor_ = file->message_type(0);
  static const int UserInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, avatatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, avataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, vippoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, innings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, wininnings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, place_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      -1);
  MatchInfo_descriptor_ = file->message_type(1);
  static const int MatchInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, stagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, inningnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, usercount_),
  };
  MatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchInfo_descriptor_,
      MatchInfo::default_instance_,
      MatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, _internal_metadata_),
      -1);
  HandCardList_descriptor_ = file->message_type(2);
  static const int HandCardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCardList, cards_),
  };
  HandCardList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HandCardList_descriptor_,
      HandCardList::default_instance_,
      HandCardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCardList, _has_bits_[0]),
      -1,
      -1,
      sizeof(HandCardList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCardList, _internal_metadata_),
      -1);
  TableCardList_descriptor_ = file->message_type(3);
  static const int TableCardList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCardList, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCardList, type_),
  };
  TableCardList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableCardList_descriptor_,
      TableCardList::default_instance_,
      TableCardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCardList, _has_bits_[0]),
      -1,
      -1,
      sizeof(TableCardList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCardList, _internal_metadata_),
      -1);
  ReadyReq_descriptor_ = file->message_type(4);
  static const int ReadyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, rev_),
  };
  ReadyReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadyReq_descriptor_,
      ReadyReq::default_instance_,
      ReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReadyReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, _internal_metadata_),
      -1);
  ReadyAck_descriptor_ = file->message_type(5);
  static const int ReadyAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyAck, result_),
  };
  ReadyAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadyAck_descriptor_,
      ReadyAck::default_instance_,
      ReadyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReadyAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyAck, _internal_metadata_),
      -1);
  CallScoreReq_descriptor_ = file->message_type(6);
  static const int CallScoreReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallScoreReq, score_),
  };
  CallScoreReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallScoreReq_descriptor_,
      CallScoreReq::default_instance_,
      CallScoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallScoreReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(CallScoreReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallScoreReq, _internal_metadata_),
      -1);
  CallScoreAck_descriptor_ = file->message_type(7);
  static const int CallScoreAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallScoreAck, result_),
  };
  CallScoreAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallScoreAck_descriptor_,
      CallScoreAck::default_instance_,
      CallScoreAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallScoreAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(CallScoreAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallScoreAck, _internal_metadata_),
      -1);
  TakeoutCardReq_descriptor_ = file->message_type(8);
  static const int TakeoutCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardReq, cards_),
  };
  TakeoutCardReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeoutCardReq_descriptor_,
      TakeoutCardReq::default_instance_,
      TakeoutCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(TakeoutCardReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardReq, _internal_metadata_),
      -1);
  TakeoutCardAck_descriptor_ = file->message_type(9);
  static const int TakeoutCardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardAck, result_),
  };
  TakeoutCardAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeoutCardAck_descriptor_,
      TakeoutCardAck::default_instance_,
      TakeoutCardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(TakeoutCardAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardAck, _internal_metadata_),
      -1);
  TrustReq_descriptor_ = file->message_type(10);
  static const int TrustReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustReq, rev_),
  };
  TrustReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrustReq_descriptor_,
      TrustReq::default_instance_,
      TrustReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrustReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustReq, _internal_metadata_),
      -1);
  TrustAck_descriptor_ = file->message_type(11);
  static const int TrustAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustAck, surplus_),
  };
  TrustAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrustAck_descriptor_,
      TrustAck::default_instance_,
      TrustAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrustAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustAck, _internal_metadata_),
      -1);
  TrustLiftReq_descriptor_ = file->message_type(12);
  static const int TrustLiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftReq, rev_),
  };
  TrustLiftReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrustLiftReq_descriptor_,
      TrustLiftReq::default_instance_,
      TrustLiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrustLiftReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftReq, _internal_metadata_),
      -1);
  TrustLiftAck_descriptor_ = file->message_type(13);
  static const int TrustLiftAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftAck, result_),
  };
  TrustLiftAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrustLiftAck_descriptor_,
      TrustLiftAck::default_instance_,
      TrustLiftAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrustLiftAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftAck, _internal_metadata_),
      -1);
  KeepPlayingReq_descriptor_ = file->message_type(14);
  static const int KeepPlayingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingReq, rev_),
  };
  KeepPlayingReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepPlayingReq_descriptor_,
      KeepPlayingReq::default_instance_,
      KeepPlayingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeepPlayingReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingReq, _internal_metadata_),
      -1);
  KeepPlayingAck_descriptor_ = file->message_type(15);
  static const int KeepPlayingAck_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, gameinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, callscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, takeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, settle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, gamechannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, basicscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, matchinfo_),
  };
  KeepPlayingAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepPlayingAck_descriptor_,
      KeepPlayingAck::default_instance_,
      KeepPlayingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeepPlayingAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck, _internal_metadata_),
      -1);
  KeepPlayingAck_GameInfo_descriptor_ = KeepPlayingAck_descriptor_->nested_type(0);
  static const int KeepPlayingAck_GameInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, seatlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, seatactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, maxcallscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, basecards_),
  };
  KeepPlayingAck_GameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepPlayingAck_GameInfo_descriptor_,
      KeepPlayingAck_GameInfo::default_instance_,
      KeepPlayingAck_GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeepPlayingAck_GameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_GameInfo, _internal_metadata_),
      -1);
  KeepPlayingAck_PlayerInfo_descriptor_ = KeepPlayingAck_descriptor_->nested_type(1);
  static const int KeepPlayingAck_PlayerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, trust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, trustsurplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, callscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, lastcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, detailinfo_),
  };
  KeepPlayingAck_PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepPlayingAck_PlayerInfo_descriptor_,
      KeepPlayingAck_PlayerInfo::default_instance_,
      KeepPlayingAck_PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeepPlayingAck_PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepPlayingAck_PlayerInfo, _internal_metadata_),
      -1);
  GameStatusNtf_descriptor_ = file->message_type(16);
  static const int GameStatusNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusNtf, status_),
  };
  GameStatusNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameStatusNtf_descriptor_,
      GameStatusNtf::default_instance_,
      GameStatusNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameStatusNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusNtf, _internal_metadata_),
      -1);
  GameSwitchSceneNtf_descriptor_ = file->message_type(17);
  static const int GameSwitchSceneNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSwitchSceneNtf, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSwitchSceneNtf, ismatch_),
  };
  GameSwitchSceneNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameSwitchSceneNtf_descriptor_,
      GameSwitchSceneNtf::default_instance_,
      GameSwitchSceneNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSwitchSceneNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameSwitchSceneNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSwitchSceneNtf, _internal_metadata_),
      -1);
  GameStartNtf_descriptor_ = file->message_type(18);
  static const int GameStartNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartNtf, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartNtf, basicscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartNtf, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartNtf, matchinfo_),
  };
  GameStartNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameStartNtf_descriptor_,
      GameStartNtf::default_instance_,
      GameStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameStartNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartNtf, _internal_metadata_),
      -1);
  DealCardNtf_descriptor_ = file->message_type(19);
  static const int DealCardNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealCardNtf, headerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealCardNtf, cards_),
  };
  DealCardNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DealCardNtf_descriptor_,
      DealCardNtf::default_instance_,
      DealCardNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealCardNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(DealCardNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealCardNtf, _internal_metadata_),
      -1);
  UserCallScoreNtf_descriptor_ = file->message_type(20);
  static const int UserCallScoreNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCallScoreNtf, seatno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCallScoreNtf, seatnext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCallScoreNtf, score_),
  };
  UserCallScoreNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserCallScoreNtf_descriptor_,
      UserCallScoreNtf::default_instance_,
      UserCallScoreNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCallScoreNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserCallScoreNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCallScoreNtf, _internal_metadata_),
      -1);
  LordSetNtf_descriptor_ = file->message_type(21);
  static const int LordSetNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordSetNtf, seatlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordSetNtf, callscore_),
  };
  LordSetNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LordSetNtf_descriptor_,
      LordSetNtf::default_instance_,
      LordSetNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordSetNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(LordSetNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordSetNtf, _internal_metadata_),
      -1);
  SendBaseCardNtf_descriptor_ = file->message_type(22);
  static const int SendBaseCardNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBaseCardNtf, basecards_),
  };
  SendBaseCardNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendBaseCardNtf_descriptor_,
      SendBaseCardNtf::default_instance_,
      SendBaseCardNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBaseCardNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(SendBaseCardNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBaseCardNtf, _internal_metadata_),
      -1);
  TakeoutCardNtf_descriptor_ = file->message_type(23);
  static const int TakeoutCardNtf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardNtf, seatno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardNtf, seatnext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardNtf, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardNtf, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardNtf, multiple_),
  };
  TakeoutCardNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeoutCardNtf_descriptor_,
      TakeoutCardNtf::default_instance_,
      TakeoutCardNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(TakeoutCardNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeoutCardNtf, _internal_metadata_),
      -1);
  TrustNtf_descriptor_ = file->message_type(24);
  static const int TrustNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustNtf, seatno_),
  };
  TrustNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrustNtf_descriptor_,
      TrustNtf::default_instance_,
      TrustNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrustNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustNtf, _internal_metadata_),
      -1);
  TrustLiftNtf_descriptor_ = file->message_type(25);
  static const int TrustLiftNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftNtf, seatno_),
  };
  TrustLiftNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrustLiftNtf_descriptor_,
      TrustLiftNtf::default_instance_,
      TrustLiftNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrustLiftNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustLiftNtf, _internal_metadata_),
      -1);
  GameOverNtf_descriptor_ = file->message_type(26);
  static const int GameOverNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, reason_),
  };
  GameOverNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameOverNtf_descriptor_,
      GameOverNtf::default_instance_,
      GameOverNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameOverNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, _internal_metadata_),
      -1);
  ActTimeoutNtf_descriptor_ = file->message_type(27);
  static const int ActTimeoutNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActTimeoutNtf, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActTimeoutNtf, callscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActTimeoutNtf, takeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActTimeoutNtf, settle_),
  };
  ActTimeoutNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActTimeoutNtf_descriptor_,
      ActTimeoutNtf::default_instance_,
      ActTimeoutNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActTimeoutNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActTimeoutNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActTimeoutNtf, _internal_metadata_),
      -1);
  reqMsgID_descriptor_ = file->enum_type(0);
  notifyMsgID_descriptor_ = file->enum_type(1);
  gameErrno_descriptor_ = file->enum_type(2);
  gameStatus_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBGameDDZ_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchInfo_descriptor_, &MatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HandCardList_descriptor_, &HandCardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableCardList_descriptor_, &TableCardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadyReq_descriptor_, &ReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadyAck_descriptor_, &ReadyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallScoreReq_descriptor_, &CallScoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallScoreAck_descriptor_, &CallScoreAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeoutCardReq_descriptor_, &TakeoutCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeoutCardAck_descriptor_, &TakeoutCardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrustReq_descriptor_, &TrustReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrustAck_descriptor_, &TrustAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrustLiftReq_descriptor_, &TrustLiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrustLiftAck_descriptor_, &TrustLiftAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepPlayingReq_descriptor_, &KeepPlayingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepPlayingAck_descriptor_, &KeepPlayingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepPlayingAck_GameInfo_descriptor_, &KeepPlayingAck_GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepPlayingAck_PlayerInfo_descriptor_, &KeepPlayingAck_PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameStatusNtf_descriptor_, &GameStatusNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameSwitchSceneNtf_descriptor_, &GameSwitchSceneNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameStartNtf_descriptor_, &GameStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DealCardNtf_descriptor_, &DealCardNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserCallScoreNtf_descriptor_, &UserCallScoreNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LordSetNtf_descriptor_, &LordSetNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendBaseCardNtf_descriptor_, &SendBaseCardNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeoutCardNtf_descriptor_, &TakeoutCardNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrustNtf_descriptor_, &TrustNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrustLiftNtf_descriptor_, &TrustLiftNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameOverNtf_descriptor_, &GameOverNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActTimeoutNtf_descriptor_, &ActTimeoutNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBGameDDZ_2eproto() {
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete MatchInfo::default_instance_;
  delete MatchInfo_reflection_;
  delete HandCardList::default_instance_;
  delete HandCardList_reflection_;
  delete TableCardList::default_instance_;
  delete TableCardList_reflection_;
  delete ReadyReq::default_instance_;
  delete ReadyReq_reflection_;
  delete ReadyAck::default_instance_;
  delete ReadyAck_reflection_;
  delete CallScoreReq::default_instance_;
  delete CallScoreReq_reflection_;
  delete CallScoreAck::default_instance_;
  delete CallScoreAck_reflection_;
  delete TakeoutCardReq::default_instance_;
  delete TakeoutCardReq_reflection_;
  delete TakeoutCardAck::default_instance_;
  delete TakeoutCardAck_reflection_;
  delete TrustReq::default_instance_;
  delete TrustReq_reflection_;
  delete TrustAck::default_instance_;
  delete TrustAck_reflection_;
  delete TrustLiftReq::default_instance_;
  delete TrustLiftReq_reflection_;
  delete TrustLiftAck::default_instance_;
  delete TrustLiftAck_reflection_;
  delete KeepPlayingReq::default_instance_;
  delete KeepPlayingReq_reflection_;
  delete KeepPlayingAck::default_instance_;
  delete KeepPlayingAck_reflection_;
  delete KeepPlayingAck_GameInfo::default_instance_;
  delete KeepPlayingAck_GameInfo_reflection_;
  delete KeepPlayingAck_PlayerInfo::default_instance_;
  delete KeepPlayingAck_PlayerInfo_reflection_;
  delete GameStatusNtf::default_instance_;
  delete GameStatusNtf_reflection_;
  delete GameSwitchSceneNtf::default_instance_;
  delete GameSwitchSceneNtf_reflection_;
  delete GameStartNtf::default_instance_;
  delete GameStartNtf_reflection_;
  delete DealCardNtf::default_instance_;
  delete DealCardNtf_reflection_;
  delete UserCallScoreNtf::default_instance_;
  delete UserCallScoreNtf_reflection_;
  delete LordSetNtf::default_instance_;
  delete LordSetNtf_reflection_;
  delete SendBaseCardNtf::default_instance_;
  delete SendBaseCardNtf_reflection_;
  delete TakeoutCardNtf::default_instance_;
  delete TakeoutCardNtf_reflection_;
  delete TrustNtf::default_instance_;
  delete TrustNtf_reflection_;
  delete TrustLiftNtf::default_instance_;
  delete TrustLiftNtf_reflection_;
  delete GameOverNtf::default_instance_;
  delete GameOverNtf_reflection_;
  delete ActTimeoutNtf::default_instance_;
  delete ActTimeoutNtf_reflection_;
}

void protobuf_AddDesc_PBGameDDZ_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PBGameDDZ.proto\022\tPBGameDDZ\"\302\001\n\010UserInf"
    "o\022\020\n\010username\030\001 \002(\t\022\020\n\010nickname\030\002 \002(\t\022\021\n"
    "\tavataType\030\003 \002(\005\022\017\n\007avataId\030\004 \002(\t\022\013\n\003sex"
    "\030\005 \002(\005\022\n\005coins\030\006 \002(\003\022\021\n\tvipPoints\030\007 \002(\003"
    "\022\013\n\003exp\030\010 \001(\003\022\017\n\007innings\030\t \001(\005\022\022\n\nwinInn"
    "ings\030\n \001(\005\022\n\005place\030\013 \001(\005\"C\n\tMatchInfo\022\020"
    "\n\010stageNum\030\001 \002(\005\022\021\n\tinningNum\030\002 \002(\005\022\021\n\tu"
    "serCount\030\003 \002(\005\"\035\n\014HandCardList\022\n\005cards\030"
    "\001 \003(\005\",\n\nTableCardList\022\n\005cards\030\001 \003(\005\022\014\n"
    "\004type\030\002 \002(\005\"\027\n\010ReadyReq\022\013\n\003rev\030\001 \002(\005\"\032\n\010"
    "ReadyAck\022\016\n\006result\030\001 \002(\005\"\035\n\014CallScoreReq"
    "\022\n\005score\030\001 \002(\005\"\036\n\014CallScoreAck\022\016\n\006resul"
    "t\030\001 \002(\005\"\037\n\016TakeoutCardReq\022\n\005cards\030\001 \003(\005"
    "\" \n\016TakeoutCardAck\022\016\n\006result\030\001 \002(\005\"\027\n\010Tr"
    "ustReq\022\013\n\003rev\030\001 \002(\005\"+\n\010TrustAck\022\016\n\006resul"
    "t\030\001 \002(\005\022\017\n\007surplus\030\002 \001(\005\"\033\n\014TrustLiftReq"
    "\022\013\n\003rev\030\001 \002(\005\"\036\n\014TrustLiftAck\022\016\n\006result\030"
    "\001 \002(\005\"\035\n\016KeepPlayingReq\022\013\n\003rev\030\001 \002(\005\"\264\004\n"
    "\016KeepPlayingAck\022\016\n\006result\030\001 \002(\005\0224\n\010gamei"
    "nfo\030\002 \002(\0132\".PBGameDDZ.KeepPlayingAck.Gam"
    "eInfo\0228\n\nplayerinfo\030\003 \003(\0132$.PBGameDDZ.Ke"
    "epPlayingAck.PlayerInfo\022\n\005ready\030\004 \002(\005\022\021"
    "\n\tcallscore\030\005 \002(\005\022\017\n\007takeout\030\006 \002(\005\022\016\n\006se"
    "ttle\030\007 \002(\005\022\023\n\013gameChannel\030\010 \002(\t\022\022\n\nbasic"
    "Score\030\t \002(\005\022\'\n\tmatchInfo\030\n \001(\0132\024.PBGameD"
    "DZ.MatchInfo\032{\n\010GameInfo\022\016\n\006status\030\001 \002(\005"
    "\022\020\n\010seatlord\030\002 \002(\005\022\022\n\nseatactive\030\003 \002(\005\022\020"
    "\n\010multiple\030\004 \002(\005\022\024\n\014maxcallscore\030\005 \002(\005\022\021"
    "\n\tbasecards\030\006 \003(\005\032\217\001\n\nPlayerInfo\022\n\005trus"
    "t\030\001 \002(\010\022\024\n\014trustsurplus\030\002 \002(\005\022\021\n\tcallsco"
    "re\030\003 \002(\005\022\n\005cards\030\004 \003(\005\022\021\n\tlastcards\030\005 \003"
    "(\005\022\'\n\ndetailinfo\030\006 \002(\0132\023.PBGameDDZ.UserI"
    "nfo\"\037\n\nGameStatusNtf\022\016\n\006status\030\001 \002(\005\"7\n\022"
    "GameSwitchSceneNtf\022\020\n\010gameName\030\001 \002(\t\022\017\n\007"
    "isMatch\030\002 \002(\010\"\204\001\n\014GameStartNtf\022\020\n\010gameNa"
    "me\030\001 \002(\t\022\022\n\nbasicScore\030\002 \002(\005\022%\n\010userinfo"
    "\030\003 \003(\0132\023.PBGameDDZ.UserInfo\022\'\n\tmatchInfo"
    "\030\004 \001(\0132\024.PBGameDDZ.MatchInfo\"I\n\013DealCard"
    "Ntf\022\022\n\nheaderseat\030\001 \002(\005\022&\n\005cards\030\002 \003(\0132\027"
    ".PBGameDDZ.HandCardList\"G\n\020UserCallScore"
    "Ntf\022\016\n\006seatno\030\001 \002(\005\022\024\n\010seatnext\030\002 \002(\005:\002-"
    "1\022\n\005score\030\003 \002(\005\"1\n\nLordSetNtf\022\020\n\010seatlo"
    "rd\030\001 \002(\005\022\021\n\tcallscore\030\002 \002(\005\"$\n\017SendBaseC"
    "ardNtf\022\021\n\tbasecards\030\001 \003(\005\"e\n\016TakeoutCard"
    "Ntf\022\016\n\006seatno\030\001 \002(\005\022\020\n\010seatnext\030\002 \002(\005\022\n"
    "\005cards\030\003 \003(\005\022\020\n\010cardtype\030\004 \002(\005\022\020\n\010multip"
    "le\030\005 \002(\005\"\032\n\010TrustNtf\022\016\n\006seatno\030\001 \002(\005\"\036\n\014"
    "TrustLiftNtf\022\016\n\006seatno\030\001 \002(\005\" \n\013GameOver"
    "Ntf\022\021\n\006reason\030\001 \002(\005:\0012\"R\n\nActTimeoutNtf\022"
    "\n\005ready\030\001 \002(\005\022\021\n\tcallscore\030\002 \002(\005\022\017\n\007tak"
    "eout\030\003 \002(\005\022\016\n\006settle\030\004 \002(\005*\252\002\n\010reqMsgID\022"
    "\030\n\023MSGID_CALLSCORE_REQ\020\211\'\022\030\n\023MSGID_CALLS"
    "CORE_ACK\020\212\'\022\026\n\021MSGID_TAKEOUT_REQ\020\213\'\022\026\n\021M"
    "SGID_TAKEOUT_ACK\020\214\'\022\024\n\017MSGID_TRUST_REQ\020\215"
    "\'\022\024\n\017MSGID_TRUST_ACK\020\216\'\022\033\n\026MSGID_TRUST_C"
    "ANCEL_REQ\020\217\'\022\033\n\026MSGID_TRUST_CANCEL_ACK\020\220"
    "\'\022\023\n\016MSGID_KEEP_REQ\020\221\'\022\023\n\016MSGID_KEEP_ACK"
    "\020\222\'\022\024\n\017MSGID_READY_REQ\020\223\'\022\024\n\017MSGID_READY"
    "_ACK\020\224\'*\261\002\n\013notifyMsgID\022\025\n\020NOTIFY_STARTG"
    "AME\020\272\'\022\025\n\020NOTIFY_FORCEQUIT\020\273\'\022\025\n\020NOTIFY_"
    "TB_STATUS\020\274\'\022\021\n\014NOTIFY_TRUST\020\275\'\022\030\n\023NOTIF"
    "Y_TRUST_CANCEL\020\276\'\022\024\n\017NOTIFY_DEALCARD\020\277\'\022"
    "\024\n\017NOTIFY_BASECARD\020\300\'\022\025\n\020NOTIFY_CALLSCOR"
    "E\020\301\'\022\023\n\016NOTIFY_SETLORD\020\302\'\022\023\n\016NOTIFY_TAKE"
    "OUT\020\303\'\022\024\n\017NOTIFY_GAMEOVER\020\304\'\022\023\n\016NOTIFY_T"
    "IMEOUT\020\305\'\022\030\n\023NOTIFY_SWITCH_SCENE\020\306\'*\232\005\n\t"
    "gameErrno\022\017\n\013ERR_SUCCESS\020\000\022\030\n\013ERR_UNKNOW"
    "N\020\377\377\377\377\377\377\377\377\377\001\022\032\n\nERR_BADPACKET\020\376\377\377\377\377\377\377\377\377\001"
    "\022\035\n\020ERR_NULLUSERNAME\020\375\377\377\377\377\377\377\377\377\001\022\035\n\020ERR_N"
    "OTEXISTGUID\020\374\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_NOTEXISTPL"
    "AYER\020\373\377\377\377\377\377\377\377\377\001\022\035\n\020ERR_NOTENTERGAME\020\372\377\377\377"
    "\377\377\377\377\377\001\022\030\n\013ERR_SESSION\020\371\377\377\377\377\377\377\377\377\001\022\035\n\020ERR_"
    "BADCALLSCORE\020\370\377\377\377\377\377\377\377\377\001\022\036\n\021ERR_BADTAKEOU"
    "TNUM\020\367\377\377\377\377\377\377\377\377\001\022\033\n\016ERR_NOTTAKEOUT\020\366\377\377\377\377\377"
    "\377\377\377\001\022\035\n\020ERR_NOTCALLSCORE\020\365\377\377\377\377\377\377\377\377\001\022\035\n\020E"
    "RR_TAKEOUTORDER\020\364\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_CALLSC"
    "OREORDER\020\363\377\377\377\377\377\377\377\377\001\022\035\n\020ERR_TRUSTTAKEOUT\020"
    "\362\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_TRUSTCALLSCORE\020\361\377\377\377\377\377\377"
    "\377\377\001\022\034\n\017ERR_LEADEROWNER\020\360\377\377\377\377\377\377\377\377\001\022\033\n\016ERR"
    "_TRUSTCOUNT\020\357\377\377\377\377\377\377\377\377\001\022\035\n\020ERR_ALREADYTRU"
    "ST\020\356\377\377\377\377\377\377\377\377\001\022\031\n\014ERR_NOTTRUST\020\355\377\377\377\377\377\377\377\377\001"
    "\022\036\n\021ERR_NONWAITSTATUS\020\354\377\377\377\377\377\377\377\377\001\022\036\n\021ERR_"
    "TAKEOUTFAILED\020\353\377\377\377\377\377\377\377\377\001*z\n\ngameStatus\022\013"
    "\n\007TB_IDLE\020\000\022\014\n\010TB_READY\020\001\022\020\n\014TB_DEALCARD"
    "S\020\002\022\020\n\014TB_CALLSCORE\020\003\022\016\n\nTB_TAKEOUT\020\004\022\016\n"
    "\nTB_INVALID\020\005\022\n\tTB_SETTLE\020\006", 3428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBGameDDZ.proto", &protobuf_RegisterTypes);
  UserInfo::default_instance_ = new UserInfo();
  MatchInfo::default_instance_ = new MatchInfo();
  HandCardList::default_instance_ = new HandCardList();
  TableCardList::default_instance_ = new TableCardList();
  ReadyReq::default_instance_ = new ReadyReq();
  ReadyAck::default_instance_ = new ReadyAck();
  CallScoreReq::default_instance_ = new CallScoreReq();
  CallScoreAck::default_instance_ = new CallScoreAck();
  TakeoutCardReq::default_instance_ = new TakeoutCardReq();
  TakeoutCardAck::default_instance_ = new TakeoutCardAck();
  TrustReq::default_instance_ = new TrustReq();
  TrustAck::default_instance_ = new TrustAck();
  TrustLiftReq::default_instance_ = new TrustLiftReq();
  TrustLiftAck::default_instance_ = new TrustLiftAck();
  KeepPlayingReq::default_instance_ = new KeepPlayingReq();
  KeepPlayingAck::default_instance_ = new KeepPlayingAck();
  KeepPlayingAck_GameInfo::default_instance_ = new KeepPlayingAck_GameInfo();
  KeepPlayingAck_PlayerInfo::default_instance_ = new KeepPlayingAck_PlayerInfo();
  GameStatusNtf::default_instance_ = new GameStatusNtf();
  GameSwitchSceneNtf::default_instance_ = new GameSwitchSceneNtf();
  GameStartNtf::default_instance_ = new GameStartNtf();
  DealCardNtf::default_instance_ = new DealCardNtf();
  UserCallScoreNtf::default_instance_ = new UserCallScoreNtf();
  LordSetNtf::default_instance_ = new LordSetNtf();
  SendBaseCardNtf::default_instance_ = new SendBaseCardNtf();
  TakeoutCardNtf::default_instance_ = new TakeoutCardNtf();
  TrustNtf::default_instance_ = new TrustNtf();
  TrustLiftNtf::default_instance_ = new TrustLiftNtf();
  GameOverNtf::default_instance_ = new GameOverNtf();
  ActTimeoutNtf::default_instance_ = new ActTimeoutNtf();
  UserInfo::default_instance_->InitAsDefaultInstance();
  MatchInfo::default_instance_->InitAsDefaultInstance();
  HandCardList::default_instance_->InitAsDefaultInstance();
  TableCardList::default_instance_->InitAsDefaultInstance();
  ReadyReq::default_instance_->InitAsDefaultInstance();
  ReadyAck::default_instance_->InitAsDefaultInstance();
  CallScoreReq::default_instance_->InitAsDefaultInstance();
  CallScoreAck::default_instance_->InitAsDefaultInstance();
  TakeoutCardReq::default_instance_->InitAsDefaultInstance();
  TakeoutCardAck::default_instance_->InitAsDefaultInstance();
  TrustReq::default_instance_->InitAsDefaultInstance();
  TrustAck::default_instance_->InitAsDefaultInstance();
  TrustLiftReq::default_instance_->InitAsDefaultInstance();
  TrustLiftAck::default_instance_->InitAsDefaultInstance();
  KeepPlayingReq::default_instance_->InitAsDefaultInstance();
  KeepPlayingAck::default_instance_->InitAsDefaultInstance();
  KeepPlayingAck_GameInfo::default_instance_->InitAsDefaultInstance();
  KeepPlayingAck_PlayerInfo::default_instance_->InitAsDefaultInstance();
  GameStatusNtf::default_instance_->InitAsDefaultInstance();
  GameSwitchSceneNtf::default_instance_->InitAsDefaultInstance();
  GameStartNtf::default_instance_->InitAsDefaultInstance();
  DealCardNtf::default_instance_->InitAsDefaultInstance();
  UserCallScoreNtf::default_instance_->InitAsDefaultInstance();
  LordSetNtf::default_instance_->InitAsDefaultInstance();
  SendBaseCardNtf::default_instance_->InitAsDefaultInstance();
  TakeoutCardNtf::default_instance_->InitAsDefaultInstance();
  TrustNtf::default_instance_->InitAsDefaultInstance();
  TrustLiftNtf::default_instance_->InitAsDefaultInstance();
  GameOverNtf::default_instance_->InitAsDefaultInstance();
  ActTimeoutNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBGameDDZ_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBGameDDZ_2eproto {
  StaticDescriptorInitializer_PBGameDDZ_2eproto() {
    protobuf_AddDesc_PBGameDDZ_2eproto();
  }
} static_descriptor_initializer_PBGameDDZ_2eproto_;
const ::google::protobuf::EnumDescriptor* reqMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reqMsgID_descriptor_;
}
bool reqMsgID_IsValid(int value) {
  switch(value) {
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* notifyMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyMsgID_descriptor_;
}
bool notifyMsgID_IsValid(int value) {
  switch(value) {
    case 5050:
    case 5051:
    case 5052:
    case 5053:
    case 5054:
    case 5055:
    case 5056:
    case 5057:
    case 5058:
    case 5059:
    case 5060:
    case 5061:
    case 5062:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* gameErrno_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gameErrno_descriptor_;
}
bool gameErrno_IsValid(int value) {
  switch(value) {
    case -21:
    case -20:
    case -19:
    case -18:
    case -17:
    case -16:
    case -15:
    case -14:
    case -13:
    case -12:
    case -11:
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* gameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gameStatus_descriptor_;
}
bool gameStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kNicknameFieldNumber;
const int UserInfo::kAvataTypeFieldNumber;
const int UserInfo::kAvataIdFieldNumber;
const int UserInfo::kSexFieldNumber;
const int UserInfo::kCoinsFieldNumber;
const int UserInfo::kVipPointsFieldNumber;
const int UserInfo::kExpFieldNumber;
const int UserInfo::kInningsFieldNumber;
const int UserInfo::kWinInningsFieldNumber;
const int UserInfo::kPlaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatatype_ = 0;
  avataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  coins_ = GOOGLE_LONGLONG(0);
  vippoints_ = GOOGLE_LONGLONG(0);
  exp_ = GOOGLE_LONGLONG(0);
  innings_ = 0;
  wininnings_ = 0;
  place_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(avatatype_, exp_);
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_avataid()) {
      avataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(innings_, place_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PBGameDDZ.UserInfo.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PBGameDDZ.UserInfo.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_avataType;
        break;
      }

      // required int32 avataType = 3;
      case 3: {
        if (tag == 24) {
         parse_avataType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatatype_)));
          set_has_avatatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avataId;
        break;
      }

      // required string avataId = 4;
      case 4: {
        if (tag == 34) {
         parse_avataId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avataid().data(), this->avataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PBGameDDZ.UserInfo.avataId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // required int32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_coins;
        break;
      }

      // required int64 coins = 6;
      case 6: {
        if (tag == 48) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_vipPoints;
        break;
      }

      // required int64 vipPoints = 7;
      case 7: {
        if (tag == 56) {
         parse_vipPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vippoints_)));
          set_has_vippoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int64 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_innings;
        break;
      }

      // optional int32 innings = 9;
      case 9: {
        if (tag == 72) {
         parse_innings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &innings_)));
          set_has_innings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_winInnings;
        break;
      }

      // optional int32 winInnings = 10;
      case 10: {
        if (tag == 80) {
         parse_winInnings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wininnings_)));
          set_has_wininnings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_place;
        break;
      }

      // optional int32 place = 11;
      case 11: {
        if (tag == 88) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.UserInfo)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.UserInfo.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.UserInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required int32 avataType = 3;
  if (has_avatatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->avatatype(), output);
  }

  // required string avataId = 4;
  if (has_avataid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avataid().data(), this->avataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.UserInfo.avataId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avataid(), output);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // required int64 coins = 6;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->coins(), output);
  }

  // required int64 vipPoints = 7;
  if (has_vippoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vippoints(), output);
  }

  // optional int64 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->exp(), output);
  }

  // optional int32 innings = 9;
  if (has_innings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->innings(), output);
  }

  // optional int32 winInnings = 10;
  if (has_wininnings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->wininnings(), output);
  }

  // optional int32 place = 11;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->place(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.UserInfo)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.UserInfo.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.UserInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required int32 avataType = 3;
  if (has_avatatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->avatatype(), target);
  }

  // required string avataId = 4;
  if (has_avataid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avataid().data(), this->avataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.UserInfo.avataId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avataid(), target);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // required int64 coins = 6;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->coins(), target);
  }

  // required int64 vipPoints = 7;
  if (has_vippoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vippoints(), target);
  }

  // optional int64 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->exp(), target);
  }

  // optional int32 innings = 9;
  if (has_innings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->innings(), target);
  }

  // optional int32 winInnings = 10;
  if (has_wininnings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->wininnings(), target);
  }

  // optional int32 place = 11;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->place(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.UserInfo)
  return target;
}

int UserInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_username()) {
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_nickname()) {
    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_avatatype()) {
    // required int32 avataType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avatatype());
  }

  if (has_avataid()) {
    // required string avataId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avataid());
  }

  if (has_sex()) {
    // required int32 sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  if (has_coins()) {
    // required int64 coins = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->coins());
  }

  if (has_vippoints()) {
    // required int64 vipPoints = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vippoints());
  }

  return total_size;
}
int UserInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required int32 avataType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avatatype());

    // required string avataId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avataid());

    // required int32 sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

    // required int64 coins = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->coins());

    // required int64 vipPoints = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vippoints());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 exp = 8;
  if (has_exp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->exp());
  }

  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 innings = 9;
    if (has_innings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->innings());
    }

    // optional int32 winInnings = 10;
    if (has_wininnings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wininnings());
    }

    // optional int32 place = 11;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_avatatype()) {
      set_avatatype(from.avatatype());
    }
    if (from.has_avataid()) {
      set_has_avataid();
      avataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avataid_);
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_vippoints()) {
      set_vippoints(from.vippoints());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_innings()) {
      set_innings(from.innings());
    }
    if (from.has_wininnings()) {
      set_wininnings(from.wininnings());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  std::swap(avatatype_, other->avatatype_);
  avataid_.Swap(&other->avataid_);
  std::swap(sex_, other->sex_);
  std::swap(coins_, other->coins_);
  std::swap(vippoints_, other->vippoints_);
  std::swap(exp_, other->exp_);
  std::swap(innings_, other->innings_);
  std::swap(wininnings_, other->wininnings_);
  std::swap(place_, other->place_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// required string username = 1;
bool UserInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.username)
}
 void UserInfo::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.UserInfo.username)
}
 void UserInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.UserInfo.username)
}
 ::std::string* UserInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.UserInfo.username)
}

// required string nickname = 2;
bool UserInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& UserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.nickname)
}
 void UserInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.UserInfo.nickname)
}
 void UserInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.UserInfo.nickname)
}
 ::std::string* UserInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.UserInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.UserInfo.nickname)
}

// required int32 avataType = 3;
bool UserInfo::has_avatatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfo::set_has_avatatype() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfo::clear_has_avatatype() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfo::clear_avatatype() {
  avatatype_ = 0;
  clear_has_avatatype();
}
 ::google::protobuf::int32 UserInfo::avatatype() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.avataType)
  return avatatype_;
}
 void UserInfo::set_avatatype(::google::protobuf::int32 value) {
  set_has_avatatype();
  avatatype_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.avataType)
}

// required string avataId = 4;
bool UserInfo::has_avataid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserInfo::set_has_avataid() {
  _has_bits_[0] |= 0x00000008u;
}
void UserInfo::clear_has_avataid() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserInfo::clear_avataid() {
  avataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avataid();
}
 const ::std::string& UserInfo::avataid() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.avataId)
  return avataid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_avataid(const ::std::string& value) {
  set_has_avataid();
  avataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.avataId)
}
 void UserInfo::set_avataid(const char* value) {
  set_has_avataid();
  avataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.UserInfo.avataId)
}
 void UserInfo::set_avataid(const char* value, size_t size) {
  set_has_avataid();
  avataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.UserInfo.avataId)
}
 ::std::string* UserInfo::mutable_avataid() {
  set_has_avataid();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.UserInfo.avataId)
  return avataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_avataid() {
  clear_has_avataid();
  return avataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_avataid(::std::string* avataid) {
  if (avataid != NULL) {
    set_has_avataid();
  } else {
    clear_has_avataid();
  }
  avataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avataid);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.UserInfo.avataId)
}

// required int32 sex = 5;
bool UserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
void UserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
 ::google::protobuf::int32 UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.sex)
  return sex_;
}
 void UserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.sex)
}

// required int64 coins = 6;
bool UserInfo::has_coins() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserInfo::set_has_coins() {
  _has_bits_[0] |= 0x00000020u;
}
void UserInfo::clear_has_coins() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserInfo::clear_coins() {
  coins_ = GOOGLE_LONGLONG(0);
  clear_has_coins();
}
 ::google::protobuf::int64 UserInfo::coins() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.coins)
  return coins_;
}
 void UserInfo::set_coins(::google::protobuf::int64 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.coins)
}

// required int64 vipPoints = 7;
bool UserInfo::has_vippoints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserInfo::set_has_vippoints() {
  _has_bits_[0] |= 0x00000040u;
}
void UserInfo::clear_has_vippoints() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserInfo::clear_vippoints() {
  vippoints_ = GOOGLE_LONGLONG(0);
  clear_has_vippoints();
}
 ::google::protobuf::int64 UserInfo::vippoints() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.vipPoints)
  return vippoints_;
}
 void UserInfo::set_vippoints(::google::protobuf::int64 value) {
  set_has_vippoints();
  vippoints_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.vipPoints)
}

// optional int64 exp = 8;
bool UserInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
void UserInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
 ::google::protobuf::int64 UserInfo::exp() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.exp)
  return exp_;
}
 void UserInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.exp)
}

// optional int32 innings = 9;
bool UserInfo::has_innings() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserInfo::set_has_innings() {
  _has_bits_[0] |= 0x00000100u;
}
void UserInfo::clear_has_innings() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserInfo::clear_innings() {
  innings_ = 0;
  clear_has_innings();
}
 ::google::protobuf::int32 UserInfo::innings() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.innings)
  return innings_;
}
 void UserInfo::set_innings(::google::protobuf::int32 value) {
  set_has_innings();
  innings_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.innings)
}

// optional int32 winInnings = 10;
bool UserInfo::has_wininnings() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserInfo::set_has_wininnings() {
  _has_bits_[0] |= 0x00000200u;
}
void UserInfo::clear_has_wininnings() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserInfo::clear_wininnings() {
  wininnings_ = 0;
  clear_has_wininnings();
}
 ::google::protobuf::int32 UserInfo::wininnings() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.winInnings)
  return wininnings_;
}
 void UserInfo::set_wininnings(::google::protobuf::int32 value) {
  set_has_wininnings();
  wininnings_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.winInnings)
}

// optional int32 place = 11;
bool UserInfo::has_place() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserInfo::set_has_place() {
  _has_bits_[0] |= 0x00000400u;
}
void UserInfo::clear_has_place() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserInfo::clear_place() {
  place_ = 0;
  clear_has_place();
}
 ::google::protobuf::int32 UserInfo::place() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.place)
  return place_;
}
 void UserInfo::set_place(::google::protobuf::int32 value) {
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.place)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchInfo::kStageNumFieldNumber;
const int MatchInfo::kInningNumFieldNumber;
const int MatchInfo::kUserCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchInfo::MatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.MatchInfo)
}

void MatchInfo::InitAsDefaultInstance() {
}

MatchInfo::MatchInfo(const MatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.MatchInfo)
}

void MatchInfo::SharedCtor() {
  _cached_size_ = 0;
  stagenum_ = 0;
  inningnum_ = 0;
  usercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchInfo::~MatchInfo() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.MatchInfo)
  SharedDtor();
}

void MatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchInfo_descriptor_;
}

const MatchInfo& MatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

MatchInfo* MatchInfo::default_instance_ = NULL;

MatchInfo* MatchInfo::New(::google::protobuf::Arena* arena) const {
  MatchInfo* n = new MatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatchInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stagenum_, usercount_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.MatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stageNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stagenum_)));
          set_has_stagenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inningNum;
        break;
      }

      // required int32 inningNum = 2;
      case 2: {
        if (tag == 16) {
         parse_inningNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inningnum_)));
          set_has_inningnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userCount;
        break;
      }

      // required int32 userCount = 3;
      case 3: {
        if (tag == 24) {
         parse_userCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercount_)));
          set_has_usercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.MatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.MatchInfo)
  return false;
#undef DO_
}

void MatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.MatchInfo)
  // required int32 stageNum = 1;
  if (has_stagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stagenum(), output);
  }

  // required int32 inningNum = 2;
  if (has_inningnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inningnum(), output);
  }

  // required int32 userCount = 3;
  if (has_usercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usercount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.MatchInfo)
}

::google::protobuf::uint8* MatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.MatchInfo)
  // required int32 stageNum = 1;
  if (has_stagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stagenum(), target);
  }

  // required int32 inningNum = 2;
  if (has_inningnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inningnum(), target);
  }

  // required int32 userCount = 3;
  if (has_usercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usercount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.MatchInfo)
  return target;
}

int MatchInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_stagenum()) {
    // required int32 stageNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stagenum());
  }

  if (has_inningnum()) {
    // required int32 inningNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inningnum());
  }

  if (has_usercount()) {
    // required int32 userCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usercount());
  }

  return total_size;
}
int MatchInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 stageNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stagenum());

    // required int32 inningNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inningnum());

    // required int32 userCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchInfo::MergeFrom(const MatchInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stagenum()) {
      set_stagenum(from.stagenum());
    }
    if (from.has_inningnum()) {
      set_inningnum(from.inningnum());
    }
    if (from.has_usercount()) {
      set_usercount(from.usercount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchInfo::CopyFrom(const MatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MatchInfo::Swap(MatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchInfo::InternalSwap(MatchInfo* other) {
  std::swap(stagenum_, other->stagenum_);
  std::swap(inningnum_, other->inningnum_);
  std::swap(usercount_, other->usercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchInfo_descriptor_;
  metadata.reflection = MatchInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchInfo

// required int32 stageNum = 1;
bool MatchInfo::has_stagenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MatchInfo::set_has_stagenum() {
  _has_bits_[0] |= 0x00000001u;
}
void MatchInfo::clear_has_stagenum() {
  _has_bits_[0] &= ~0x00000001u;
}
void MatchInfo::clear_stagenum() {
  stagenum_ = 0;
  clear_has_stagenum();
}
 ::google::protobuf::int32 MatchInfo::stagenum() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.MatchInfo.stageNum)
  return stagenum_;
}
 void MatchInfo::set_stagenum(::google::protobuf::int32 value) {
  set_has_stagenum();
  stagenum_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.MatchInfo.stageNum)
}

// required int32 inningNum = 2;
bool MatchInfo::has_inningnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MatchInfo::set_has_inningnum() {
  _has_bits_[0] |= 0x00000002u;
}
void MatchInfo::clear_has_inningnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void MatchInfo::clear_inningnum() {
  inningnum_ = 0;
  clear_has_inningnum();
}
 ::google::protobuf::int32 MatchInfo::inningnum() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.MatchInfo.inningNum)
  return inningnum_;
}
 void MatchInfo::set_inningnum(::google::protobuf::int32 value) {
  set_has_inningnum();
  inningnum_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.MatchInfo.inningNum)
}

// required int32 userCount = 3;
bool MatchInfo::has_usercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MatchInfo::set_has_usercount() {
  _has_bits_[0] |= 0x00000004u;
}
void MatchInfo::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void MatchInfo::clear_usercount() {
  usercount_ = 0;
  clear_has_usercount();
}
 ::google::protobuf::int32 MatchInfo::usercount() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.MatchInfo.userCount)
  return usercount_;
}
 void MatchInfo::set_usercount(::google::protobuf::int32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.MatchInfo.userCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandCardList::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandCardList::HandCardList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.HandCardList)
}

void HandCardList::InitAsDefaultInstance() {
}

HandCardList::HandCardList(const HandCardList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.HandCardList)
}

void HandCardList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandCardList::~HandCardList() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.HandCardList)
  SharedDtor();
}

void HandCardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandCardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandCardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandCardList_descriptor_;
}

const HandCardList& HandCardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

HandCardList* HandCardList::default_instance_ = NULL;

HandCardList* HandCardList::New(::google::protobuf::Arena* arena) const {
  HandCardList* n = new HandCardList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandCardList::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HandCardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.HandCardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (tag == 8) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.HandCardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.HandCardList)
  return false;
#undef DO_
}

void HandCardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.HandCardList)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.HandCardList)
}

::google::protobuf::uint8* HandCardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.HandCardList)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.HandCardList)
  return target;
}

int HandCardList::ByteSize() const {
  int total_size = 0;

  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandCardList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HandCardList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HandCardList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandCardList::MergeFrom(const HandCardList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HandCardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandCardList::CopyFrom(const HandCardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandCardList::IsInitialized() const {

  return true;
}

void HandCardList::Swap(HandCardList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandCardList::InternalSwap(HandCardList* other) {
  cards_.UnsafeArenaSwap(&other->cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HandCardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandCardList_descriptor_;
  metadata.reflection = HandCardList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HandCardList

// repeated int32 cards = 1;
int HandCardList::cards_size() const {
  return cards_.size();
}
void HandCardList::clear_cards() {
  cards_.Clear();
}
 ::google::protobuf::int32 HandCardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.HandCardList.cards)
  return cards_.Get(index);
}
 void HandCardList::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.HandCardList.cards)
}
 void HandCardList::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.HandCardList.cards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HandCardList::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.HandCardList.cards)
  return cards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HandCardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.HandCardList.cards)
  return &cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableCardList::kCardsFieldNumber;
const int TableCardList::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableCardList::TableCardList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TableCardList)
}

void TableCardList::InitAsDefaultInstance() {
}

TableCardList::TableCardList(const TableCardList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TableCardList)
}

void TableCardList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableCardList::~TableCardList() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TableCardList)
  SharedDtor();
}

void TableCardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableCardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableCardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableCardList_descriptor_;
}

const TableCardList& TableCardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TableCardList* TableCardList::default_instance_ = NULL;

TableCardList* TableCardList::New(::google::protobuf::Arena* arena) const {
  TableCardList* n = new TableCardList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableCardList::Clear() {
  type_ = 0;
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TableCardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TableCardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (tag == 8) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TableCardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TableCardList)
  return false;
#undef DO_
}

void TableCardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TableCardList)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TableCardList)
}

::google::protobuf::uint8* TableCardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TableCardList)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TableCardList)
  return target;
}

int TableCardList::ByteSize() const {
  int total_size = 0;

  // required int32 type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableCardList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TableCardList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableCardList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableCardList::MergeFrom(const TableCardList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TableCardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCardList::CopyFrom(const TableCardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCardList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void TableCardList::Swap(TableCardList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableCardList::InternalSwap(TableCardList* other) {
  cards_.UnsafeArenaSwap(&other->cards_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableCardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableCardList_descriptor_;
  metadata.reflection = TableCardList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableCardList

// repeated int32 cards = 1;
int TableCardList::cards_size() const {
  return cards_.size();
}
void TableCardList::clear_cards() {
  cards_.Clear();
}
 ::google::protobuf::int32 TableCardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TableCardList.cards)
  return cards_.Get(index);
}
 void TableCardList::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.TableCardList.cards)
}
 void TableCardList::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.TableCardList.cards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TableCardList::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.TableCardList.cards)
  return cards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TableCardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.TableCardList.cards)
  return &cards_;
}

// required int32 type = 2;
bool TableCardList::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TableCardList::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TableCardList::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TableCardList::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 TableCardList::type() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TableCardList.type)
  return type_;
}
 void TableCardList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TableCardList.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyReq::kRevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyReq::ReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.ReadyReq)
}

void ReadyReq::InitAsDefaultInstance() {
}

ReadyReq::ReadyReq(const ReadyReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.ReadyReq)
}

void ReadyReq::SharedCtor() {
  _cached_size_ = 0;
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyReq::~ReadyReq() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.ReadyReq)
  SharedDtor();
}

void ReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyReq_descriptor_;
}

const ReadyReq& ReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

ReadyReq* ReadyReq::default_instance_ = NULL;

ReadyReq* ReadyReq::New(::google::protobuf::Arena* arena) const {
  ReadyReq* n = new ReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadyReq::Clear() {
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.ReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rev = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rev_)));
          set_has_rev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.ReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.ReadyReq)
  return false;
#undef DO_
}

void ReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.ReadyReq)
  // required int32 rev = 1;
  if (has_rev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.ReadyReq)
}

::google::protobuf::uint8* ReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.ReadyReq)
  // required int32 rev = 1;
  if (has_rev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.ReadyReq)
  return target;
}

int ReadyReq::ByteSize() const {
  int total_size = 0;

  // required int32 rev = 1;
  if (has_rev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rev());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadyReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadyReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyReq::MergeFrom(const ReadyReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rev()) {
      set_rev(from.rev());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyReq::CopyFrom(const ReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadyReq::Swap(ReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyReq::InternalSwap(ReadyReq* other) {
  std::swap(rev_, other->rev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyReq_descriptor_;
  metadata.reflection = ReadyReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadyReq

// required int32 rev = 1;
bool ReadyReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadyReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadyReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadyReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
 ::google::protobuf::int32 ReadyReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ReadyReq.rev)
  return rev_;
}
 void ReadyReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ReadyReq.rev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyAck::ReadyAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.ReadyAck)
}

void ReadyAck::InitAsDefaultInstance() {
}

ReadyAck::ReadyAck(const ReadyAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.ReadyAck)
}

void ReadyAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyAck::~ReadyAck() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.ReadyAck)
  SharedDtor();
}

void ReadyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyAck_descriptor_;
}

const ReadyAck& ReadyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

ReadyAck* ReadyAck::default_instance_ = NULL;

ReadyAck* ReadyAck::New(::google::protobuf::Arena* arena) const {
  ReadyAck* n = new ReadyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadyAck::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReadyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.ReadyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.ReadyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.ReadyAck)
  return false;
#undef DO_
}

void ReadyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.ReadyAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.ReadyAck)
}

::google::protobuf::uint8* ReadyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.ReadyAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.ReadyAck)
  return target;
}

int ReadyAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadyAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadyAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyAck::MergeFrom(const ReadyAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReadyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyAck::CopyFrom(const ReadyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadyAck::Swap(ReadyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyAck::InternalSwap(ReadyAck* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyAck_descriptor_;
  metadata.reflection = ReadyAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadyAck

// required int32 result = 1;
bool ReadyAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadyAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadyAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadyAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 ReadyAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ReadyAck.result)
  return result_;
}
 void ReadyAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ReadyAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallScoreReq::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallScoreReq::CallScoreReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.CallScoreReq)
}

void CallScoreReq::InitAsDefaultInstance() {
}

CallScoreReq::CallScoreReq(const CallScoreReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.CallScoreReq)
}

void CallScoreReq::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallScoreReq::~CallScoreReq() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.CallScoreReq)
  SharedDtor();
}

void CallScoreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallScoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallScoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallScoreReq_descriptor_;
}

const CallScoreReq& CallScoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

CallScoreReq* CallScoreReq::default_instance_ = NULL;

CallScoreReq* CallScoreReq::New(::google::protobuf::Arena* arena) const {
  CallScoreReq* n = new CallScoreReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallScoreReq::Clear() {
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CallScoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.CallScoreReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.CallScoreReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.CallScoreReq)
  return false;
#undef DO_
}

void CallScoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.CallScoreReq)
  // required int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.CallScoreReq)
}

::google::protobuf::uint8* CallScoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.CallScoreReq)
  // required int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.CallScoreReq)
  return target;
}

int CallScoreReq::ByteSize() const {
  int total_size = 0;

  // required int32 score = 1;
  if (has_score()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallScoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallScoreReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CallScoreReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallScoreReq::MergeFrom(const CallScoreReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CallScoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallScoreReq::CopyFrom(const CallScoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallScoreReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CallScoreReq::Swap(CallScoreReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallScoreReq::InternalSwap(CallScoreReq* other) {
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallScoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallScoreReq_descriptor_;
  metadata.reflection = CallScoreReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallScoreReq

// required int32 score = 1;
bool CallScoreReq::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CallScoreReq::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void CallScoreReq::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void CallScoreReq::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::google::protobuf::int32 CallScoreReq::score() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.CallScoreReq.score)
  return score_;
}
 void CallScoreReq::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.CallScoreReq.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallScoreAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallScoreAck::CallScoreAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.CallScoreAck)
}

void CallScoreAck::InitAsDefaultInstance() {
}

CallScoreAck::CallScoreAck(const CallScoreAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.CallScoreAck)
}

void CallScoreAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallScoreAck::~CallScoreAck() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.CallScoreAck)
  SharedDtor();
}

void CallScoreAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallScoreAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallScoreAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallScoreAck_descriptor_;
}

const CallScoreAck& CallScoreAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

CallScoreAck* CallScoreAck::default_instance_ = NULL;

CallScoreAck* CallScoreAck::New(::google::protobuf::Arena* arena) const {
  CallScoreAck* n = new CallScoreAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallScoreAck::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CallScoreAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.CallScoreAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.CallScoreAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.CallScoreAck)
  return false;
#undef DO_
}

void CallScoreAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.CallScoreAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.CallScoreAck)
}

::google::protobuf::uint8* CallScoreAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.CallScoreAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.CallScoreAck)
  return target;
}

int CallScoreAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallScoreAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallScoreAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CallScoreAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallScoreAck::MergeFrom(const CallScoreAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CallScoreAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallScoreAck::CopyFrom(const CallScoreAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallScoreAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CallScoreAck::Swap(CallScoreAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallScoreAck::InternalSwap(CallScoreAck* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallScoreAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallScoreAck_descriptor_;
  metadata.reflection = CallScoreAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallScoreAck

// required int32 result = 1;
bool CallScoreAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CallScoreAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CallScoreAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CallScoreAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 CallScoreAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.CallScoreAck.result)
  return result_;
}
 void CallScoreAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.CallScoreAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeoutCardReq::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeoutCardReq::TakeoutCardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TakeoutCardReq)
}

void TakeoutCardReq::InitAsDefaultInstance() {
}

TakeoutCardReq::TakeoutCardReq(const TakeoutCardReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TakeoutCardReq)
}

void TakeoutCardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeoutCardReq::~TakeoutCardReq() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TakeoutCardReq)
  SharedDtor();
}

void TakeoutCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeoutCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeoutCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeoutCardReq_descriptor_;
}

const TakeoutCardReq& TakeoutCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TakeoutCardReq* TakeoutCardReq::default_instance_ = NULL;

TakeoutCardReq* TakeoutCardReq::New(::google::protobuf::Arena* arena) const {
  TakeoutCardReq* n = new TakeoutCardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeoutCardReq::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TakeoutCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TakeoutCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (tag == 8) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TakeoutCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TakeoutCardReq)
  return false;
#undef DO_
}

void TakeoutCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TakeoutCardReq)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TakeoutCardReq)
}

::google::protobuf::uint8* TakeoutCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TakeoutCardReq)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TakeoutCardReq)
  return target;
}

int TakeoutCardReq::ByteSize() const {
  int total_size = 0;

  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeoutCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TakeoutCardReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeoutCardReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeoutCardReq::MergeFrom(const TakeoutCardReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TakeoutCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeoutCardReq::CopyFrom(const TakeoutCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeoutCardReq::IsInitialized() const {

  return true;
}

void TakeoutCardReq::Swap(TakeoutCardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeoutCardReq::InternalSwap(TakeoutCardReq* other) {
  cards_.UnsafeArenaSwap(&other->cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeoutCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeoutCardReq_descriptor_;
  metadata.reflection = TakeoutCardReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeoutCardReq

// repeated int32 cards = 1;
int TakeoutCardReq::cards_size() const {
  return cards_.size();
}
void TakeoutCardReq::clear_cards() {
  cards_.Clear();
}
 ::google::protobuf::int32 TakeoutCardReq::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardReq.cards)
  return cards_.Get(index);
}
 void TakeoutCardReq::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardReq.cards)
}
 void TakeoutCardReq::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.TakeoutCardReq.cards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TakeoutCardReq::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.TakeoutCardReq.cards)
  return cards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TakeoutCardReq::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.TakeoutCardReq.cards)
  return &cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeoutCardAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeoutCardAck::TakeoutCardAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TakeoutCardAck)
}

void TakeoutCardAck::InitAsDefaultInstance() {
}

TakeoutCardAck::TakeoutCardAck(const TakeoutCardAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TakeoutCardAck)
}

void TakeoutCardAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeoutCardAck::~TakeoutCardAck() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TakeoutCardAck)
  SharedDtor();
}

void TakeoutCardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeoutCardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeoutCardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeoutCardAck_descriptor_;
}

const TakeoutCardAck& TakeoutCardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TakeoutCardAck* TakeoutCardAck::default_instance_ = NULL;

TakeoutCardAck* TakeoutCardAck::New(::google::protobuf::Arena* arena) const {
  TakeoutCardAck* n = new TakeoutCardAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeoutCardAck::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TakeoutCardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TakeoutCardAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TakeoutCardAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TakeoutCardAck)
  return false;
#undef DO_
}

void TakeoutCardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TakeoutCardAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TakeoutCardAck)
}

::google::protobuf::uint8* TakeoutCardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TakeoutCardAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TakeoutCardAck)
  return target;
}

int TakeoutCardAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeoutCardAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TakeoutCardAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeoutCardAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeoutCardAck::MergeFrom(const TakeoutCardAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TakeoutCardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeoutCardAck::CopyFrom(const TakeoutCardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeoutCardAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TakeoutCardAck::Swap(TakeoutCardAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeoutCardAck::InternalSwap(TakeoutCardAck* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeoutCardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeoutCardAck_descriptor_;
  metadata.reflection = TakeoutCardAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeoutCardAck

// required int32 result = 1;
bool TakeoutCardAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TakeoutCardAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TakeoutCardAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TakeoutCardAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 TakeoutCardAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardAck.result)
  return result_;
}
 void TakeoutCardAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustReq::kRevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustReq::TrustReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TrustReq)
}

void TrustReq::InitAsDefaultInstance() {
}

TrustReq::TrustReq(const TrustReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TrustReq)
}

void TrustReq::SharedCtor() {
  _cached_size_ = 0;
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustReq::~TrustReq() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TrustReq)
  SharedDtor();
}

void TrustReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrustReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustReq_descriptor_;
}

const TrustReq& TrustReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TrustReq* TrustReq::default_instance_ = NULL;

TrustReq* TrustReq::New(::google::protobuf::Arena* arena) const {
  TrustReq* n = new TrustReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrustReq::Clear() {
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrustReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TrustReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rev = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rev_)));
          set_has_rev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TrustReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TrustReq)
  return false;
#undef DO_
}

void TrustReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TrustReq)
  // required int32 rev = 1;
  if (has_rev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TrustReq)
}

::google::protobuf::uint8* TrustReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TrustReq)
  // required int32 rev = 1;
  if (has_rev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TrustReq)
  return target;
}

int TrustReq::ByteSize() const {
  int total_size = 0;

  // required int32 rev = 1;
  if (has_rev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rev());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrustReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrustReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustReq::MergeFrom(const TrustReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rev()) {
      set_rev(from.rev());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrustReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustReq::CopyFrom(const TrustReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrustReq::Swap(TrustReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustReq::InternalSwap(TrustReq* other) {
  std::swap(rev_, other->rev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrustReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustReq_descriptor_;
  metadata.reflection = TrustReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrustReq

// required int32 rev = 1;
bool TrustReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrustReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
void TrustReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrustReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
 ::google::protobuf::int32 TrustReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustReq.rev)
  return rev_;
}
 void TrustReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustReq.rev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustAck::kResultFieldNumber;
const int TrustAck::kSurplusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustAck::TrustAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TrustAck)
}

void TrustAck::InitAsDefaultInstance() {
}

TrustAck::TrustAck(const TrustAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TrustAck)
}

void TrustAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  surplus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustAck::~TrustAck() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TrustAck)
  SharedDtor();
}

void TrustAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrustAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustAck_descriptor_;
}

const TrustAck& TrustAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TrustAck* TrustAck::default_instance_ = NULL;

TrustAck* TrustAck::New(::google::protobuf::Arena* arena) const {
  TrustAck* n = new TrustAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrustAck::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrustAck*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, surplus_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrustAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TrustAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_surplus;
        break;
      }

      // optional int32 surplus = 2;
      case 2: {
        if (tag == 16) {
         parse_surplus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surplus_)));
          set_has_surplus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TrustAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TrustAck)
  return false;
#undef DO_
}

void TrustAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TrustAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 surplus = 2;
  if (has_surplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->surplus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TrustAck)
}

::google::protobuf::uint8* TrustAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TrustAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 surplus = 2;
  if (has_surplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->surplus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TrustAck)
  return target;
}

int TrustAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional int32 surplus = 2;
  if (has_surplus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->surplus());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrustAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrustAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustAck::MergeFrom(const TrustAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_surplus()) {
      set_surplus(from.surplus());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrustAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustAck::CopyFrom(const TrustAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrustAck::Swap(TrustAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustAck::InternalSwap(TrustAck* other) {
  std::swap(result_, other->result_);
  std::swap(surplus_, other->surplus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrustAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustAck_descriptor_;
  metadata.reflection = TrustAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrustAck

// required int32 result = 1;
bool TrustAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrustAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TrustAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrustAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 TrustAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustAck.result)
  return result_;
}
 void TrustAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustAck.result)
}

// optional int32 surplus = 2;
bool TrustAck::has_surplus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrustAck::set_has_surplus() {
  _has_bits_[0] |= 0x00000002u;
}
void TrustAck::clear_has_surplus() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrustAck::clear_surplus() {
  surplus_ = 0;
  clear_has_surplus();
}
 ::google::protobuf::int32 TrustAck::surplus() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustAck.surplus)
  return surplus_;
}
 void TrustAck::set_surplus(::google::protobuf::int32 value) {
  set_has_surplus();
  surplus_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustAck.surplus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustLiftReq::kRevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustLiftReq::TrustLiftReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TrustLiftReq)
}

void TrustLiftReq::InitAsDefaultInstance() {
}

TrustLiftReq::TrustLiftReq(const TrustLiftReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TrustLiftReq)
}

void TrustLiftReq::SharedCtor() {
  _cached_size_ = 0;
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustLiftReq::~TrustLiftReq() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TrustLiftReq)
  SharedDtor();
}

void TrustLiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrustLiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustLiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustLiftReq_descriptor_;
}

const TrustLiftReq& TrustLiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TrustLiftReq* TrustLiftReq::default_instance_ = NULL;

TrustLiftReq* TrustLiftReq::New(::google::protobuf::Arena* arena) const {
  TrustLiftReq* n = new TrustLiftReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrustLiftReq::Clear() {
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrustLiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TrustLiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rev = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rev_)));
          set_has_rev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TrustLiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TrustLiftReq)
  return false;
#undef DO_
}

void TrustLiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TrustLiftReq)
  // required int32 rev = 1;
  if (has_rev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TrustLiftReq)
}

::google::protobuf::uint8* TrustLiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TrustLiftReq)
  // required int32 rev = 1;
  if (has_rev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TrustLiftReq)
  return target;
}

int TrustLiftReq::ByteSize() const {
  int total_size = 0;

  // required int32 rev = 1;
  if (has_rev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rev());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustLiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrustLiftReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrustLiftReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustLiftReq::MergeFrom(const TrustLiftReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rev()) {
      set_rev(from.rev());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrustLiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustLiftReq::CopyFrom(const TrustLiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustLiftReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrustLiftReq::Swap(TrustLiftReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustLiftReq::InternalSwap(TrustLiftReq* other) {
  std::swap(rev_, other->rev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrustLiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustLiftReq_descriptor_;
  metadata.reflection = TrustLiftReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrustLiftReq

// required int32 rev = 1;
bool TrustLiftReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrustLiftReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
void TrustLiftReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrustLiftReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
 ::google::protobuf::int32 TrustLiftReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustLiftReq.rev)
  return rev_;
}
 void TrustLiftReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustLiftReq.rev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustLiftAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustLiftAck::TrustLiftAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TrustLiftAck)
}

void TrustLiftAck::InitAsDefaultInstance() {
}

TrustLiftAck::TrustLiftAck(const TrustLiftAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TrustLiftAck)
}

void TrustLiftAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustLiftAck::~TrustLiftAck() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TrustLiftAck)
  SharedDtor();
}

void TrustLiftAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrustLiftAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustLiftAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustLiftAck_descriptor_;
}

const TrustLiftAck& TrustLiftAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TrustLiftAck* TrustLiftAck::default_instance_ = NULL;

TrustLiftAck* TrustLiftAck::New(::google::protobuf::Arena* arena) const {
  TrustLiftAck* n = new TrustLiftAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrustLiftAck::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrustLiftAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TrustLiftAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TrustLiftAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TrustLiftAck)
  return false;
#undef DO_
}

void TrustLiftAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TrustLiftAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TrustLiftAck)
}

::google::protobuf::uint8* TrustLiftAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TrustLiftAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TrustLiftAck)
  return target;
}

int TrustLiftAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustLiftAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrustLiftAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrustLiftAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustLiftAck::MergeFrom(const TrustLiftAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrustLiftAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustLiftAck::CopyFrom(const TrustLiftAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustLiftAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrustLiftAck::Swap(TrustLiftAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustLiftAck::InternalSwap(TrustLiftAck* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrustLiftAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustLiftAck_descriptor_;
  metadata.reflection = TrustLiftAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrustLiftAck

// required int32 result = 1;
bool TrustLiftAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrustLiftAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TrustLiftAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrustLiftAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 TrustLiftAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustLiftAck.result)
  return result_;
}
 void TrustLiftAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustLiftAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepPlayingReq::kRevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepPlayingReq::KeepPlayingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.KeepPlayingReq)
}

void KeepPlayingReq::InitAsDefaultInstance() {
}

KeepPlayingReq::KeepPlayingReq(const KeepPlayingReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.KeepPlayingReq)
}

void KeepPlayingReq::SharedCtor() {
  _cached_size_ = 0;
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepPlayingReq::~KeepPlayingReq() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.KeepPlayingReq)
  SharedDtor();
}

void KeepPlayingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepPlayingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepPlayingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepPlayingReq_descriptor_;
}

const KeepPlayingReq& KeepPlayingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

KeepPlayingReq* KeepPlayingReq::default_instance_ = NULL;

KeepPlayingReq* KeepPlayingReq::New(::google::protobuf::Arena* arena) const {
  KeepPlayingReq* n = new KeepPlayingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepPlayingReq::Clear() {
  rev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeepPlayingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.KeepPlayingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rev = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rev_)));
          set_has_rev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.KeepPlayingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.KeepPlayingReq)
  return false;
#undef DO_
}

void KeepPlayingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.KeepPlayingReq)
  // required int32 rev = 1;
  if (has_rev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.KeepPlayingReq)
}

::google::protobuf::uint8* KeepPlayingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.KeepPlayingReq)
  // required int32 rev = 1;
  if (has_rev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.KeepPlayingReq)
  return target;
}

int KeepPlayingReq::ByteSize() const {
  int total_size = 0;

  // required int32 rev = 1;
  if (has_rev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rev());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepPlayingReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeepPlayingReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepPlayingReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepPlayingReq::MergeFrom(const KeepPlayingReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rev()) {
      set_rev(from.rev());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeepPlayingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepPlayingReq::CopyFrom(const KeepPlayingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepPlayingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeepPlayingReq::Swap(KeepPlayingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepPlayingReq::InternalSwap(KeepPlayingReq* other) {
  std::swap(rev_, other->rev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepPlayingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepPlayingReq_descriptor_;
  metadata.reflection = KeepPlayingReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepPlayingReq

// required int32 rev = 1;
bool KeepPlayingReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepPlayingReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepPlayingReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepPlayingReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
 ::google::protobuf::int32 KeepPlayingReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingReq.rev)
  return rev_;
}
 void KeepPlayingReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingReq.rev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepPlayingAck_GameInfo::kStatusFieldNumber;
const int KeepPlayingAck_GameInfo::kSeatlordFieldNumber;
const int KeepPlayingAck_GameInfo::kSeatactiveFieldNumber;
const int KeepPlayingAck_GameInfo::kMultipleFieldNumber;
const int KeepPlayingAck_GameInfo::kMaxcallscoreFieldNumber;
const int KeepPlayingAck_GameInfo::kBasecardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepPlayingAck_GameInfo::KeepPlayingAck_GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.KeepPlayingAck.GameInfo)
}

void KeepPlayingAck_GameInfo::InitAsDefaultInstance() {
}

KeepPlayingAck_GameInfo::KeepPlayingAck_GameInfo(const KeepPlayingAck_GameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.KeepPlayingAck.GameInfo)
}

void KeepPlayingAck_GameInfo::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  seatlord_ = 0;
  seatactive_ = 0;
  multiple_ = 0;
  maxcallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepPlayingAck_GameInfo::~KeepPlayingAck_GameInfo() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.KeepPlayingAck.GameInfo)
  SharedDtor();
}

void KeepPlayingAck_GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepPlayingAck_GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepPlayingAck_GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepPlayingAck_GameInfo_descriptor_;
}

const KeepPlayingAck_GameInfo& KeepPlayingAck_GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

KeepPlayingAck_GameInfo* KeepPlayingAck_GameInfo::default_instance_ = NULL;

KeepPlayingAck_GameInfo* KeepPlayingAck_GameInfo::New(::google::protobuf::Arena* arena) const {
  KeepPlayingAck_GameInfo* n = new KeepPlayingAck_GameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepPlayingAck_GameInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KeepPlayingAck_GameInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(status_, multiple_);
    maxcallscore_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  basecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeepPlayingAck_GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.KeepPlayingAck.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatlord;
        break;
      }

      // required int32 seatlord = 2;
      case 2: {
        if (tag == 16) {
         parse_seatlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatlord_)));
          set_has_seatlord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatactive;
        break;
      }

      // required int32 seatactive = 3;
      case 3: {
        if (tag == 24) {
         parse_seatactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatactive_)));
          set_has_seatactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_multiple;
        break;
      }

      // required int32 multiple = 4;
      case 4: {
        if (tag == 32) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxcallscore;
        break;
      }

      // required int32 maxcallscore = 5;
      case 5: {
        if (tag == 40) {
         parse_maxcallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcallscore_)));
          set_has_maxcallscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_basecards;
        break;
      }

      // repeated int32 basecards = 6;
      case 6: {
        if (tag == 48) {
         parse_basecards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_basecards())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_basecards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_basecards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.KeepPlayingAck.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.KeepPlayingAck.GameInfo)
  return false;
#undef DO_
}

void KeepPlayingAck_GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.KeepPlayingAck.GameInfo)
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required int32 seatlord = 2;
  if (has_seatlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatlord(), output);
  }

  // required int32 seatactive = 3;
  if (has_seatactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatactive(), output);
  }

  // required int32 multiple = 4;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->multiple(), output);
  }

  // required int32 maxcallscore = 5;
  if (has_maxcallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxcallscore(), output);
  }

  // repeated int32 basecards = 6;
  for (int i = 0; i < this->basecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->basecards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.KeepPlayingAck.GameInfo)
}

::google::protobuf::uint8* KeepPlayingAck_GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.KeepPlayingAck.GameInfo)
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required int32 seatlord = 2;
  if (has_seatlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatlord(), target);
  }

  // required int32 seatactive = 3;
  if (has_seatactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatactive(), target);
  }

  // required int32 multiple = 4;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->multiple(), target);
  }

  // required int32 maxcallscore = 5;
  if (has_maxcallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxcallscore(), target);
  }

  // repeated int32 basecards = 6;
  for (int i = 0; i < this->basecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->basecards(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.KeepPlayingAck.GameInfo)
  return target;
}

int KeepPlayingAck_GameInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_status()) {
    // required int32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_seatlord()) {
    // required int32 seatlord = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatlord());
  }

  if (has_seatactive()) {
    // required int32 seatactive = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatactive());
  }

  if (has_multiple()) {
    // required int32 multiple = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  if (has_maxcallscore()) {
    // required int32 maxcallscore = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxcallscore());
  }

  return total_size;
}
int KeepPlayingAck_GameInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required int32 seatlord = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatlord());

    // required int32 seatactive = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatactive());

    // required int32 multiple = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());

    // required int32 maxcallscore = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxcallscore());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 basecards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->basecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->basecards(i));
    }
    total_size += 1 * this->basecards_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepPlayingAck_GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeepPlayingAck_GameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepPlayingAck_GameInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepPlayingAck_GameInfo::MergeFrom(const KeepPlayingAck_GameInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  basecards_.MergeFrom(from.basecards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_seatlord()) {
      set_seatlord(from.seatlord());
    }
    if (from.has_seatactive()) {
      set_seatactive(from.seatactive());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_maxcallscore()) {
      set_maxcallscore(from.maxcallscore());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeepPlayingAck_GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepPlayingAck_GameInfo::CopyFrom(const KeepPlayingAck_GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepPlayingAck_GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void KeepPlayingAck_GameInfo::Swap(KeepPlayingAck_GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepPlayingAck_GameInfo::InternalSwap(KeepPlayingAck_GameInfo* other) {
  std::swap(status_, other->status_);
  std::swap(seatlord_, other->seatlord_);
  std::swap(seatactive_, other->seatactive_);
  std::swap(multiple_, other->multiple_);
  std::swap(maxcallscore_, other->maxcallscore_);
  basecards_.UnsafeArenaSwap(&other->basecards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepPlayingAck_GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepPlayingAck_GameInfo_descriptor_;
  metadata.reflection = KeepPlayingAck_GameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepPlayingAck_PlayerInfo::kTrustFieldNumber;
const int KeepPlayingAck_PlayerInfo::kTrustsurplusFieldNumber;
const int KeepPlayingAck_PlayerInfo::kCallscoreFieldNumber;
const int KeepPlayingAck_PlayerInfo::kCardsFieldNumber;
const int KeepPlayingAck_PlayerInfo::kLastcardsFieldNumber;
const int KeepPlayingAck_PlayerInfo::kDetailinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepPlayingAck_PlayerInfo::KeepPlayingAck_PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.KeepPlayingAck.PlayerInfo)
}

void KeepPlayingAck_PlayerInfo::InitAsDefaultInstance() {
  detailinfo_ = const_cast< ::PBGameDDZ::UserInfo*>(&::PBGameDDZ::UserInfo::default_instance());
}

KeepPlayingAck_PlayerInfo::KeepPlayingAck_PlayerInfo(const KeepPlayingAck_PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.KeepPlayingAck.PlayerInfo)
}

void KeepPlayingAck_PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  trust_ = false;
  trustsurplus_ = 0;
  callscore_ = 0;
  detailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepPlayingAck_PlayerInfo::~KeepPlayingAck_PlayerInfo() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.KeepPlayingAck.PlayerInfo)
  SharedDtor();
}

void KeepPlayingAck_PlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete detailinfo_;
  }
}

void KeepPlayingAck_PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepPlayingAck_PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepPlayingAck_PlayerInfo_descriptor_;
}

const KeepPlayingAck_PlayerInfo& KeepPlayingAck_PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

KeepPlayingAck_PlayerInfo* KeepPlayingAck_PlayerInfo::default_instance_ = NULL;

KeepPlayingAck_PlayerInfo* KeepPlayingAck_PlayerInfo::New(::google::protobuf::Arena* arena) const {
  KeepPlayingAck_PlayerInfo* n = new KeepPlayingAck_PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepPlayingAck_PlayerInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KeepPlayingAck_PlayerInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 39u) {
    ZR_(trust_, trustsurplus_);
    callscore_ = 0;
    if (has_detailinfo()) {
      if (detailinfo_ != NULL) detailinfo_->::PBGameDDZ::UserInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  cards_.Clear();
  lastcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeepPlayingAck_PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.KeepPlayingAck.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool trust = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trust_)));
          set_has_trust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trustsurplus;
        break;
      }

      // required int32 trustsurplus = 2;
      case 2: {
        if (tag == 16) {
         parse_trustsurplus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trustsurplus_)));
          set_has_trustsurplus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_callscore;
        break;
      }

      // required int32 callscore = 3;
      case 3: {
        if (tag == 24) {
         parse_callscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callscore_)));
          set_has_callscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 4;
      case 4: {
        if (tag == 32) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        if (input->ExpectTag(40)) goto parse_lastcards;
        break;
      }

      // repeated int32 lastcards = 5;
      case 5: {
        if (tag == 40) {
         parse_lastcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_lastcards())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lastcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastcards;
        if (input->ExpectTag(50)) goto parse_detailinfo;
        break;
      }

      // required .PBGameDDZ.UserInfo detailinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_detailinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.KeepPlayingAck.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.KeepPlayingAck.PlayerInfo)
  return false;
#undef DO_
}

void KeepPlayingAck_PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.KeepPlayingAck.PlayerInfo)
  // required bool trust = 1;
  if (has_trust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->trust(), output);
  }

  // required int32 trustsurplus = 2;
  if (has_trustsurplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trustsurplus(), output);
  }

  // required int32 callscore = 3;
  if (has_callscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->callscore(), output);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards(i), output);
  }

  // repeated int32 lastcards = 5;
  for (int i = 0; i < this->lastcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->lastcards(i), output);
  }

  // required .PBGameDDZ.UserInfo detailinfo = 6;
  if (has_detailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->detailinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.KeepPlayingAck.PlayerInfo)
}

::google::protobuf::uint8* KeepPlayingAck_PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.KeepPlayingAck.PlayerInfo)
  // required bool trust = 1;
  if (has_trust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->trust(), target);
  }

  // required int32 trustsurplus = 2;
  if (has_trustsurplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trustsurplus(), target);
  }

  // required int32 callscore = 3;
  if (has_callscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->callscore(), target);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards(i), target);
  }

  // repeated int32 lastcards = 5;
  for (int i = 0; i < this->lastcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->lastcards(i), target);
  }

  // required .PBGameDDZ.UserInfo detailinfo = 6;
  if (has_detailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->detailinfo_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.KeepPlayingAck.PlayerInfo)
  return target;
}

int KeepPlayingAck_PlayerInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_trust()) {
    // required bool trust = 1;
    total_size += 1 + 1;
  }

  if (has_trustsurplus()) {
    // required int32 trustsurplus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trustsurplus());
  }

  if (has_callscore()) {
    // required int32 callscore = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());
  }

  if (has_detailinfo()) {
    // required .PBGameDDZ.UserInfo detailinfo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->detailinfo_);
  }

  return total_size;
}
int KeepPlayingAck_PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required bool trust = 1;
    total_size += 1 + 1;

    // required int32 trustsurplus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trustsurplus());

    // required int32 callscore = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());

    // required .PBGameDDZ.UserInfo detailinfo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->detailinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated int32 lastcards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->lastcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lastcards(i));
    }
    total_size += 1 * this->lastcards_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepPlayingAck_PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeepPlayingAck_PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepPlayingAck_PlayerInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepPlayingAck_PlayerInfo::MergeFrom(const KeepPlayingAck_PlayerInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
  lastcards_.MergeFrom(from.lastcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trust()) {
      set_trust(from.trust());
    }
    if (from.has_trustsurplus()) {
      set_trustsurplus(from.trustsurplus());
    }
    if (from.has_callscore()) {
      set_callscore(from.callscore());
    }
    if (from.has_detailinfo()) {
      mutable_detailinfo()->::PBGameDDZ::UserInfo::MergeFrom(from.detailinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeepPlayingAck_PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepPlayingAck_PlayerInfo::CopyFrom(const KeepPlayingAck_PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepPlayingAck_PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (has_detailinfo()) {
    if (!this->detailinfo_->IsInitialized()) return false;
  }
  return true;
}

void KeepPlayingAck_PlayerInfo::Swap(KeepPlayingAck_PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepPlayingAck_PlayerInfo::InternalSwap(KeepPlayingAck_PlayerInfo* other) {
  std::swap(trust_, other->trust_);
  std::swap(trustsurplus_, other->trustsurplus_);
  std::swap(callscore_, other->callscore_);
  cards_.UnsafeArenaSwap(&other->cards_);
  lastcards_.UnsafeArenaSwap(&other->lastcards_);
  std::swap(detailinfo_, other->detailinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepPlayingAck_PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepPlayingAck_PlayerInfo_descriptor_;
  metadata.reflection = KeepPlayingAck_PlayerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepPlayingAck::kResultFieldNumber;
const int KeepPlayingAck::kGameinfoFieldNumber;
const int KeepPlayingAck::kPlayerinfoFieldNumber;
const int KeepPlayingAck::kReadyFieldNumber;
const int KeepPlayingAck::kCallscoreFieldNumber;
const int KeepPlayingAck::kTakeoutFieldNumber;
const int KeepPlayingAck::kSettleFieldNumber;
const int KeepPlayingAck::kGameChannelFieldNumber;
const int KeepPlayingAck::kBasicScoreFieldNumber;
const int KeepPlayingAck::kMatchInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepPlayingAck::KeepPlayingAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.KeepPlayingAck)
}

void KeepPlayingAck::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::PBGameDDZ::KeepPlayingAck_GameInfo*>(&::PBGameDDZ::KeepPlayingAck_GameInfo::default_instance());
  matchinfo_ = const_cast< ::PBGameDDZ::MatchInfo*>(&::PBGameDDZ::MatchInfo::default_instance());
}

KeepPlayingAck::KeepPlayingAck(const KeepPlayingAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.KeepPlayingAck)
}

void KeepPlayingAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  gameinfo_ = NULL;
  ready_ = 0;
  callscore_ = 0;
  takeout_ = 0;
  settle_ = 0;
  gamechannel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basicscore_ = 0;
  matchinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepPlayingAck::~KeepPlayingAck() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.KeepPlayingAck)
  SharedDtor();
}

void KeepPlayingAck::SharedDtor() {
  gamechannel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete gameinfo_;
    delete matchinfo_;
  }
}

void KeepPlayingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepPlayingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepPlayingAck_descriptor_;
}

const KeepPlayingAck& KeepPlayingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

KeepPlayingAck* KeepPlayingAck::default_instance_ = NULL;

KeepPlayingAck* KeepPlayingAck::New(::google::protobuf::Arena* arena) const {
  KeepPlayingAck* n = new KeepPlayingAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepPlayingAck::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KeepPlayingAck*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(result_, ready_);
    ZR_(callscore_, takeout_);
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::PBGameDDZ::KeepPlayingAck_GameInfo::Clear();
    }
    settle_ = 0;
    if (has_gamechannel()) {
      gamechannel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    basicscore_ = 0;
    if (has_matchinfo()) {
      if (matchinfo_ != NULL) matchinfo_->::PBGameDDZ::MatchInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeepPlayingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.KeepPlayingAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gameinfo;
        break;
      }

      // required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_gameinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerinfo;
        break;
      }

      // repeated .PBGameDDZ.KeepPlayingAck.PlayerInfo playerinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_playerinfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_playerinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_playerinfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_ready;
        break;
      }

      // required int32 ready = 4;
      case 4: {
        if (tag == 32) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_callscore;
        break;
      }

      // required int32 callscore = 5;
      case 5: {
        if (tag == 40) {
         parse_callscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callscore_)));
          set_has_callscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_takeout;
        break;
      }

      // required int32 takeout = 6;
      case 6: {
        if (tag == 48) {
         parse_takeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &takeout_)));
          set_has_takeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_settle;
        break;
      }

      // required int32 settle = 7;
      case 7: {
        if (tag == 56) {
         parse_settle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settle_)));
          set_has_settle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gameChannel;
        break;
      }

      // required string gameChannel = 8;
      case 8: {
        if (tag == 66) {
         parse_gameChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamechannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamechannel().data(), this->gamechannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PBGameDDZ.KeepPlayingAck.gameChannel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_basicScore;
        break;
      }

      // required int32 basicScore = 9;
      case 9: {
        if (tag == 72) {
         parse_basicScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basicscore_)));
          set_has_basicscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_matchInfo;
        break;
      }

      // optional .PBGameDDZ.MatchInfo matchInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_matchInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.KeepPlayingAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.KeepPlayingAck)
  return false;
#undef DO_
}

void KeepPlayingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.KeepPlayingAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gameinfo_, output);
  }

  // repeated .PBGameDDZ.KeepPlayingAck.PlayerInfo playerinfo = 3;
  for (unsigned int i = 0, n = this->playerinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerinfo(i), output);
  }

  // required int32 ready = 4;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ready(), output);
  }

  // required int32 callscore = 5;
  if (has_callscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->callscore(), output);
  }

  // required int32 takeout = 6;
  if (has_takeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->takeout(), output);
  }

  // required int32 settle = 7;
  if (has_settle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->settle(), output);
  }

  // required string gameChannel = 8;
  if (has_gamechannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamechannel().data(), this->gamechannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.KeepPlayingAck.gameChannel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->gamechannel(), output);
  }

  // required int32 basicScore = 9;
  if (has_basicscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->basicscore(), output);
  }

  // optional .PBGameDDZ.MatchInfo matchInfo = 10;
  if (has_matchinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->matchinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.KeepPlayingAck)
}

::google::protobuf::uint8* KeepPlayingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.KeepPlayingAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->gameinfo_, target);
  }

  // repeated .PBGameDDZ.KeepPlayingAck.PlayerInfo playerinfo = 3;
  for (unsigned int i = 0, n = this->playerinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerinfo(i), target);
  }

  // required int32 ready = 4;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ready(), target);
  }

  // required int32 callscore = 5;
  if (has_callscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->callscore(), target);
  }

  // required int32 takeout = 6;
  if (has_takeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->takeout(), target);
  }

  // required int32 settle = 7;
  if (has_settle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->settle(), target);
  }

  // required string gameChannel = 8;
  if (has_gamechannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamechannel().data(), this->gamechannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.KeepPlayingAck.gameChannel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gamechannel(), target);
  }

  // required int32 basicScore = 9;
  if (has_basicscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->basicscore(), target);
  }

  // optional .PBGameDDZ.MatchInfo matchInfo = 10;
  if (has_matchinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->matchinfo_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.KeepPlayingAck)
  return target;
}

int KeepPlayingAck::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_result()) {
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  if (has_gameinfo()) {
    // required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinfo_);
  }

  if (has_ready()) {
    // required int32 ready = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ready());
  }

  if (has_callscore()) {
    // required int32 callscore = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());
  }

  if (has_takeout()) {
    // required int32 takeout = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->takeout());
  }

  if (has_settle()) {
    // required int32 settle = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settle());
  }

  if (has_gamechannel()) {
    // required string gameChannel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamechannel());
  }

  if (has_basicscore()) {
    // required int32 basicScore = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->basicscore());
  }

  return total_size;
}
int KeepPlayingAck::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001fb) ^ 0x000001fb) == 0) {  // All required fields are present.
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

    // required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinfo_);

    // required int32 ready = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ready());

    // required int32 callscore = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());

    // required int32 takeout = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->takeout());

    // required int32 settle = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settle());

    // required string gameChannel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamechannel());

    // required int32 basicScore = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->basicscore());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .PBGameDDZ.MatchInfo matchInfo = 10;
  if (has_matchinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matchinfo_);
  }

  // repeated .PBGameDDZ.KeepPlayingAck.PlayerInfo playerinfo = 3;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepPlayingAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeepPlayingAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepPlayingAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepPlayingAck::MergeFrom(const KeepPlayingAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::PBGameDDZ::KeepPlayingAck_GameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_callscore()) {
      set_callscore(from.callscore());
    }
    if (from.has_takeout()) {
      set_takeout(from.takeout());
    }
    if (from.has_settle()) {
      set_settle(from.settle());
    }
    if (from.has_gamechannel()) {
      set_has_gamechannel();
      gamechannel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamechannel_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_basicscore()) {
      set_basicscore(from.basicscore());
    }
    if (from.has_matchinfo()) {
      mutable_matchinfo()->::PBGameDDZ::MatchInfo::MergeFrom(from.matchinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeepPlayingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepPlayingAck::CopyFrom(const KeepPlayingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepPlayingAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fb) != 0x000001fb) return false;

  if (has_gameinfo()) {
    if (!this->gameinfo_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->playerinfo())) return false;
  if (has_matchinfo()) {
    if (!this->matchinfo_->IsInitialized()) return false;
  }
  return true;
}

void KeepPlayingAck::Swap(KeepPlayingAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepPlayingAck::InternalSwap(KeepPlayingAck* other) {
  std::swap(result_, other->result_);
  std::swap(gameinfo_, other->gameinfo_);
  playerinfo_.UnsafeArenaSwap(&other->playerinfo_);
  std::swap(ready_, other->ready_);
  std::swap(callscore_, other->callscore_);
  std::swap(takeout_, other->takeout_);
  std::swap(settle_, other->settle_);
  gamechannel_.Swap(&other->gamechannel_);
  std::swap(basicscore_, other->basicscore_);
  std::swap(matchinfo_, other->matchinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepPlayingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepPlayingAck_descriptor_;
  metadata.reflection = KeepPlayingAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepPlayingAck_GameInfo

// required int32 status = 1;
bool KeepPlayingAck_GameInfo::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepPlayingAck_GameInfo::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepPlayingAck_GameInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepPlayingAck_GameInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 KeepPlayingAck_GameInfo::status() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.status)
  return status_;
}
 void KeepPlayingAck_GameInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.status)
}

// required int32 seatlord = 2;
bool KeepPlayingAck_GameInfo::has_seatlord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepPlayingAck_GameInfo::set_has_seatlord() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepPlayingAck_GameInfo::clear_has_seatlord() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepPlayingAck_GameInfo::clear_seatlord() {
  seatlord_ = 0;
  clear_has_seatlord();
}
 ::google::protobuf::int32 KeepPlayingAck_GameInfo::seatlord() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.seatlord)
  return seatlord_;
}
 void KeepPlayingAck_GameInfo::set_seatlord(::google::protobuf::int32 value) {
  set_has_seatlord();
  seatlord_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.seatlord)
}

// required int32 seatactive = 3;
bool KeepPlayingAck_GameInfo::has_seatactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeepPlayingAck_GameInfo::set_has_seatactive() {
  _has_bits_[0] |= 0x00000004u;
}
void KeepPlayingAck_GameInfo::clear_has_seatactive() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeepPlayingAck_GameInfo::clear_seatactive() {
  seatactive_ = 0;
  clear_has_seatactive();
}
 ::google::protobuf::int32 KeepPlayingAck_GameInfo::seatactive() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.seatactive)
  return seatactive_;
}
 void KeepPlayingAck_GameInfo::set_seatactive(::google::protobuf::int32 value) {
  set_has_seatactive();
  seatactive_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.seatactive)
}

// required int32 multiple = 4;
bool KeepPlayingAck_GameInfo::has_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeepPlayingAck_GameInfo::set_has_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
void KeepPlayingAck_GameInfo::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeepPlayingAck_GameInfo::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
 ::google::protobuf::int32 KeepPlayingAck_GameInfo::multiple() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.multiple)
  return multiple_;
}
 void KeepPlayingAck_GameInfo::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.multiple)
}

// required int32 maxcallscore = 5;
bool KeepPlayingAck_GameInfo::has_maxcallscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KeepPlayingAck_GameInfo::set_has_maxcallscore() {
  _has_bits_[0] |= 0x00000010u;
}
void KeepPlayingAck_GameInfo::clear_has_maxcallscore() {
  _has_bits_[0] &= ~0x00000010u;
}
void KeepPlayingAck_GameInfo::clear_maxcallscore() {
  maxcallscore_ = 0;
  clear_has_maxcallscore();
}
 ::google::protobuf::int32 KeepPlayingAck_GameInfo::maxcallscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.maxcallscore)
  return maxcallscore_;
}
 void KeepPlayingAck_GameInfo::set_maxcallscore(::google::protobuf::int32 value) {
  set_has_maxcallscore();
  maxcallscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.maxcallscore)
}

// repeated int32 basecards = 6;
int KeepPlayingAck_GameInfo::basecards_size() const {
  return basecards_.size();
}
void KeepPlayingAck_GameInfo::clear_basecards() {
  basecards_.Clear();
}
 ::google::protobuf::int32 KeepPlayingAck_GameInfo::basecards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
  return basecards_.Get(index);
}
 void KeepPlayingAck_GameInfo::set_basecards(int index, ::google::protobuf::int32 value) {
  basecards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
}
 void KeepPlayingAck_GameInfo::add_basecards(::google::protobuf::int32 value) {
  basecards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeepPlayingAck_GameInfo::basecards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
  return basecards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeepPlayingAck_GameInfo::mutable_basecards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
  return &basecards_;
}

// -------------------------------------------------------------------

// KeepPlayingAck_PlayerInfo

// required bool trust = 1;
bool KeepPlayingAck_PlayerInfo::has_trust() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepPlayingAck_PlayerInfo::set_has_trust() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepPlayingAck_PlayerInfo::clear_has_trust() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepPlayingAck_PlayerInfo::clear_trust() {
  trust_ = false;
  clear_has_trust();
}
 bool KeepPlayingAck_PlayerInfo::trust() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.trust)
  return trust_;
}
 void KeepPlayingAck_PlayerInfo::set_trust(bool value) {
  set_has_trust();
  trust_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.trust)
}

// required int32 trustsurplus = 2;
bool KeepPlayingAck_PlayerInfo::has_trustsurplus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepPlayingAck_PlayerInfo::set_has_trustsurplus() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepPlayingAck_PlayerInfo::clear_has_trustsurplus() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepPlayingAck_PlayerInfo::clear_trustsurplus() {
  trustsurplus_ = 0;
  clear_has_trustsurplus();
}
 ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::trustsurplus() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.trustsurplus)
  return trustsurplus_;
}
 void KeepPlayingAck_PlayerInfo::set_trustsurplus(::google::protobuf::int32 value) {
  set_has_trustsurplus();
  trustsurplus_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.trustsurplus)
}

// required int32 callscore = 3;
bool KeepPlayingAck_PlayerInfo::has_callscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeepPlayingAck_PlayerInfo::set_has_callscore() {
  _has_bits_[0] |= 0x00000004u;
}
void KeepPlayingAck_PlayerInfo::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeepPlayingAck_PlayerInfo::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
 ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.callscore)
  return callscore_;
}
 void KeepPlayingAck_PlayerInfo::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.callscore)
}

// repeated int32 cards = 4;
int KeepPlayingAck_PlayerInfo::cards_size() const {
  return cards_.size();
}
void KeepPlayingAck_PlayerInfo::clear_cards() {
  cards_.Clear();
}
 ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
  return cards_.Get(index);
}
 void KeepPlayingAck_PlayerInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
}
 void KeepPlayingAck_PlayerInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeepPlayingAck_PlayerInfo::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
  return cards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeepPlayingAck_PlayerInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
  return &cards_;
}

// repeated int32 lastcards = 5;
int KeepPlayingAck_PlayerInfo::lastcards_size() const {
  return lastcards_.size();
}
void KeepPlayingAck_PlayerInfo::clear_lastcards() {
  lastcards_.Clear();
}
 ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::lastcards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
  return lastcards_.Get(index);
}
 void KeepPlayingAck_PlayerInfo::set_lastcards(int index, ::google::protobuf::int32 value) {
  lastcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
}
 void KeepPlayingAck_PlayerInfo::add_lastcards(::google::protobuf::int32 value) {
  lastcards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeepPlayingAck_PlayerInfo::lastcards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
  return lastcards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeepPlayingAck_PlayerInfo::mutable_lastcards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
  return &lastcards_;
}

// required .PBGameDDZ.UserInfo detailinfo = 6;
bool KeepPlayingAck_PlayerInfo::has_detailinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KeepPlayingAck_PlayerInfo::set_has_detailinfo() {
  _has_bits_[0] |= 0x00000020u;
}
void KeepPlayingAck_PlayerInfo::clear_has_detailinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
void KeepPlayingAck_PlayerInfo::clear_detailinfo() {
  if (detailinfo_ != NULL) detailinfo_->::PBGameDDZ::UserInfo::Clear();
  clear_has_detailinfo();
}
const ::PBGameDDZ::UserInfo& KeepPlayingAck_PlayerInfo::detailinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.detailinfo)
  return detailinfo_ != NULL ? *detailinfo_ : *default_instance_->detailinfo_;
}
::PBGameDDZ::UserInfo* KeepPlayingAck_PlayerInfo::mutable_detailinfo() {
  set_has_detailinfo();
  if (detailinfo_ == NULL) {
    detailinfo_ = new ::PBGameDDZ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.PlayerInfo.detailinfo)
  return detailinfo_;
}
::PBGameDDZ::UserInfo* KeepPlayingAck_PlayerInfo::release_detailinfo() {
  clear_has_detailinfo();
  ::PBGameDDZ::UserInfo* temp = detailinfo_;
  detailinfo_ = NULL;
  return temp;
}
void KeepPlayingAck_PlayerInfo::set_allocated_detailinfo(::PBGameDDZ::UserInfo* detailinfo) {
  delete detailinfo_;
  detailinfo_ = detailinfo;
  if (detailinfo) {
    set_has_detailinfo();
  } else {
    clear_has_detailinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.PlayerInfo.detailinfo)
}

// -------------------------------------------------------------------

// KeepPlayingAck

// required int32 result = 1;
bool KeepPlayingAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepPlayingAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepPlayingAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepPlayingAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 KeepPlayingAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.result)
  return result_;
}
 void KeepPlayingAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.result)
}

// required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
bool KeepPlayingAck::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepPlayingAck::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepPlayingAck::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepPlayingAck::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::PBGameDDZ::KeepPlayingAck_GameInfo::Clear();
  clear_has_gameinfo();
}
const ::PBGameDDZ::KeepPlayingAck_GameInfo& KeepPlayingAck::gameinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.gameinfo)
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
}
::PBGameDDZ::KeepPlayingAck_GameInfo* KeepPlayingAck::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) {
    gameinfo_ = new ::PBGameDDZ::KeepPlayingAck_GameInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.gameinfo)
  return gameinfo_;
}
::PBGameDDZ::KeepPlayingAck_GameInfo* KeepPlayingAck::release_gameinfo() {
  clear_has_gameinfo();
  ::PBGameDDZ::KeepPlayingAck_GameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
void KeepPlayingAck::set_allocated_gameinfo(::PBGameDDZ::KeepPlayingAck_GameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.gameinfo)
}

// repeated .PBGameDDZ.KeepPlayingAck.PlayerInfo playerinfo = 3;
int KeepPlayingAck::playerinfo_size() const {
  return playerinfo_.size();
}
void KeepPlayingAck::clear_playerinfo() {
  playerinfo_.Clear();
}
const ::PBGameDDZ::KeepPlayingAck_PlayerInfo& KeepPlayingAck::playerinfo(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_.Get(index);
}
::PBGameDDZ::KeepPlayingAck_PlayerInfo* KeepPlayingAck::mutable_playerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_.Mutable(index);
}
::PBGameDDZ::KeepPlayingAck_PlayerInfo* KeepPlayingAck::add_playerinfo() {
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBGameDDZ::KeepPlayingAck_PlayerInfo >*
KeepPlayingAck::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.playerinfo)
  return &playerinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::KeepPlayingAck_PlayerInfo >&
KeepPlayingAck::playerinfo() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_;
}

// required int32 ready = 4;
bool KeepPlayingAck::has_ready() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeepPlayingAck::set_has_ready() {
  _has_bits_[0] |= 0x00000008u;
}
void KeepPlayingAck::clear_has_ready() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeepPlayingAck::clear_ready() {
  ready_ = 0;
  clear_has_ready();
}
 ::google::protobuf::int32 KeepPlayingAck::ready() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.ready)
  return ready_;
}
 void KeepPlayingAck::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.ready)
}

// required int32 callscore = 5;
bool KeepPlayingAck::has_callscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KeepPlayingAck::set_has_callscore() {
  _has_bits_[0] |= 0x00000010u;
}
void KeepPlayingAck::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000010u;
}
void KeepPlayingAck::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
 ::google::protobuf::int32 KeepPlayingAck::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.callscore)
  return callscore_;
}
 void KeepPlayingAck::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.callscore)
}

// required int32 takeout = 6;
bool KeepPlayingAck::has_takeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KeepPlayingAck::set_has_takeout() {
  _has_bits_[0] |= 0x00000020u;
}
void KeepPlayingAck::clear_has_takeout() {
  _has_bits_[0] &= ~0x00000020u;
}
void KeepPlayingAck::clear_takeout() {
  takeout_ = 0;
  clear_has_takeout();
}
 ::google::protobuf::int32 KeepPlayingAck::takeout() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.takeout)
  return takeout_;
}
 void KeepPlayingAck::set_takeout(::google::protobuf::int32 value) {
  set_has_takeout();
  takeout_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.takeout)
}

// required int32 settle = 7;
bool KeepPlayingAck::has_settle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KeepPlayingAck::set_has_settle() {
  _has_bits_[0] |= 0x00000040u;
}
void KeepPlayingAck::clear_has_settle() {
  _has_bits_[0] &= ~0x00000040u;
}
void KeepPlayingAck::clear_settle() {
  settle_ = 0;
  clear_has_settle();
}
 ::google::protobuf::int32 KeepPlayingAck::settle() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.settle)
  return settle_;
}
 void KeepPlayingAck::set_settle(::google::protobuf::int32 value) {
  set_has_settle();
  settle_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.settle)
}

// required string gameChannel = 8;
bool KeepPlayingAck::has_gamechannel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KeepPlayingAck::set_has_gamechannel() {
  _has_bits_[0] |= 0x00000080u;
}
void KeepPlayingAck::clear_has_gamechannel() {
  _has_bits_[0] &= ~0x00000080u;
}
void KeepPlayingAck::clear_gamechannel() {
  gamechannel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamechannel();
}
 const ::std::string& KeepPlayingAck::gamechannel() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.gameChannel)
  return gamechannel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepPlayingAck::set_gamechannel(const ::std::string& value) {
  set_has_gamechannel();
  gamechannel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.gameChannel)
}
 void KeepPlayingAck::set_gamechannel(const char* value) {
  set_has_gamechannel();
  gamechannel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.KeepPlayingAck.gameChannel)
}
 void KeepPlayingAck::set_gamechannel(const char* value, size_t size) {
  set_has_gamechannel();
  gamechannel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.KeepPlayingAck.gameChannel)
}
 ::std::string* KeepPlayingAck::mutable_gamechannel() {
  set_has_gamechannel();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.gameChannel)
  return gamechannel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeepPlayingAck::release_gamechannel() {
  clear_has_gamechannel();
  return gamechannel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepPlayingAck::set_allocated_gamechannel(::std::string* gamechannel) {
  if (gamechannel != NULL) {
    set_has_gamechannel();
  } else {
    clear_has_gamechannel();
  }
  gamechannel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamechannel);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.gameChannel)
}

// required int32 basicScore = 9;
bool KeepPlayingAck::has_basicscore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KeepPlayingAck::set_has_basicscore() {
  _has_bits_[0] |= 0x00000100u;
}
void KeepPlayingAck::clear_has_basicscore() {
  _has_bits_[0] &= ~0x00000100u;
}
void KeepPlayingAck::clear_basicscore() {
  basicscore_ = 0;
  clear_has_basicscore();
}
 ::google::protobuf::int32 KeepPlayingAck::basicscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.basicScore)
  return basicscore_;
}
 void KeepPlayingAck::set_basicscore(::google::protobuf::int32 value) {
  set_has_basicscore();
  basicscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.basicScore)
}

// optional .PBGameDDZ.MatchInfo matchInfo = 10;
bool KeepPlayingAck::has_matchinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void KeepPlayingAck::set_has_matchinfo() {
  _has_bits_[0] |= 0x00000200u;
}
void KeepPlayingAck::clear_has_matchinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
void KeepPlayingAck::clear_matchinfo() {
  if (matchinfo_ != NULL) matchinfo_->::PBGameDDZ::MatchInfo::Clear();
  clear_has_matchinfo();
}
const ::PBGameDDZ::MatchInfo& KeepPlayingAck::matchinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.matchInfo)
  return matchinfo_ != NULL ? *matchinfo_ : *default_instance_->matchinfo_;
}
::PBGameDDZ::MatchInfo* KeepPlayingAck::mutable_matchinfo() {
  set_has_matchinfo();
  if (matchinfo_ == NULL) {
    matchinfo_ = new ::PBGameDDZ::MatchInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.matchInfo)
  return matchinfo_;
}
::PBGameDDZ::MatchInfo* KeepPlayingAck::release_matchinfo() {
  clear_has_matchinfo();
  ::PBGameDDZ::MatchInfo* temp = matchinfo_;
  matchinfo_ = NULL;
  return temp;
}
void KeepPlayingAck::set_allocated_matchinfo(::PBGameDDZ::MatchInfo* matchinfo) {
  delete matchinfo_;
  matchinfo_ = matchinfo;
  if (matchinfo) {
    set_has_matchinfo();
  } else {
    clear_has_matchinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.matchInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStatusNtf::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStatusNtf::GameStatusNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.GameStatusNtf)
}

void GameStatusNtf::InitAsDefaultInstance() {
}

GameStatusNtf::GameStatusNtf(const GameStatusNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.GameStatusNtf)
}

void GameStatusNtf::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatusNtf::~GameStatusNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.GameStatusNtf)
  SharedDtor();
}

void GameStatusNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatusNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatusNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatusNtf_descriptor_;
}

const GameStatusNtf& GameStatusNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

GameStatusNtf* GameStatusNtf::default_instance_ = NULL;

GameStatusNtf* GameStatusNtf::New(::google::protobuf::Arena* arena) const {
  GameStatusNtf* n = new GameStatusNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStatusNtf::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameStatusNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.GameStatusNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.GameStatusNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.GameStatusNtf)
  return false;
#undef DO_
}

void GameStatusNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.GameStatusNtf)
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.GameStatusNtf)
}

::google::protobuf::uint8* GameStatusNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.GameStatusNtf)
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.GameStatusNtf)
  return target;
}

int GameStatusNtf::ByteSize() const {
  int total_size = 0;

  // required int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatusNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameStatusNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStatusNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatusNtf::MergeFrom(const GameStatusNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameStatusNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatusNtf::CopyFrom(const GameStatusNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatusNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameStatusNtf::Swap(GameStatusNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStatusNtf::InternalSwap(GameStatusNtf* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameStatusNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatusNtf_descriptor_;
  metadata.reflection = GameStatusNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStatusNtf

// required int32 status = 1;
bool GameStatusNtf::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStatusNtf::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStatusNtf::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStatusNtf::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 GameStatusNtf::status() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStatusNtf.status)
  return status_;
}
 void GameStatusNtf::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameStatusNtf.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSwitchSceneNtf::kGameNameFieldNumber;
const int GameSwitchSceneNtf::kIsMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSwitchSceneNtf::GameSwitchSceneNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.GameSwitchSceneNtf)
}

void GameSwitchSceneNtf::InitAsDefaultInstance() {
}

GameSwitchSceneNtf::GameSwitchSceneNtf(const GameSwitchSceneNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.GameSwitchSceneNtf)
}

void GameSwitchSceneNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ismatch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSwitchSceneNtf::~GameSwitchSceneNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.GameSwitchSceneNtf)
  SharedDtor();
}

void GameSwitchSceneNtf::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameSwitchSceneNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSwitchSceneNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSwitchSceneNtf_descriptor_;
}

const GameSwitchSceneNtf& GameSwitchSceneNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

GameSwitchSceneNtf* GameSwitchSceneNtf::default_instance_ = NULL;

GameSwitchSceneNtf* GameSwitchSceneNtf::New(::google::protobuf::Arena* arena) const {
  GameSwitchSceneNtf* n = new GameSwitchSceneNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSwitchSceneNtf::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gamename()) {
      gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ismatch_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameSwitchSceneNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.GameSwitchSceneNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PBGameDDZ.GameSwitchSceneNtf.gameName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isMatch;
        break;
      }

      // required bool isMatch = 2;
      case 2: {
        if (tag == 16) {
         parse_isMatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatch_)));
          set_has_ismatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.GameSwitchSceneNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.GameSwitchSceneNtf)
  return false;
#undef DO_
}

void GameSwitchSceneNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.GameSwitchSceneNtf)
  // required string gameName = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.GameSwitchSceneNtf.gameName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // required bool isMatch = 2;
  if (has_ismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismatch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.GameSwitchSceneNtf)
}

::google::protobuf::uint8* GameSwitchSceneNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.GameSwitchSceneNtf)
  // required string gameName = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.GameSwitchSceneNtf.gameName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }

  // required bool isMatch = 2;
  if (has_ismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismatch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.GameSwitchSceneNtf)
  return target;
}

int GameSwitchSceneNtf::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_gamename()) {
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  if (has_ismatch()) {
    // required bool isMatch = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int GameSwitchSceneNtf::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());

    // required bool isMatch = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSwitchSceneNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameSwitchSceneNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSwitchSceneNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSwitchSceneNtf::MergeFrom(const GameSwitchSceneNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_has_gamename();
      gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
    }
    if (from.has_ismatch()) {
      set_ismatch(from.ismatch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameSwitchSceneNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSwitchSceneNtf::CopyFrom(const GameSwitchSceneNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSwitchSceneNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameSwitchSceneNtf::Swap(GameSwitchSceneNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSwitchSceneNtf::InternalSwap(GameSwitchSceneNtf* other) {
  gamename_.Swap(&other->gamename_);
  std::swap(ismatch_, other->ismatch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSwitchSceneNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSwitchSceneNtf_descriptor_;
  metadata.reflection = GameSwitchSceneNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSwitchSceneNtf

// required string gameName = 1;
bool GameSwitchSceneNtf::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSwitchSceneNtf::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSwitchSceneNtf::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSwitchSceneNtf::clear_gamename() {
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamename();
}
 const ::std::string& GameSwitchSceneNtf::gamename() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameSwitchSceneNtf.gameName)
  return gamename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameSwitchSceneNtf::set_gamename(const ::std::string& value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameSwitchSceneNtf.gameName)
}
 void GameSwitchSceneNtf::set_gamename(const char* value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.GameSwitchSceneNtf.gameName)
}
 void GameSwitchSceneNtf::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.GameSwitchSceneNtf.gameName)
}
 ::std::string* GameSwitchSceneNtf::mutable_gamename() {
  set_has_gamename();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameSwitchSceneNtf.gameName)
  return gamename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameSwitchSceneNtf::release_gamename() {
  clear_has_gamename();
  return gamename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameSwitchSceneNtf::set_allocated_gamename(::std::string* gamename) {
  if (gamename != NULL) {
    set_has_gamename();
  } else {
    clear_has_gamename();
  }
  gamename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamename);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.GameSwitchSceneNtf.gameName)
}

// required bool isMatch = 2;
bool GameSwitchSceneNtf::has_ismatch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameSwitchSceneNtf::set_has_ismatch() {
  _has_bits_[0] |= 0x00000002u;
}
void GameSwitchSceneNtf::clear_has_ismatch() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameSwitchSceneNtf::clear_ismatch() {
  ismatch_ = false;
  clear_has_ismatch();
}
 bool GameSwitchSceneNtf::ismatch() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameSwitchSceneNtf.isMatch)
  return ismatch_;
}
 void GameSwitchSceneNtf::set_ismatch(bool value) {
  set_has_ismatch();
  ismatch_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameSwitchSceneNtf.isMatch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartNtf::kGameNameFieldNumber;
const int GameStartNtf::kBasicScoreFieldNumber;
const int GameStartNtf::kUserinfoFieldNumber;
const int GameStartNtf::kMatchInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartNtf::GameStartNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.GameStartNtf)
}

void GameStartNtf::InitAsDefaultInstance() {
  matchinfo_ = const_cast< ::PBGameDDZ::MatchInfo*>(&::PBGameDDZ::MatchInfo::default_instance());
}

GameStartNtf::GameStartNtf(const GameStartNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.GameStartNtf)
}

void GameStartNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basicscore_ = 0;
  matchinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartNtf::~GameStartNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.GameStartNtf)
  SharedDtor();
}

void GameStartNtf::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete matchinfo_;
  }
}

void GameStartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartNtf_descriptor_;
}

const GameStartNtf& GameStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

GameStartNtf* GameStartNtf::default_instance_ = NULL;

GameStartNtf* GameStartNtf::New(::google::protobuf::Arena* arena) const {
  GameStartNtf* n = new GameStartNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStartNtf::Clear() {
  if (_has_bits_[0 / 32] & 11u) {
    if (has_gamename()) {
      gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    basicscore_ = 0;
    if (has_matchinfo()) {
      if (matchinfo_ != NULL) matchinfo_->::PBGameDDZ::MatchInfo::Clear();
    }
  }
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.GameStartNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PBGameDDZ.GameStartNtf.gameName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_basicScore;
        break;
      }

      // required int32 basicScore = 2;
      case 2: {
        if (tag == 16) {
         parse_basicScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basicscore_)));
          set_has_basicscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userinfo;
        break;
      }

      // repeated .PBGameDDZ.UserInfo userinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_userinfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_userinfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_matchInfo;
        break;
      }

      // optional .PBGameDDZ.MatchInfo matchInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_matchInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.GameStartNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.GameStartNtf)
  return false;
#undef DO_
}

void GameStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.GameStartNtf)
  // required string gameName = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.GameStartNtf.gameName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // required int32 basicScore = 2;
  if (has_basicscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->basicscore(), output);
  }

  // repeated .PBGameDDZ.UserInfo userinfo = 3;
  for (unsigned int i = 0, n = this->userinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(i), output);
  }

  // optional .PBGameDDZ.MatchInfo matchInfo = 4;
  if (has_matchinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->matchinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.GameStartNtf)
}

::google::protobuf::uint8* GameStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.GameStartNtf)
  // required string gameName = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PBGameDDZ.GameStartNtf.gameName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }

  // required int32 basicScore = 2;
  if (has_basicscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->basicscore(), target);
  }

  // repeated .PBGameDDZ.UserInfo userinfo = 3;
  for (unsigned int i = 0, n = this->userinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(i), target);
  }

  // optional .PBGameDDZ.MatchInfo matchInfo = 4;
  if (has_matchinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->matchinfo_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.GameStartNtf)
  return target;
}

int GameStartNtf::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_gamename()) {
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  if (has_basicscore()) {
    // required int32 basicScore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->basicscore());
  }

  return total_size;
}
int GameStartNtf::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());

    // required int32 basicScore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->basicscore());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .PBGameDDZ.MatchInfo matchInfo = 4;
  if (has_matchinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matchinfo_);
  }

  // repeated .PBGameDDZ.UserInfo userinfo = 3;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameStartNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStartNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStartNtf::MergeFrom(const GameStartNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_has_gamename();
      gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
    }
    if (from.has_basicscore()) {
      set_basicscore(from.basicscore());
    }
    if (from.has_matchinfo()) {
      mutable_matchinfo()->::PBGameDDZ::MatchInfo::MergeFrom(from.matchinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartNtf::CopyFrom(const GameStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->userinfo())) return false;
  if (has_matchinfo()) {
    if (!this->matchinfo_->IsInitialized()) return false;
  }
  return true;
}

void GameStartNtf::Swap(GameStartNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartNtf::InternalSwap(GameStartNtf* other) {
  gamename_.Swap(&other->gamename_);
  std::swap(basicscore_, other->basicscore_);
  userinfo_.UnsafeArenaSwap(&other->userinfo_);
  std::swap(matchinfo_, other->matchinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartNtf_descriptor_;
  metadata.reflection = GameStartNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStartNtf

// required string gameName = 1;
bool GameStartNtf::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStartNtf::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStartNtf::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStartNtf::clear_gamename() {
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamename();
}
 const ::std::string& GameStartNtf::gamename() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.gameName)
  return gamename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameStartNtf::set_gamename(const ::std::string& value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameStartNtf.gameName)
}
 void GameStartNtf::set_gamename(const char* value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.GameStartNtf.gameName)
}
 void GameStartNtf::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.GameStartNtf.gameName)
}
 ::std::string* GameStartNtf::mutable_gamename() {
  set_has_gamename();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameStartNtf.gameName)
  return gamename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameStartNtf::release_gamename() {
  clear_has_gamename();
  return gamename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameStartNtf::set_allocated_gamename(::std::string* gamename) {
  if (gamename != NULL) {
    set_has_gamename();
  } else {
    clear_has_gamename();
  }
  gamename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamename);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.GameStartNtf.gameName)
}

// required int32 basicScore = 2;
bool GameStartNtf::has_basicscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStartNtf::set_has_basicscore() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStartNtf::clear_has_basicscore() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStartNtf::clear_basicscore() {
  basicscore_ = 0;
  clear_has_basicscore();
}
 ::google::protobuf::int32 GameStartNtf::basicscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.basicScore)
  return basicscore_;
}
 void GameStartNtf::set_basicscore(::google::protobuf::int32 value) {
  set_has_basicscore();
  basicscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameStartNtf.basicScore)
}

// repeated .PBGameDDZ.UserInfo userinfo = 3;
int GameStartNtf::userinfo_size() const {
  return userinfo_.size();
}
void GameStartNtf::clear_userinfo() {
  userinfo_.Clear();
}
const ::PBGameDDZ::UserInfo& GameStartNtf::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_.Get(index);
}
::PBGameDDZ::UserInfo* GameStartNtf::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_.Mutable(index);
}
::PBGameDDZ::UserInfo* GameStartNtf::add_userinfo() {
  // @@protoc_insertion_point(field_add:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBGameDDZ::UserInfo >*
GameStartNtf::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.GameStartNtf.userinfo)
  return &userinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::UserInfo >&
GameStartNtf::userinfo() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_;
}

// optional .PBGameDDZ.MatchInfo matchInfo = 4;
bool GameStartNtf::has_matchinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameStartNtf::set_has_matchinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void GameStartNtf::clear_has_matchinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameStartNtf::clear_matchinfo() {
  if (matchinfo_ != NULL) matchinfo_->::PBGameDDZ::MatchInfo::Clear();
  clear_has_matchinfo();
}
const ::PBGameDDZ::MatchInfo& GameStartNtf::matchinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.matchInfo)
  return matchinfo_ != NULL ? *matchinfo_ : *default_instance_->matchinfo_;
}
::PBGameDDZ::MatchInfo* GameStartNtf::mutable_matchinfo() {
  set_has_matchinfo();
  if (matchinfo_ == NULL) {
    matchinfo_ = new ::PBGameDDZ::MatchInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameStartNtf.matchInfo)
  return matchinfo_;
}
::PBGameDDZ::MatchInfo* GameStartNtf::release_matchinfo() {
  clear_has_matchinfo();
  ::PBGameDDZ::MatchInfo* temp = matchinfo_;
  matchinfo_ = NULL;
  return temp;
}
void GameStartNtf::set_allocated_matchinfo(::PBGameDDZ::MatchInfo* matchinfo) {
  delete matchinfo_;
  matchinfo_ = matchinfo;
  if (matchinfo) {
    set_has_matchinfo();
  } else {
    clear_has_matchinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.GameStartNtf.matchInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealCardNtf::kHeaderseatFieldNumber;
const int DealCardNtf::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealCardNtf::DealCardNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.DealCardNtf)
}

void DealCardNtf::InitAsDefaultInstance() {
}

DealCardNtf::DealCardNtf(const DealCardNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.DealCardNtf)
}

void DealCardNtf::SharedCtor() {
  _cached_size_ = 0;
  headerseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealCardNtf::~DealCardNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.DealCardNtf)
  SharedDtor();
}

void DealCardNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealCardNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealCardNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealCardNtf_descriptor_;
}

const DealCardNtf& DealCardNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

DealCardNtf* DealCardNtf::default_instance_ = NULL;

DealCardNtf* DealCardNtf::New(::google::protobuf::Arena* arena) const {
  DealCardNtf* n = new DealCardNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DealCardNtf::Clear() {
  headerseat_ = 0;
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DealCardNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.DealCardNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 headerseat = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headerseat_)));
          set_has_headerseat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }

      // repeated .PBGameDDZ.HandCardList cards = 2;
      case 2: {
        if (tag == 18) {
         parse_cards:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_cards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.DealCardNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.DealCardNtf)
  return false;
#undef DO_
}

void DealCardNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.DealCardNtf)
  // required int32 headerseat = 1;
  if (has_headerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->headerseat(), output);
  }

  // repeated .PBGameDDZ.HandCardList cards = 2;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.DealCardNtf)
}

::google::protobuf::uint8* DealCardNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.DealCardNtf)
  // required int32 headerseat = 1;
  if (has_headerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->headerseat(), target);
  }

  // repeated .PBGameDDZ.HandCardList cards = 2;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.DealCardNtf)
  return target;
}

int DealCardNtf::ByteSize() const {
  int total_size = 0;

  // required int32 headerseat = 1;
  if (has_headerseat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->headerseat());
  }
  // repeated .PBGameDDZ.HandCardList cards = 2;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealCardNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DealCardNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DealCardNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealCardNtf::MergeFrom(const DealCardNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headerseat()) {
      set_headerseat(from.headerseat());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DealCardNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealCardNtf::CopyFrom(const DealCardNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealCardNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DealCardNtf::Swap(DealCardNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealCardNtf::InternalSwap(DealCardNtf* other) {
  std::swap(headerseat_, other->headerseat_);
  cards_.UnsafeArenaSwap(&other->cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DealCardNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealCardNtf_descriptor_;
  metadata.reflection = DealCardNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DealCardNtf

// required int32 headerseat = 1;
bool DealCardNtf::has_headerseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DealCardNtf::set_has_headerseat() {
  _has_bits_[0] |= 0x00000001u;
}
void DealCardNtf::clear_has_headerseat() {
  _has_bits_[0] &= ~0x00000001u;
}
void DealCardNtf::clear_headerseat() {
  headerseat_ = 0;
  clear_has_headerseat();
}
 ::google::protobuf::int32 DealCardNtf::headerseat() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.DealCardNtf.headerseat)
  return headerseat_;
}
 void DealCardNtf::set_headerseat(::google::protobuf::int32 value) {
  set_has_headerseat();
  headerseat_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.DealCardNtf.headerseat)
}

// repeated .PBGameDDZ.HandCardList cards = 2;
int DealCardNtf::cards_size() const {
  return cards_.size();
}
void DealCardNtf::clear_cards() {
  cards_.Clear();
}
const ::PBGameDDZ::HandCardList& DealCardNtf::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.DealCardNtf.cards)
  return cards_.Get(index);
}
::PBGameDDZ::HandCardList* DealCardNtf::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.DealCardNtf.cards)
  return cards_.Mutable(index);
}
::PBGameDDZ::HandCardList* DealCardNtf::add_cards() {
  // @@protoc_insertion_point(field_add:PBGameDDZ.DealCardNtf.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBGameDDZ::HandCardList >*
DealCardNtf::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.DealCardNtf.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::HandCardList >&
DealCardNtf::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.DealCardNtf.cards)
  return cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCallScoreNtf::kSeatnoFieldNumber;
const int UserCallScoreNtf::kSeatnextFieldNumber;
const int UserCallScoreNtf::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCallScoreNtf::UserCallScoreNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.UserCallScoreNtf)
}

void UserCallScoreNtf::InitAsDefaultInstance() {
}

UserCallScoreNtf::UserCallScoreNtf(const UserCallScoreNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.UserCallScoreNtf)
}

void UserCallScoreNtf::SharedCtor() {
  _cached_size_ = 0;
  seatno_ = 0;
  seatnext_ = -1;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCallScoreNtf::~UserCallScoreNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.UserCallScoreNtf)
  SharedDtor();
}

void UserCallScoreNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCallScoreNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCallScoreNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCallScoreNtf_descriptor_;
}

const UserCallScoreNtf& UserCallScoreNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

UserCallScoreNtf* UserCallScoreNtf::default_instance_ = NULL;

UserCallScoreNtf* UserCallScoreNtf::New(::google::protobuf::Arena* arena) const {
  UserCallScoreNtf* n = new UserCallScoreNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserCallScoreNtf::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    seatno_ = 0;
    seatnext_ = -1;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserCallScoreNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.UserCallScoreNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatno = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatno_)));
          set_has_seatno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatnext;
        break;
      }

      // required int32 seatnext = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_seatnext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatnext_)));
          set_has_seatnext();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.UserCallScoreNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.UserCallScoreNtf)
  return false;
#undef DO_
}

void UserCallScoreNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.UserCallScoreNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatno(), output);
  }

  // required int32 seatnext = 2 [default = -1];
  if (has_seatnext()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatnext(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.UserCallScoreNtf)
}

::google::protobuf::uint8* UserCallScoreNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.UserCallScoreNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatno(), target);
  }

  // required int32 seatnext = 2 [default = -1];
  if (has_seatnext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatnext(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.UserCallScoreNtf)
  return target;
}

int UserCallScoreNtf::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_seatno()) {
    // required int32 seatno = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatno());
  }

  if (has_seatnext()) {
    // required int32 seatnext = 2 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatnext());
  }

  if (has_score()) {
    // required int32 score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  return total_size;
}
int UserCallScoreNtf::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 seatno = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatno());

    // required int32 seatnext = 2 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatnext());

    // required int32 score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCallScoreNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserCallScoreNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserCallScoreNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCallScoreNtf::MergeFrom(const UserCallScoreNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatno()) {
      set_seatno(from.seatno());
    }
    if (from.has_seatnext()) {
      set_seatnext(from.seatnext());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserCallScoreNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCallScoreNtf::CopyFrom(const UserCallScoreNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCallScoreNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserCallScoreNtf::Swap(UserCallScoreNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCallScoreNtf::InternalSwap(UserCallScoreNtf* other) {
  std::swap(seatno_, other->seatno_);
  std::swap(seatnext_, other->seatnext_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserCallScoreNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCallScoreNtf_descriptor_;
  metadata.reflection = UserCallScoreNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserCallScoreNtf

// required int32 seatno = 1;
bool UserCallScoreNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserCallScoreNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
void UserCallScoreNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserCallScoreNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
 ::google::protobuf::int32 UserCallScoreNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserCallScoreNtf.seatno)
  return seatno_;
}
 void UserCallScoreNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserCallScoreNtf.seatno)
}

// required int32 seatnext = 2 [default = -1];
bool UserCallScoreNtf::has_seatnext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserCallScoreNtf::set_has_seatnext() {
  _has_bits_[0] |= 0x00000002u;
}
void UserCallScoreNtf::clear_has_seatnext() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserCallScoreNtf::clear_seatnext() {
  seatnext_ = -1;
  clear_has_seatnext();
}
 ::google::protobuf::int32 UserCallScoreNtf::seatnext() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserCallScoreNtf.seatnext)
  return seatnext_;
}
 void UserCallScoreNtf::set_seatnext(::google::protobuf::int32 value) {
  set_has_seatnext();
  seatnext_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserCallScoreNtf.seatnext)
}

// required int32 score = 3;
bool UserCallScoreNtf::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserCallScoreNtf::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void UserCallScoreNtf::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserCallScoreNtf::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::google::protobuf::int32 UserCallScoreNtf::score() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserCallScoreNtf.score)
  return score_;
}
 void UserCallScoreNtf::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserCallScoreNtf.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LordSetNtf::kSeatlordFieldNumber;
const int LordSetNtf::kCallscoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LordSetNtf::LordSetNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.LordSetNtf)
}

void LordSetNtf::InitAsDefaultInstance() {
}

LordSetNtf::LordSetNtf(const LordSetNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.LordSetNtf)
}

void LordSetNtf::SharedCtor() {
  _cached_size_ = 0;
  seatlord_ = 0;
  callscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordSetNtf::~LordSetNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.LordSetNtf)
  SharedDtor();
}

void LordSetNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LordSetNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LordSetNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LordSetNtf_descriptor_;
}

const LordSetNtf& LordSetNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

LordSetNtf* LordSetNtf::default_instance_ = NULL;

LordSetNtf* LordSetNtf::New(::google::protobuf::Arena* arena) const {
  LordSetNtf* n = new LordSetNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LordSetNtf::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LordSetNtf*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seatlord_, callscore_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LordSetNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.LordSetNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatlord = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatlord_)));
          set_has_seatlord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_callscore;
        break;
      }

      // required int32 callscore = 2;
      case 2: {
        if (tag == 16) {
         parse_callscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callscore_)));
          set_has_callscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.LordSetNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.LordSetNtf)
  return false;
#undef DO_
}

void LordSetNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.LordSetNtf)
  // required int32 seatlord = 1;
  if (has_seatlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatlord(), output);
  }

  // required int32 callscore = 2;
  if (has_callscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->callscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.LordSetNtf)
}

::google::protobuf::uint8* LordSetNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.LordSetNtf)
  // required int32 seatlord = 1;
  if (has_seatlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatlord(), target);
  }

  // required int32 callscore = 2;
  if (has_callscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->callscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.LordSetNtf)
  return target;
}

int LordSetNtf::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_seatlord()) {
    // required int32 seatlord = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatlord());
  }

  if (has_callscore()) {
    // required int32 callscore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());
  }

  return total_size;
}
int LordSetNtf::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 seatlord = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatlord());

    // required int32 callscore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordSetNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LordSetNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LordSetNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LordSetNtf::MergeFrom(const LordSetNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatlord()) {
      set_seatlord(from.seatlord());
    }
    if (from.has_callscore()) {
      set_callscore(from.callscore());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LordSetNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LordSetNtf::CopyFrom(const LordSetNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordSetNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LordSetNtf::Swap(LordSetNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LordSetNtf::InternalSwap(LordSetNtf* other) {
  std::swap(seatlord_, other->seatlord_);
  std::swap(callscore_, other->callscore_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LordSetNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LordSetNtf_descriptor_;
  metadata.reflection = LordSetNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LordSetNtf

// required int32 seatlord = 1;
bool LordSetNtf::has_seatlord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LordSetNtf::set_has_seatlord() {
  _has_bits_[0] |= 0x00000001u;
}
void LordSetNtf::clear_has_seatlord() {
  _has_bits_[0] &= ~0x00000001u;
}
void LordSetNtf::clear_seatlord() {
  seatlord_ = 0;
  clear_has_seatlord();
}
 ::google::protobuf::int32 LordSetNtf::seatlord() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.LordSetNtf.seatlord)
  return seatlord_;
}
 void LordSetNtf::set_seatlord(::google::protobuf::int32 value) {
  set_has_seatlord();
  seatlord_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.LordSetNtf.seatlord)
}

// required int32 callscore = 2;
bool LordSetNtf::has_callscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LordSetNtf::set_has_callscore() {
  _has_bits_[0] |= 0x00000002u;
}
void LordSetNtf::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000002u;
}
void LordSetNtf::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
 ::google::protobuf::int32 LordSetNtf::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.LordSetNtf.callscore)
  return callscore_;
}
 void LordSetNtf::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.LordSetNtf.callscore)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendBaseCardNtf::kBasecardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendBaseCardNtf::SendBaseCardNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.SendBaseCardNtf)
}

void SendBaseCardNtf::InitAsDefaultInstance() {
}

SendBaseCardNtf::SendBaseCardNtf(const SendBaseCardNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.SendBaseCardNtf)
}

void SendBaseCardNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBaseCardNtf::~SendBaseCardNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.SendBaseCardNtf)
  SharedDtor();
}

void SendBaseCardNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBaseCardNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBaseCardNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBaseCardNtf_descriptor_;
}

const SendBaseCardNtf& SendBaseCardNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

SendBaseCardNtf* SendBaseCardNtf::default_instance_ = NULL;

SendBaseCardNtf* SendBaseCardNtf::New(::google::protobuf::Arena* arena) const {
  SendBaseCardNtf* n = new SendBaseCardNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendBaseCardNtf::Clear() {
  basecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SendBaseCardNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.SendBaseCardNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 basecards = 1;
      case 1: {
        if (tag == 8) {
         parse_basecards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_basecards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_basecards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_basecards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.SendBaseCardNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.SendBaseCardNtf)
  return false;
#undef DO_
}

void SendBaseCardNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.SendBaseCardNtf)
  // repeated int32 basecards = 1;
  for (int i = 0; i < this->basecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->basecards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.SendBaseCardNtf)
}

::google::protobuf::uint8* SendBaseCardNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.SendBaseCardNtf)
  // repeated int32 basecards = 1;
  for (int i = 0; i < this->basecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->basecards(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.SendBaseCardNtf)
  return target;
}

int SendBaseCardNtf::ByteSize() const {
  int total_size = 0;

  // repeated int32 basecards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->basecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->basecards(i));
    }
    total_size += 1 * this->basecards_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBaseCardNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendBaseCardNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendBaseCardNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBaseCardNtf::MergeFrom(const SendBaseCardNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  basecards_.MergeFrom(from.basecards_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SendBaseCardNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBaseCardNtf::CopyFrom(const SendBaseCardNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBaseCardNtf::IsInitialized() const {

  return true;
}

void SendBaseCardNtf::Swap(SendBaseCardNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendBaseCardNtf::InternalSwap(SendBaseCardNtf* other) {
  basecards_.UnsafeArenaSwap(&other->basecards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendBaseCardNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBaseCardNtf_descriptor_;
  metadata.reflection = SendBaseCardNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendBaseCardNtf

// repeated int32 basecards = 1;
int SendBaseCardNtf::basecards_size() const {
  return basecards_.size();
}
void SendBaseCardNtf::clear_basecards() {
  basecards_.Clear();
}
 ::google::protobuf::int32 SendBaseCardNtf::basecards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.SendBaseCardNtf.basecards)
  return basecards_.Get(index);
}
 void SendBaseCardNtf::set_basecards(int index, ::google::protobuf::int32 value) {
  basecards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.SendBaseCardNtf.basecards)
}
 void SendBaseCardNtf::add_basecards(::google::protobuf::int32 value) {
  basecards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.SendBaseCardNtf.basecards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SendBaseCardNtf::basecards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.SendBaseCardNtf.basecards)
  return basecards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SendBaseCardNtf::mutable_basecards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.SendBaseCardNtf.basecards)
  return &basecards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeoutCardNtf::kSeatnoFieldNumber;
const int TakeoutCardNtf::kSeatnextFieldNumber;
const int TakeoutCardNtf::kCardsFieldNumber;
const int TakeoutCardNtf::kCardtypeFieldNumber;
const int TakeoutCardNtf::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeoutCardNtf::TakeoutCardNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TakeoutCardNtf)
}

void TakeoutCardNtf::InitAsDefaultInstance() {
}

TakeoutCardNtf::TakeoutCardNtf(const TakeoutCardNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TakeoutCardNtf)
}

void TakeoutCardNtf::SharedCtor() {
  _cached_size_ = 0;
  seatno_ = 0;
  seatnext_ = 0;
  cardtype_ = 0;
  multiple_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeoutCardNtf::~TakeoutCardNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TakeoutCardNtf)
  SharedDtor();
}

void TakeoutCardNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeoutCardNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeoutCardNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeoutCardNtf_descriptor_;
}

const TakeoutCardNtf& TakeoutCardNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TakeoutCardNtf* TakeoutCardNtf::default_instance_ = NULL;

TakeoutCardNtf* TakeoutCardNtf::New(::google::protobuf::Arena* arena) const {
  TakeoutCardNtf* n = new TakeoutCardNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeoutCardNtf::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TakeoutCardNtf*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seatno_, seatnext_);
  ZR_(cardtype_, multiple_);

#undef ZR_HELPER_
#undef ZR_

  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TakeoutCardNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TakeoutCardNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatno = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatno_)));
          set_has_seatno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatnext;
        break;
      }

      // required int32 seatnext = 2;
      case 2: {
        if (tag == 16) {
         parse_seatnext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatnext_)));
          set_has_seatnext();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (tag == 24) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectTag(32)) goto parse_cardtype;
        break;
      }

      // required int32 cardtype = 4;
      case 4: {
        if (tag == 32) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multiple;
        break;
      }

      // required int32 multiple = 5;
      case 5: {
        if (tag == 40) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TakeoutCardNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TakeoutCardNtf)
  return false;
#undef DO_
}

void TakeoutCardNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TakeoutCardNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatno(), output);
  }

  // required int32 seatnext = 2;
  if (has_seatnext()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatnext(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  // required int32 cardtype = 4;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardtype(), output);
  }

  // required int32 multiple = 5;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->multiple(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TakeoutCardNtf)
}

::google::protobuf::uint8* TakeoutCardNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TakeoutCardNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatno(), target);
  }

  // required int32 seatnext = 2;
  if (has_seatnext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatnext(), target);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards(i), target);
  }

  // required int32 cardtype = 4;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardtype(), target);
  }

  // required int32 multiple = 5;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->multiple(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TakeoutCardNtf)
  return target;
}

int TakeoutCardNtf::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_seatno()) {
    // required int32 seatno = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatno());
  }

  if (has_seatnext()) {
    // required int32 seatnext = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatnext());
  }

  if (has_cardtype()) {
    // required int32 cardtype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cardtype());
  }

  if (has_multiple()) {
    // required int32 multiple = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  return total_size;
}
int TakeoutCardNtf::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required int32 seatno = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatno());

    // required int32 seatnext = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatnext());

    // required int32 cardtype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cardtype());

    // required int32 multiple = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeoutCardNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TakeoutCardNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeoutCardNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeoutCardNtf::MergeFrom(const TakeoutCardNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatno()) {
      set_seatno(from.seatno());
    }
    if (from.has_seatnext()) {
      set_seatnext(from.seatnext());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TakeoutCardNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeoutCardNtf::CopyFrom(const TakeoutCardNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeoutCardNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void TakeoutCardNtf::Swap(TakeoutCardNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeoutCardNtf::InternalSwap(TakeoutCardNtf* other) {
  std::swap(seatno_, other->seatno_);
  std::swap(seatnext_, other->seatnext_);
  cards_.UnsafeArenaSwap(&other->cards_);
  std::swap(cardtype_, other->cardtype_);
  std::swap(multiple_, other->multiple_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeoutCardNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeoutCardNtf_descriptor_;
  metadata.reflection = TakeoutCardNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeoutCardNtf

// required int32 seatno = 1;
bool TakeoutCardNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TakeoutCardNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
void TakeoutCardNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
void TakeoutCardNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
 ::google::protobuf::int32 TakeoutCardNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.seatno)
  return seatno_;
}
 void TakeoutCardNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.seatno)
}

// required int32 seatnext = 2;
bool TakeoutCardNtf::has_seatnext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TakeoutCardNtf::set_has_seatnext() {
  _has_bits_[0] |= 0x00000002u;
}
void TakeoutCardNtf::clear_has_seatnext() {
  _has_bits_[0] &= ~0x00000002u;
}
void TakeoutCardNtf::clear_seatnext() {
  seatnext_ = 0;
  clear_has_seatnext();
}
 ::google::protobuf::int32 TakeoutCardNtf::seatnext() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.seatnext)
  return seatnext_;
}
 void TakeoutCardNtf::set_seatnext(::google::protobuf::int32 value) {
  set_has_seatnext();
  seatnext_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.seatnext)
}

// repeated int32 cards = 3;
int TakeoutCardNtf::cards_size() const {
  return cards_.size();
}
void TakeoutCardNtf::clear_cards() {
  cards_.Clear();
}
 ::google::protobuf::int32 TakeoutCardNtf::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.cards)
  return cards_.Get(index);
}
 void TakeoutCardNtf::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.cards)
}
 void TakeoutCardNtf::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.TakeoutCardNtf.cards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TakeoutCardNtf::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.TakeoutCardNtf.cards)
  return cards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TakeoutCardNtf::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.TakeoutCardNtf.cards)
  return &cards_;
}

// required int32 cardtype = 4;
bool TakeoutCardNtf::has_cardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TakeoutCardNtf::set_has_cardtype() {
  _has_bits_[0] |= 0x00000008u;
}
void TakeoutCardNtf::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void TakeoutCardNtf::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
 ::google::protobuf::int32 TakeoutCardNtf::cardtype() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.cardtype)
  return cardtype_;
}
 void TakeoutCardNtf::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.cardtype)
}

// required int32 multiple = 5;
bool TakeoutCardNtf::has_multiple() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TakeoutCardNtf::set_has_multiple() {
  _has_bits_[0] |= 0x00000010u;
}
void TakeoutCardNtf::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000010u;
}
void TakeoutCardNtf::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
 ::google::protobuf::int32 TakeoutCardNtf::multiple() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.multiple)
  return multiple_;
}
 void TakeoutCardNtf::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustNtf::kSeatnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustNtf::TrustNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TrustNtf)
}

void TrustNtf::InitAsDefaultInstance() {
}

TrustNtf::TrustNtf(const TrustNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TrustNtf)
}

void TrustNtf::SharedCtor() {
  _cached_size_ = 0;
  seatno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustNtf::~TrustNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TrustNtf)
  SharedDtor();
}

void TrustNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrustNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustNtf_descriptor_;
}

const TrustNtf& TrustNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TrustNtf* TrustNtf::default_instance_ = NULL;

TrustNtf* TrustNtf::New(::google::protobuf::Arena* arena) const {
  TrustNtf* n = new TrustNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrustNtf::Clear() {
  seatno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrustNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TrustNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatno = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatno_)));
          set_has_seatno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TrustNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TrustNtf)
  return false;
#undef DO_
}

void TrustNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TrustNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatno(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TrustNtf)
}

::google::protobuf::uint8* TrustNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TrustNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatno(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TrustNtf)
  return target;
}

int TrustNtf::ByteSize() const {
  int total_size = 0;

  // required int32 seatno = 1;
  if (has_seatno()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatno());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrustNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrustNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustNtf::MergeFrom(const TrustNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatno()) {
      set_seatno(from.seatno());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrustNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustNtf::CopyFrom(const TrustNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrustNtf::Swap(TrustNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustNtf::InternalSwap(TrustNtf* other) {
  std::swap(seatno_, other->seatno_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrustNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustNtf_descriptor_;
  metadata.reflection = TrustNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrustNtf

// required int32 seatno = 1;
bool TrustNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrustNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
void TrustNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrustNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
 ::google::protobuf::int32 TrustNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustNtf.seatno)
  return seatno_;
}
 void TrustNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustNtf.seatno)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustLiftNtf::kSeatnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustLiftNtf::TrustLiftNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.TrustLiftNtf)
}

void TrustLiftNtf::InitAsDefaultInstance() {
}

TrustLiftNtf::TrustLiftNtf(const TrustLiftNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.TrustLiftNtf)
}

void TrustLiftNtf::SharedCtor() {
  _cached_size_ = 0;
  seatno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustLiftNtf::~TrustLiftNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.TrustLiftNtf)
  SharedDtor();
}

void TrustLiftNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrustLiftNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustLiftNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustLiftNtf_descriptor_;
}

const TrustLiftNtf& TrustLiftNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

TrustLiftNtf* TrustLiftNtf::default_instance_ = NULL;

TrustLiftNtf* TrustLiftNtf::New(::google::protobuf::Arena* arena) const {
  TrustLiftNtf* n = new TrustLiftNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrustLiftNtf::Clear() {
  seatno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrustLiftNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.TrustLiftNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatno = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatno_)));
          set_has_seatno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.TrustLiftNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.TrustLiftNtf)
  return false;
#undef DO_
}

void TrustLiftNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.TrustLiftNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatno(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.TrustLiftNtf)
}

::google::protobuf::uint8* TrustLiftNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.TrustLiftNtf)
  // required int32 seatno = 1;
  if (has_seatno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatno(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.TrustLiftNtf)
  return target;
}

int TrustLiftNtf::ByteSize() const {
  int total_size = 0;

  // required int32 seatno = 1;
  if (has_seatno()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatno());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustLiftNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrustLiftNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrustLiftNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustLiftNtf::MergeFrom(const TrustLiftNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatno()) {
      set_seatno(from.seatno());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrustLiftNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustLiftNtf::CopyFrom(const TrustLiftNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustLiftNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrustLiftNtf::Swap(TrustLiftNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustLiftNtf::InternalSwap(TrustLiftNtf* other) {
  std::swap(seatno_, other->seatno_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrustLiftNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustLiftNtf_descriptor_;
  metadata.reflection = TrustLiftNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrustLiftNtf

// required int32 seatno = 1;
bool TrustLiftNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrustLiftNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
void TrustLiftNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrustLiftNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
 ::google::protobuf::int32 TrustLiftNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustLiftNtf.seatno)
  return seatno_;
}
 void TrustLiftNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustLiftNtf.seatno)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOverNtf::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverNtf::GameOverNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.GameOverNtf)
}

void GameOverNtf::InitAsDefaultInstance() {
}

GameOverNtf::GameOverNtf(const GameOverNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.GameOverNtf)
}

void GameOverNtf::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOverNtf::~GameOverNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.GameOverNtf)
  SharedDtor();
}

void GameOverNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOverNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOverNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOverNtf_descriptor_;
}

const GameOverNtf& GameOverNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

GameOverNtf* GameOverNtf::default_instance_ = NULL;

GameOverNtf* GameOverNtf::New(::google::protobuf::Arena* arena) const {
  GameOverNtf* n = new GameOverNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameOverNtf::Clear() {
  reason_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameOverNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.GameOverNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reason = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.GameOverNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.GameOverNtf)
  return false;
#undef DO_
}

void GameOverNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.GameOverNtf)
  // required int32 reason = 1 [default = 2];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.GameOverNtf)
}

::google::protobuf::uint8* GameOverNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.GameOverNtf)
  // required int32 reason = 1 [default = 2];
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.GameOverNtf)
  return target;
}

int GameOverNtf::ByteSize() const {
  int total_size = 0;

  // required int32 reason = 1 [default = 2];
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOverNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameOverNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameOverNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOverNtf::MergeFrom(const GameOverNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameOverNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverNtf::CopyFrom(const GameOverNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameOverNtf::Swap(GameOverNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverNtf::InternalSwap(GameOverNtf* other) {
  std::swap(reason_, other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameOverNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOverNtf_descriptor_;
  metadata.reflection = GameOverNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameOverNtf

// required int32 reason = 1 [default = 2];
bool GameOverNtf::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameOverNtf::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void GameOverNtf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameOverNtf::clear_reason() {
  reason_ = 2;
  clear_has_reason();
}
 ::google::protobuf::int32 GameOverNtf::reason() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameOverNtf.reason)
  return reason_;
}
 void GameOverNtf::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameOverNtf.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActTimeoutNtf::kReadyFieldNumber;
const int ActTimeoutNtf::kCallscoreFieldNumber;
const int ActTimeoutNtf::kTakeoutFieldNumber;
const int ActTimeoutNtf::kSettleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActTimeoutNtf::ActTimeoutNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameDDZ.ActTimeoutNtf)
}

void ActTimeoutNtf::InitAsDefaultInstance() {
}

ActTimeoutNtf::ActTimeoutNtf(const ActTimeoutNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameDDZ.ActTimeoutNtf)
}

void ActTimeoutNtf::SharedCtor() {
  _cached_size_ = 0;
  ready_ = 0;
  callscore_ = 0;
  takeout_ = 0;
  settle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActTimeoutNtf::~ActTimeoutNtf() {
  // @@protoc_insertion_point(destructor:PBGameDDZ.ActTimeoutNtf)
  SharedDtor();
}

void ActTimeoutNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActTimeoutNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActTimeoutNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActTimeoutNtf_descriptor_;
}

const ActTimeoutNtf& ActTimeoutNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBGameDDZ_2eproto();
  return *default_instance_;
}

ActTimeoutNtf* ActTimeoutNtf::default_instance_ = NULL;

ActTimeoutNtf* ActTimeoutNtf::New(::google::protobuf::Arena* arena) const {
  ActTimeoutNtf* n = new ActTimeoutNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActTimeoutNtf::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActTimeoutNtf*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ready_, settle_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActTimeoutNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameDDZ.ActTimeoutNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ready = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_callscore;
        break;
      }

      // required int32 callscore = 2;
      case 2: {
        if (tag == 16) {
         parse_callscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callscore_)));
          set_has_callscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_takeout;
        break;
      }

      // required int32 takeout = 3;
      case 3: {
        if (tag == 24) {
         parse_takeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &takeout_)));
          set_has_takeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_settle;
        break;
      }

      // required int32 settle = 4;
      case 4: {
        if (tag == 32) {
         parse_settle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settle_)));
          set_has_settle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameDDZ.ActTimeoutNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameDDZ.ActTimeoutNtf)
  return false;
#undef DO_
}

void ActTimeoutNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameDDZ.ActTimeoutNtf)
  // required int32 ready = 1;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ready(), output);
  }

  // required int32 callscore = 2;
  if (has_callscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->callscore(), output);
  }

  // required int32 takeout = 3;
  if (has_takeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->takeout(), output);
  }

  // required int32 settle = 4;
  if (has_settle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->settle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameDDZ.ActTimeoutNtf)
}

::google::protobuf::uint8* ActTimeoutNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameDDZ.ActTimeoutNtf)
  // required int32 ready = 1;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ready(), target);
  }

  // required int32 callscore = 2;
  if (has_callscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->callscore(), target);
  }

  // required int32 takeout = 3;
  if (has_takeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->takeout(), target);
  }

  // required int32 settle = 4;
  if (has_settle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->settle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameDDZ.ActTimeoutNtf)
  return target;
}

int ActTimeoutNtf::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_ready()) {
    // required int32 ready = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ready());
  }

  if (has_callscore()) {
    // required int32 callscore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());
  }

  if (has_takeout()) {
    // required int32 takeout = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->takeout());
  }

  if (has_settle()) {
    // required int32 settle = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settle());
  }

  return total_size;
}
int ActTimeoutNtf::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 ready = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ready());

    // required int32 callscore = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callscore());

    // required int32 takeout = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->takeout());

    // required int32 settle = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActTimeoutNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActTimeoutNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActTimeoutNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActTimeoutNtf::MergeFrom(const ActTimeoutNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_callscore()) {
      set_callscore(from.callscore());
    }
    if (from.has_takeout()) {
      set_takeout(from.takeout());
    }
    if (from.has_settle()) {
      set_settle(from.settle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActTimeoutNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActTimeoutNtf::CopyFrom(const ActTimeoutNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActTimeoutNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ActTimeoutNtf::Swap(ActTimeoutNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActTimeoutNtf::InternalSwap(ActTimeoutNtf* other) {
  std::swap(ready_, other->ready_);
  std::swap(callscore_, other->callscore_);
  std::swap(takeout_, other->takeout_);
  std::swap(settle_, other->settle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActTimeoutNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActTimeoutNtf_descriptor_;
  metadata.reflection = ActTimeoutNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActTimeoutNtf

// required int32 ready = 1;
bool ActTimeoutNtf::has_ready() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActTimeoutNtf::set_has_ready() {
  _has_bits_[0] |= 0x00000001u;
}
void ActTimeoutNtf::clear_has_ready() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActTimeoutNtf::clear_ready() {
  ready_ = 0;
  clear_has_ready();
}
 ::google::protobuf::int32 ActTimeoutNtf::ready() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.ready)
  return ready_;
}
 void ActTimeoutNtf::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.ready)
}

// required int32 callscore = 2;
bool ActTimeoutNtf::has_callscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActTimeoutNtf::set_has_callscore() {
  _has_bits_[0] |= 0x00000002u;
}
void ActTimeoutNtf::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActTimeoutNtf::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
 ::google::protobuf::int32 ActTimeoutNtf::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.callscore)
  return callscore_;
}
 void ActTimeoutNtf::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.callscore)
}

// required int32 takeout = 3;
bool ActTimeoutNtf::has_takeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActTimeoutNtf::set_has_takeout() {
  _has_bits_[0] |= 0x00000004u;
}
void ActTimeoutNtf::clear_has_takeout() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActTimeoutNtf::clear_takeout() {
  takeout_ = 0;
  clear_has_takeout();
}
 ::google::protobuf::int32 ActTimeoutNtf::takeout() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.takeout)
  return takeout_;
}
 void ActTimeoutNtf::set_takeout(::google::protobuf::int32 value) {
  set_has_takeout();
  takeout_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.takeout)
}

// required int32 settle = 4;
bool ActTimeoutNtf::has_settle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActTimeoutNtf::set_has_settle() {
  _has_bits_[0] |= 0x00000008u;
}
void ActTimeoutNtf::clear_has_settle() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActTimeoutNtf::clear_settle() {
  settle_ = 0;
  clear_has_settle();
}
 ::google::protobuf::int32 ActTimeoutNtf::settle() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.settle)
  return settle_;
}
 void ActTimeoutNtf::set_settle(::google::protobuf::int32 value) {
  set_has_settle();
  settle_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.settle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PBGameDDZ

// @@protoc_insertion_point(global_scope)
