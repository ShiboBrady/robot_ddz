// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "connect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace YLYQ {
namespace Protocol {
namespace connect {

namespace {

const ::google::protobuf::Descriptor* HeartbeatNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitGameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyGameAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectMsgId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_connect_2eproto() {
  protobuf_AddDesc_connect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "connect.proto");
  GOOGLE_CHECK(file != NULL);
  HeartbeatNtf_descriptor_ = file->message_type(0);
  static const int HeartbeatNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatNtf, rev_),
  };
  HeartbeatNtf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartbeatNtf_descriptor_,
      HeartbeatNtf::default_instance_,
      HeartbeatNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatNtf, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeartbeatNtf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatNtf, _internal_metadata_),
      -1);
  VerifyReq_descriptor_ = file->message_type(1);
  static const int VerifyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyReq, sessionkey_),
  };
  VerifyReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerifyReq_descriptor_,
      VerifyReq::default_instance_,
      VerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(VerifyReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyReq, _internal_metadata_),
      -1);
  VerifyAck_descriptor_ = file->message_type(2);
  static const int VerifyAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAck, gamename_),
  };
  VerifyAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerifyAck_descriptor_,
      VerifyAck::default_instance_,
      VerifyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(VerifyAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAck, _internal_metadata_),
      -1);
  InitGameReq_descriptor_ = file->message_type(3);
  static const int InitGameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGameReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGameReq, name_),
  };
  InitGameReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitGameReq_descriptor_,
      InitGameReq::default_instance_,
      InitGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGameReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(InitGameReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGameReq, _internal_metadata_),
      -1);
  InitGameAck_descriptor_ = file->message_type(4);
  static const int InitGameAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGameAck, result_),
  };
  InitGameAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitGameAck_descriptor_,
      InitGameAck::default_instance_,
      InitGameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGameAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(InitGameAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGameAck, _internal_metadata_),
      -1);
  DestroyGameReq_descriptor_ = file->message_type(5);
  static const int DestroyGameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGameReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGameReq, name_),
  };
  DestroyGameReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DestroyGameReq_descriptor_,
      DestroyGameReq::default_instance_,
      DestroyGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGameReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(DestroyGameReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGameReq, _internal_metadata_),
      -1);
  DestroyGameAck_descriptor_ = file->message_type(6);
  static const int DestroyGameAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGameAck, result_),
  };
  DestroyGameAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DestroyGameAck_descriptor_,
      DestroyGameAck::default_instance_,
      DestroyGameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGameAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(DestroyGameAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGameAck, _internal_metadata_),
      -1);
  ConnectMsgId_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_connect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartbeatNtf_descriptor_, &HeartbeatNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerifyReq_descriptor_, &VerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerifyAck_descriptor_, &VerifyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitGameReq_descriptor_, &InitGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitGameAck_descriptor_, &InitGameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DestroyGameReq_descriptor_, &DestroyGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DestroyGameAck_descriptor_, &DestroyGameAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_connect_2eproto() {
  delete HeartbeatNtf::default_instance_;
  delete HeartbeatNtf_reflection_;
  delete VerifyReq::default_instance_;
  delete VerifyReq_reflection_;
  delete VerifyAck::default_instance_;
  delete VerifyAck_reflection_;
  delete InitGameReq::default_instance_;
  delete InitGameReq_reflection_;
  delete InitGameAck::default_instance_;
  delete InitGameAck_reflection_;
  delete DestroyGameReq::default_instance_;
  delete DestroyGameReq_reflection_;
  delete DestroyGameAck::default_instance_;
  delete DestroyGameAck_reflection_;
}

void protobuf_AddDesc_connect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rconnect.proto\022\025YLYQ.Protocol.connect\"\033"
    "\n\014HeartbeatNtf\022\013\n\003rev\030\001 \001(\t\"/\n\tVerifyReq"
    "\022\016\n\006userId\030\001 \002(\t\022\022\n\nsessionKey\030\002 \002(\t\"-\n\t"
    "VerifyAck\022\016\n\006result\030\001 \002(\005\022\020\n\010gameName\030\002 "
    "\001(\t\")\n\013InitGameReq\022\014\n\004type\030\001 \002(\t\022\014\n\004name"
    "\030\002 \002(\t\"\035\n\013InitGameAck\022\016\n\006result\030\001 \002(\005\",\n"
    "\016DestroyGameReq\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030\002 "
    "\001(\t\" \n\016DestroyGameAck\022\016\n\006result\030\001 \002(\005*\315\001"
    "\n\014ConnectMsgId\022\016\n\nMSGID_NULL\020\000\022\027\n\023MSGID_"
    "HEARTBEAT_NTF\020\n\022\024\n\020MSGID_VERIFY_REQ\020\013\022\024\n"
    "\020MSGID_VERIFY_ACK\020\014\022\027\n\023MSGID_INIT_GAME_R"
    "EQ\020\r\022\027\n\023MSGID_INIT_GAME_ACK\020\016\022\032\n\026MSGID_D"
    "ESTROY_GAME_REQ\020\017\022\032\n\026MSGID_DESTROY_GAME_"
    "ACK\020\020", 525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "connect.proto", &protobuf_RegisterTypes);
  HeartbeatNtf::default_instance_ = new HeartbeatNtf();
  VerifyReq::default_instance_ = new VerifyReq();
  VerifyAck::default_instance_ = new VerifyAck();
  InitGameReq::default_instance_ = new InitGameReq();
  InitGameAck::default_instance_ = new InitGameAck();
  DestroyGameReq::default_instance_ = new DestroyGameReq();
  DestroyGameAck::default_instance_ = new DestroyGameAck();
  HeartbeatNtf::default_instance_->InitAsDefaultInstance();
  VerifyReq::default_instance_->InitAsDefaultInstance();
  VerifyAck::default_instance_->InitAsDefaultInstance();
  InitGameReq::default_instance_->InitAsDefaultInstance();
  InitGameAck::default_instance_->InitAsDefaultInstance();
  DestroyGameReq::default_instance_->InitAsDefaultInstance();
  DestroyGameAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_connect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_connect_2eproto {
  StaticDescriptorInitializer_connect_2eproto() {
    protobuf_AddDesc_connect_2eproto();
  }
} static_descriptor_initializer_connect_2eproto_;
const ::google::protobuf::EnumDescriptor* ConnectMsgId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectMsgId_descriptor_;
}
bool ConnectMsgId_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatNtf::kRevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatNtf::HeartbeatNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YLYQ.Protocol.connect.HeartbeatNtf)
}

void HeartbeatNtf::InitAsDefaultInstance() {
}

HeartbeatNtf::HeartbeatNtf(const HeartbeatNtf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YLYQ.Protocol.connect.HeartbeatNtf)
}

void HeartbeatNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatNtf::~HeartbeatNtf() {
  // @@protoc_insertion_point(destructor:YLYQ.Protocol.connect.HeartbeatNtf)
  SharedDtor();
}

void HeartbeatNtf::SharedDtor() {
  rev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HeartbeatNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatNtf_descriptor_;
}

const HeartbeatNtf& HeartbeatNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connect_2eproto();
  return *default_instance_;
}

HeartbeatNtf* HeartbeatNtf::default_instance_ = NULL;

HeartbeatNtf* HeartbeatNtf::New(::google::protobuf::Arena* arena) const {
  HeartbeatNtf* n = new HeartbeatNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatNtf::Clear() {
  if (has_rev()) {
    rev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeartbeatNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YLYQ.Protocol.connect.HeartbeatNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rev = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rev().data(), this->rev().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.HeartbeatNtf.rev");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YLYQ.Protocol.connect.HeartbeatNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YLYQ.Protocol.connect.HeartbeatNtf)
  return false;
#undef DO_
}

void HeartbeatNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YLYQ.Protocol.connect.HeartbeatNtf)
  // optional string rev = 1;
  if (has_rev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rev().data(), this->rev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.HeartbeatNtf.rev");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YLYQ.Protocol.connect.HeartbeatNtf)
}

::google::protobuf::uint8* HeartbeatNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YLYQ.Protocol.connect.HeartbeatNtf)
  // optional string rev = 1;
  if (has_rev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rev().data(), this->rev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.HeartbeatNtf.rev");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YLYQ.Protocol.connect.HeartbeatNtf)
  return target;
}

int HeartbeatNtf::ByteSize() const {
  int total_size = 0;

  // optional string rev = 1;
  if (has_rev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rev());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatNtf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartbeatNtf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatNtf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatNtf::MergeFrom(const HeartbeatNtf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rev()) {
      set_has_rev();
      rev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeartbeatNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatNtf::CopyFrom(const HeartbeatNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatNtf::IsInitialized() const {

  return true;
}

void HeartbeatNtf::Swap(HeartbeatNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatNtf::InternalSwap(HeartbeatNtf* other) {
  rev_.Swap(&other->rev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatNtf_descriptor_;
  metadata.reflection = HeartbeatNtf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatNtf

// optional string rev = 1;
bool HeartbeatNtf::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartbeatNtf::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartbeatNtf::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartbeatNtf::clear_rev() {
  rev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rev();
}
 const ::std::string& HeartbeatNtf::rev() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.HeartbeatNtf.rev)
  return rev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartbeatNtf::set_rev(const ::std::string& value) {
  set_has_rev();
  rev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.HeartbeatNtf.rev)
}
 void HeartbeatNtf::set_rev(const char* value) {
  set_has_rev();
  rev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.HeartbeatNtf.rev)
}
 void HeartbeatNtf::set_rev(const char* value, size_t size) {
  set_has_rev();
  rev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.HeartbeatNtf.rev)
}
 ::std::string* HeartbeatNtf::mutable_rev() {
  set_has_rev();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.HeartbeatNtf.rev)
  return rev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartbeatNtf::release_rev() {
  clear_has_rev();
  return rev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartbeatNtf::set_allocated_rev(::std::string* rev) {
  if (rev != NULL) {
    set_has_rev();
  } else {
    clear_has_rev();
  }
  rev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rev);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.HeartbeatNtf.rev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyReq::kUserIdFieldNumber;
const int VerifyReq::kSessionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyReq::VerifyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YLYQ.Protocol.connect.VerifyReq)
}

void VerifyReq::InitAsDefaultInstance() {
}

VerifyReq::VerifyReq(const VerifyReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YLYQ.Protocol.connect.VerifyReq)
}

void VerifyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyReq::~VerifyReq() {
  // @@protoc_insertion_point(destructor:YLYQ.Protocol.connect.VerifyReq)
  SharedDtor();
}

void VerifyReq::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyReq_descriptor_;
}

const VerifyReq& VerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connect_2eproto();
  return *default_instance_;
}

VerifyReq* VerifyReq::default_instance_ = NULL;

VerifyReq* VerifyReq::New(::google::protobuf::Arena* arena) const {
  VerifyReq* n = new VerifyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sessionkey()) {
      sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YLYQ.Protocol.connect.VerifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.VerifyReq.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sessionKey;
        break;
      }

      // required string sessionKey = 2;
      case 2: {
        if (tag == 18) {
         parse_sessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.VerifyReq.sessionKey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YLYQ.Protocol.connect.VerifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YLYQ.Protocol.connect.VerifyReq)
  return false;
#undef DO_
}

void VerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YLYQ.Protocol.connect.VerifyReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.VerifyReq.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string sessionKey = 2;
  if (has_sessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.VerifyReq.sessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sessionkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YLYQ.Protocol.connect.VerifyReq)
}

::google::protobuf::uint8* VerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YLYQ.Protocol.connect.VerifyReq)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.VerifyReq.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string sessionKey = 2;
  if (has_sessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.VerifyReq.sessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sessionkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YLYQ.Protocol.connect.VerifyReq)
  return target;
}

int VerifyReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_userid()) {
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_sessionkey()) {
    // required string sessionKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionkey());
  }

  return total_size;
}
int VerifyReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string sessionKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionkey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerifyReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyReq::MergeFrom(const VerifyReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_sessionkey()) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyReq::CopyFrom(const VerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VerifyReq::Swap(VerifyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyReq::InternalSwap(VerifyReq* other) {
  userid_.Swap(&other->userid_);
  sessionkey_.Swap(&other->sessionkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyReq_descriptor_;
  metadata.reflection = VerifyReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyReq

// required string userId = 1;
bool VerifyReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& VerifyReq::userid() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.VerifyReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.VerifyReq.userId)
}
 void VerifyReq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.VerifyReq.userId)
}
 void VerifyReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.VerifyReq.userId)
}
 ::std::string* VerifyReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.VerifyReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VerifyReq::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.VerifyReq.userId)
}

// required string sessionKey = 2;
bool VerifyReq::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyReq::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyReq::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyReq::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
 const ::std::string& VerifyReq::sessionkey() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.VerifyReq.sessionKey)
  return sessionkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyReq::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.VerifyReq.sessionKey)
}
 void VerifyReq::set_sessionkey(const char* value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.VerifyReq.sessionKey)
}
 void VerifyReq::set_sessionkey(const char* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.VerifyReq.sessionKey)
}
 ::std::string* VerifyReq::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.VerifyReq.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VerifyReq::release_sessionkey() {
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyReq::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.VerifyReq.sessionKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyAck::kResultFieldNumber;
const int VerifyAck::kGameNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyAck::VerifyAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YLYQ.Protocol.connect.VerifyAck)
}

void VerifyAck::InitAsDefaultInstance() {
}

VerifyAck::VerifyAck(const VerifyAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YLYQ.Protocol.connect.VerifyAck)
}

void VerifyAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyAck::~VerifyAck() {
  // @@protoc_insertion_point(destructor:YLYQ.Protocol.connect.VerifyAck)
  SharedDtor();
}

void VerifyAck::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VerifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyAck_descriptor_;
}

const VerifyAck& VerifyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connect_2eproto();
  return *default_instance_;
}

VerifyAck* VerifyAck::default_instance_ = NULL;

VerifyAck* VerifyAck::New(::google::protobuf::Arena* arena) const {
  VerifyAck* n = new VerifyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyAck::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    result_ = 0;
    if (has_gamename()) {
      gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VerifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YLYQ.Protocol.connect.VerifyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gameName;
        break;
      }

      // optional string gameName = 2;
      case 2: {
        if (tag == 18) {
         parse_gameName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.VerifyAck.gameName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YLYQ.Protocol.connect.VerifyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YLYQ.Protocol.connect.VerifyAck)
  return false;
#undef DO_
}

void VerifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YLYQ.Protocol.connect.VerifyAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string gameName = 2;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.VerifyAck.gameName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YLYQ.Protocol.connect.VerifyAck)
}

::google::protobuf::uint8* VerifyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YLYQ.Protocol.connect.VerifyAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string gameName = 2;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.VerifyAck.gameName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YLYQ.Protocol.connect.VerifyAck)
  return target;
}

int VerifyAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional string gameName = 2;
  if (has_gamename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerifyAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyAck::MergeFrom(const VerifyAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gamename()) {
      set_has_gamename();
      gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VerifyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyAck::CopyFrom(const VerifyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VerifyAck::Swap(VerifyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyAck::InternalSwap(VerifyAck* other) {
  std::swap(result_, other->result_);
  gamename_.Swap(&other->gamename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyAck_descriptor_;
  metadata.reflection = VerifyAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyAck

// required int32 result = 1;
bool VerifyAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 VerifyAck::result() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.VerifyAck.result)
  return result_;
}
 void VerifyAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.VerifyAck.result)
}

// optional string gameName = 2;
bool VerifyAck::has_gamename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyAck::set_has_gamename() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyAck::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyAck::clear_gamename() {
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamename();
}
 const ::std::string& VerifyAck::gamename() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.VerifyAck.gameName)
  return gamename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyAck::set_gamename(const ::std::string& value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.VerifyAck.gameName)
}
 void VerifyAck::set_gamename(const char* value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.VerifyAck.gameName)
}
 void VerifyAck::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.VerifyAck.gameName)
}
 ::std::string* VerifyAck::mutable_gamename() {
  set_has_gamename();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.VerifyAck.gameName)
  return gamename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VerifyAck::release_gamename() {
  clear_has_gamename();
  return gamename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyAck::set_allocated_gamename(::std::string* gamename) {
  if (gamename != NULL) {
    set_has_gamename();
  } else {
    clear_has_gamename();
  }
  gamename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamename);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.VerifyAck.gameName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitGameReq::kTypeFieldNumber;
const int InitGameReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitGameReq::InitGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YLYQ.Protocol.connect.InitGameReq)
}

void InitGameReq::InitAsDefaultInstance() {
}

InitGameReq::InitGameReq(const InitGameReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YLYQ.Protocol.connect.InitGameReq)
}

void InitGameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitGameReq::~InitGameReq() {
  // @@protoc_insertion_point(destructor:YLYQ.Protocol.connect.InitGameReq)
  SharedDtor();
}

void InitGameReq::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitGameReq_descriptor_;
}

const InitGameReq& InitGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connect_2eproto();
  return *default_instance_;
}

InitGameReq* InitGameReq::default_instance_ = NULL;

InitGameReq* InitGameReq::New(::google::protobuf::Arena* arena) const {
  InitGameReq* n = new InitGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitGameReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InitGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YLYQ.Protocol.connect.InitGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.InitGameReq.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.InitGameReq.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YLYQ.Protocol.connect.InitGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YLYQ.Protocol.connect.InitGameReq)
  return false;
#undef DO_
}

void InitGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YLYQ.Protocol.connect.InitGameReq)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.InitGameReq.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.InitGameReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YLYQ.Protocol.connect.InitGameReq)
}

::google::protobuf::uint8* InitGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YLYQ.Protocol.connect.InitGameReq)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.InitGameReq.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.InitGameReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YLYQ.Protocol.connect.InitGameReq)
  return target;
}

int InitGameReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int InitGameReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InitGameReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitGameReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitGameReq::MergeFrom(const InitGameReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InitGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitGameReq::CopyFrom(const InitGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitGameReq::Swap(InitGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitGameReq::InternalSwap(InitGameReq* other) {
  type_.Swap(&other->type_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitGameReq_descriptor_;
  metadata.reflection = InitGameReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitGameReq

// required string type = 1;
bool InitGameReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitGameReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void InitGameReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitGameReq::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& InitGameReq::type() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.InitGameReq.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitGameReq::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.InitGameReq.type)
}
 void InitGameReq::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.InitGameReq.type)
}
 void InitGameReq::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.InitGameReq.type)
}
 ::std::string* InitGameReq::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.InitGameReq.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitGameReq::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitGameReq::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.InitGameReq.type)
}

// required string name = 2;
bool InitGameReq::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitGameReq::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void InitGameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitGameReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& InitGameReq::name() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.InitGameReq.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitGameReq::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.InitGameReq.name)
}
 void InitGameReq::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.InitGameReq.name)
}
 void InitGameReq::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.InitGameReq.name)
}
 ::std::string* InitGameReq::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.InitGameReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitGameReq::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitGameReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.InitGameReq.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitGameAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitGameAck::InitGameAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YLYQ.Protocol.connect.InitGameAck)
}

void InitGameAck::InitAsDefaultInstance() {
}

InitGameAck::InitGameAck(const InitGameAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YLYQ.Protocol.connect.InitGameAck)
}

void InitGameAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitGameAck::~InitGameAck() {
  // @@protoc_insertion_point(destructor:YLYQ.Protocol.connect.InitGameAck)
  SharedDtor();
}

void InitGameAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitGameAck_descriptor_;
}

const InitGameAck& InitGameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connect_2eproto();
  return *default_instance_;
}

InitGameAck* InitGameAck::default_instance_ = NULL;

InitGameAck* InitGameAck::New(::google::protobuf::Arena* arena) const {
  InitGameAck* n = new InitGameAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitGameAck::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InitGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YLYQ.Protocol.connect.InitGameAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YLYQ.Protocol.connect.InitGameAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YLYQ.Protocol.connect.InitGameAck)
  return false;
#undef DO_
}

void InitGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YLYQ.Protocol.connect.InitGameAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YLYQ.Protocol.connect.InitGameAck)
}

::google::protobuf::uint8* InitGameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YLYQ.Protocol.connect.InitGameAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YLYQ.Protocol.connect.InitGameAck)
  return target;
}

int InitGameAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitGameAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InitGameAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitGameAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitGameAck::MergeFrom(const InitGameAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InitGameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitGameAck::CopyFrom(const InitGameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitGameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitGameAck::Swap(InitGameAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitGameAck::InternalSwap(InitGameAck* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitGameAck_descriptor_;
  metadata.reflection = InitGameAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitGameAck

// required int32 result = 1;
bool InitGameAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitGameAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void InitGameAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitGameAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 InitGameAck::result() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.InitGameAck.result)
  return result_;
}
 void InitGameAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.InitGameAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyGameReq::kTypeFieldNumber;
const int DestroyGameReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyGameReq::DestroyGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YLYQ.Protocol.connect.DestroyGameReq)
}

void DestroyGameReq::InitAsDefaultInstance() {
}

DestroyGameReq::DestroyGameReq(const DestroyGameReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YLYQ.Protocol.connect.DestroyGameReq)
}

void DestroyGameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyGameReq::~DestroyGameReq() {
  // @@protoc_insertion_point(destructor:YLYQ.Protocol.connect.DestroyGameReq)
  SharedDtor();
}

void DestroyGameReq::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DestroyGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyGameReq_descriptor_;
}

const DestroyGameReq& DestroyGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connect_2eproto();
  return *default_instance_;
}

DestroyGameReq* DestroyGameReq::default_instance_ = NULL;

DestroyGameReq* DestroyGameReq::New(::google::protobuf::Arena* arena) const {
  DestroyGameReq* n = new DestroyGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyGameReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DestroyGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YLYQ.Protocol.connect.DestroyGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.DestroyGameReq.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "YLYQ.Protocol.connect.DestroyGameReq.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YLYQ.Protocol.connect.DestroyGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YLYQ.Protocol.connect.DestroyGameReq)
  return false;
#undef DO_
}

void DestroyGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YLYQ.Protocol.connect.DestroyGameReq)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.DestroyGameReq.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.DestroyGameReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YLYQ.Protocol.connect.DestroyGameReq)
}

::google::protobuf::uint8* DestroyGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YLYQ.Protocol.connect.DestroyGameReq)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.DestroyGameReq.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "YLYQ.Protocol.connect.DestroyGameReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YLYQ.Protocol.connect.DestroyGameReq)
  return target;
}

int DestroyGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DestroyGameReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyGameReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyGameReq::MergeFrom(const DestroyGameReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DestroyGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyGameReq::CopyFrom(const DestroyGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyGameReq::IsInitialized() const {

  return true;
}

void DestroyGameReq::Swap(DestroyGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyGameReq::InternalSwap(DestroyGameReq* other) {
  type_.Swap(&other->type_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyGameReq_descriptor_;
  metadata.reflection = DestroyGameReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyGameReq

// optional string type = 1;
bool DestroyGameReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DestroyGameReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DestroyGameReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DestroyGameReq::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& DestroyGameReq::type() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.DestroyGameReq.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DestroyGameReq::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.DestroyGameReq.type)
}
 void DestroyGameReq::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.DestroyGameReq.type)
}
 void DestroyGameReq::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.DestroyGameReq.type)
}
 ::std::string* DestroyGameReq::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.DestroyGameReq.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DestroyGameReq::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DestroyGameReq::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.DestroyGameReq.type)
}

// optional string name = 2;
bool DestroyGameReq::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DestroyGameReq::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void DestroyGameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void DestroyGameReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DestroyGameReq::name() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.DestroyGameReq.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DestroyGameReq::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.DestroyGameReq.name)
}
 void DestroyGameReq::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YLYQ.Protocol.connect.DestroyGameReq.name)
}
 void DestroyGameReq::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YLYQ.Protocol.connect.DestroyGameReq.name)
}
 ::std::string* DestroyGameReq::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:YLYQ.Protocol.connect.DestroyGameReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DestroyGameReq::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DestroyGameReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YLYQ.Protocol.connect.DestroyGameReq.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyGameAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyGameAck::DestroyGameAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YLYQ.Protocol.connect.DestroyGameAck)
}

void DestroyGameAck::InitAsDefaultInstance() {
}

DestroyGameAck::DestroyGameAck(const DestroyGameAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YLYQ.Protocol.connect.DestroyGameAck)
}

void DestroyGameAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyGameAck::~DestroyGameAck() {
  // @@protoc_insertion_point(destructor:YLYQ.Protocol.connect.DestroyGameAck)
  SharedDtor();
}

void DestroyGameAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyGameAck_descriptor_;
}

const DestroyGameAck& DestroyGameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connect_2eproto();
  return *default_instance_;
}

DestroyGameAck* DestroyGameAck::default_instance_ = NULL;

DestroyGameAck* DestroyGameAck::New(::google::protobuf::Arena* arena) const {
  DestroyGameAck* n = new DestroyGameAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyGameAck::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DestroyGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YLYQ.Protocol.connect.DestroyGameAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YLYQ.Protocol.connect.DestroyGameAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YLYQ.Protocol.connect.DestroyGameAck)
  return false;
#undef DO_
}

void DestroyGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YLYQ.Protocol.connect.DestroyGameAck)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YLYQ.Protocol.connect.DestroyGameAck)
}

::google::protobuf::uint8* DestroyGameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YLYQ.Protocol.connect.DestroyGameAck)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YLYQ.Protocol.connect.DestroyGameAck)
  return target;
}

int DestroyGameAck::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyGameAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DestroyGameAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyGameAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyGameAck::MergeFrom(const DestroyGameAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DestroyGameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyGameAck::CopyFrom(const DestroyGameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyGameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DestroyGameAck::Swap(DestroyGameAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyGameAck::InternalSwap(DestroyGameAck* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyGameAck_descriptor_;
  metadata.reflection = DestroyGameAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyGameAck

// required int32 result = 1;
bool DestroyGameAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DestroyGameAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void DestroyGameAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void DestroyGameAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 DestroyGameAck::result() const {
  // @@protoc_insertion_point(field_get:YLYQ.Protocol.connect.DestroyGameAck.result)
  return result_;
}
 void DestroyGameAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YLYQ.Protocol.connect.DestroyGameAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace connect
}  // namespace Protocol
}  // namespace YLYQ

// @@protoc_insertion_point(global_scope)
