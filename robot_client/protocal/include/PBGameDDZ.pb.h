// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBGameDDZ.proto

#ifndef PROTOBUF_PBGameDDZ_2eproto__INCLUDED
#define PROTOBUF_PBGameDDZ_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PBGameDDZ {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PBGameDDZ_2eproto();
void protobuf_AssignDesc_PBGameDDZ_2eproto();
void protobuf_ShutdownFile_PBGameDDZ_2eproto();

class ActTimeoutNtf;
class CallScoreAck;
class CallScoreReq;
class DealCardNtf;
class GameOverNtf;
class GameStartNtf;
class GameStatusNtf;
class GameSwitchSceneNtf;
class HandCardList;
class KeepPlayingAck;
class KeepPlayingAck_GameInfo;
class KeepPlayingAck_PlayerInfo;
class KeepPlayingReq;
class LordSetNtf;
class MatchInfo;
class ReadyAck;
class ReadyReq;
class SendBaseCardNtf;
class TableCardList;
class TakeoutCardAck;
class TakeoutCardNtf;
class TakeoutCardReq;
class TrustAck;
class TrustLiftAck;
class TrustLiftNtf;
class TrustLiftReq;
class TrustNtf;
class TrustReq;
class UserCallScoreNtf;
class UserInfo;

enum reqMsgID {
  MSGID_CALLSCORE_REQ = 5001,
  MSGID_CALLSCORE_ACK = 5002,
  MSGID_TAKEOUT_REQ = 5003,
  MSGID_TAKEOUT_ACK = 5004,
  MSGID_TRUST_REQ = 5005,
  MSGID_TRUST_ACK = 5006,
  MSGID_TRUST_CANCEL_REQ = 5007,
  MSGID_TRUST_CANCEL_ACK = 5008,
  MSGID_KEEP_REQ = 5009,
  MSGID_KEEP_ACK = 5010,
  MSGID_READY_REQ = 5011,
  MSGID_READY_ACK = 5012
};
bool reqMsgID_IsValid(int value);
const reqMsgID reqMsgID_MIN = MSGID_CALLSCORE_REQ;
const reqMsgID reqMsgID_MAX = MSGID_READY_ACK;
const int reqMsgID_ARRAYSIZE = reqMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* reqMsgID_descriptor();
inline const ::std::string& reqMsgID_Name(reqMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    reqMsgID_descriptor(), value);
}
inline bool reqMsgID_Parse(
    const ::std::string& name, reqMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<reqMsgID>(
    reqMsgID_descriptor(), name, value);
}
enum notifyMsgID {
  NOTIFY_STARTGAME = 5050,
  NOTIFY_FORCEQUIT = 5051,
  NOTIFY_TB_STATUS = 5052,
  NOTIFY_TRUST = 5053,
  NOTIFY_TRUST_CANCEL = 5054,
  NOTIFY_DEALCARD = 5055,
  NOTIFY_BASECARD = 5056,
  NOTIFY_CALLSCORE = 5057,
  NOTIFY_SETLORD = 5058,
  NOTIFY_TAKEOUT = 5059,
  NOTIFY_GAMEOVER = 5060,
  NOTIFY_TIMEOUT = 5061,
  NOTIFY_SWITCH_SCENE = 5062
};
bool notifyMsgID_IsValid(int value);
const notifyMsgID notifyMsgID_MIN = NOTIFY_STARTGAME;
const notifyMsgID notifyMsgID_MAX = NOTIFY_SWITCH_SCENE;
const int notifyMsgID_ARRAYSIZE = notifyMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* notifyMsgID_descriptor();
inline const ::std::string& notifyMsgID_Name(notifyMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    notifyMsgID_descriptor(), value);
}
inline bool notifyMsgID_Parse(
    const ::std::string& name, notifyMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<notifyMsgID>(
    notifyMsgID_descriptor(), name, value);
}
enum gameErrno {
  ERR_SUCCESS = 0,
  ERR_UNKNOWN = -1,
  ERR_BADPACKET = -2,
  ERR_NULLUSERNAME = -3,
  ERR_NOTEXISTGUID = -4,
  ERR_NOTEXISTPLAYER = -5,
  ERR_NOTENTERGAME = -6,
  ERR_SESSION = -7,
  ERR_BADCALLSCORE = -8,
  ERR_BADTAKEOUTNUM = -9,
  ERR_NOTTAKEOUT = -10,
  ERR_NOTCALLSCORE = -11,
  ERR_TAKEOUTORDER = -12,
  ERR_CALLSCOREORDER = -13,
  ERR_TRUSTTAKEOUT = -14,
  ERR_TRUSTCALLSCORE = -15,
  ERR_LEADEROWNER = -16,
  ERR_TRUSTCOUNT = -17,
  ERR_ALREADYTRUST = -18,
  ERR_NOTTRUST = -19,
  ERR_NONWAITSTATUS = -20,
  ERR_TAKEOUTFAILED = -21
};
bool gameErrno_IsValid(int value);
const gameErrno gameErrno_MIN = ERR_TAKEOUTFAILED;
const gameErrno gameErrno_MAX = ERR_SUCCESS;
const int gameErrno_ARRAYSIZE = gameErrno_MAX + 1;

const ::google::protobuf::EnumDescriptor* gameErrno_descriptor();
inline const ::std::string& gameErrno_Name(gameErrno value) {
  return ::google::protobuf::internal::NameOfEnum(
    gameErrno_descriptor(), value);
}
inline bool gameErrno_Parse(
    const ::std::string& name, gameErrno* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gameErrno>(
    gameErrno_descriptor(), name, value);
}
enum gameStatus {
  TB_IDLE = 0,
  TB_READY = 1,
  TB_DEALCARDS = 2,
  TB_CALLSCORE = 3,
  TB_TAKEOUT = 4,
  TB_INVALID = 5,
  TB_SETTLE = 6
};
bool gameStatus_IsValid(int value);
const gameStatus gameStatus_MIN = TB_IDLE;
const gameStatus gameStatus_MAX = TB_SETTLE;
const int gameStatus_ARRAYSIZE = gameStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* gameStatus_descriptor();
inline const ::std::string& gameStatus_Name(gameStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    gameStatus_descriptor(), value);
}
inline bool gameStatus_Parse(
    const ::std::string& name, gameStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gameStatus>(
    gameStatus_descriptor(), name, value);
}
// ===================================================================

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // required int32 avataType = 3;
  bool has_avatatype() const;
  void clear_avatatype();
  static const int kAvataTypeFieldNumber = 3;
  ::google::protobuf::int32 avatatype() const;
  void set_avatatype(::google::protobuf::int32 value);

  // required string avataId = 4;
  bool has_avataid() const;
  void clear_avataid();
  static const int kAvataIdFieldNumber = 4;
  const ::std::string& avataid() const;
  void set_avataid(const ::std::string& value);
  void set_avataid(const char* value);
  void set_avataid(const char* value, size_t size);
  ::std::string* mutable_avataid();
  ::std::string* release_avataid();
  void set_allocated_avataid(::std::string* avataid);

  // required int32 sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // required int64 coins = 6;
  bool has_coins() const;
  void clear_coins();
  static const int kCoinsFieldNumber = 6;
  ::google::protobuf::int64 coins() const;
  void set_coins(::google::protobuf::int64 value);

  // required int64 vipPoints = 7;
  bool has_vippoints() const;
  void clear_vippoints();
  static const int kVipPointsFieldNumber = 7;
  ::google::protobuf::int64 vippoints() const;
  void set_vippoints(::google::protobuf::int64 value);

  // optional int64 exp = 8;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 8;
  ::google::protobuf::int64 exp() const;
  void set_exp(::google::protobuf::int64 value);

  // optional int32 innings = 9;
  bool has_innings() const;
  void clear_innings();
  static const int kInningsFieldNumber = 9;
  ::google::protobuf::int32 innings() const;
  void set_innings(::google::protobuf::int32 value);

  // optional int32 winInnings = 10;
  bool has_wininnings() const;
  void clear_wininnings();
  static const int kWinInningsFieldNumber = 10;
  ::google::protobuf::int32 wininnings() const;
  void set_wininnings(::google::protobuf::int32 value);

  // optional int32 place = 11;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 11;
  ::google::protobuf::int32 place() const;
  void set_place(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.UserInfo)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatatype();
  inline void clear_has_avatatype();
  inline void set_has_avataid();
  inline void clear_has_avataid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_vippoints();
  inline void clear_has_vippoints();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_innings();
  inline void clear_has_innings();
  inline void set_has_wininnings();
  inline void clear_has_wininnings();
  inline void set_has_place();
  inline void clear_has_place();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr avataid_;
  ::google::protobuf::int32 avatatype_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int64 coins_;
  ::google::protobuf::int64 vippoints_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 innings_;
  ::google::protobuf::int32 wininnings_;
  ::google::protobuf::int32 place_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class MatchInfo : public ::google::protobuf::Message {
 public:
  MatchInfo();
  virtual ~MatchInfo();

  MatchInfo(const MatchInfo& from);

  inline MatchInfo& operator=(const MatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchInfo& default_instance();

  void Swap(MatchInfo* other);

  // implements Message ----------------------------------------------

  inline MatchInfo* New() const { return New(NULL); }

  MatchInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchInfo& from);
  void MergeFrom(const MatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stageNum = 1;
  bool has_stagenum() const;
  void clear_stagenum();
  static const int kStageNumFieldNumber = 1;
  ::google::protobuf::int32 stagenum() const;
  void set_stagenum(::google::protobuf::int32 value);

  // required int32 inningNum = 2;
  bool has_inningnum() const;
  void clear_inningnum();
  static const int kInningNumFieldNumber = 2;
  ::google::protobuf::int32 inningnum() const;
  void set_inningnum(::google::protobuf::int32 value);

  // required int32 userCount = 3;
  bool has_usercount() const;
  void clear_usercount();
  static const int kUserCountFieldNumber = 3;
  ::google::protobuf::int32 usercount() const;
  void set_usercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.MatchInfo)
 private:
  inline void set_has_stagenum();
  inline void clear_has_stagenum();
  inline void set_has_inningnum();
  inline void clear_has_inningnum();
  inline void set_has_usercount();
  inline void clear_has_usercount();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 stagenum_;
  ::google::protobuf::int32 inningnum_;
  ::google::protobuf::int32 usercount_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static MatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class HandCardList : public ::google::protobuf::Message {
 public:
  HandCardList();
  virtual ~HandCardList();

  HandCardList(const HandCardList& from);

  inline HandCardList& operator=(const HandCardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandCardList& default_instance();

  void Swap(HandCardList* other);

  // implements Message ----------------------------------------------

  inline HandCardList* New() const { return New(NULL); }

  HandCardList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandCardList& from);
  void MergeFrom(const HandCardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandCardList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:PBGameDDZ.HandCardList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static HandCardList* default_instance_;
};
// -------------------------------------------------------------------

class TableCardList : public ::google::protobuf::Message {
 public:
  TableCardList();
  virtual ~TableCardList();

  TableCardList(const TableCardList& from);

  inline TableCardList& operator=(const TableCardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableCardList& default_instance();

  void Swap(TableCardList* other);

  // implements Message ----------------------------------------------

  inline TableCardList* New() const { return New(NULL); }

  TableCardList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableCardList& from);
  void MergeFrom(const TableCardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableCardList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TableCardList)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TableCardList* default_instance_;
};
// -------------------------------------------------------------------

class ReadyReq : public ::google::protobuf::Message {
 public:
  ReadyReq();
  virtual ~ReadyReq();

  ReadyReq(const ReadyReq& from);

  inline ReadyReq& operator=(const ReadyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadyReq& default_instance();

  void Swap(ReadyReq* other);

  // implements Message ----------------------------------------------

  inline ReadyReq* New() const { return New(NULL); }

  ReadyReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadyReq& from);
  void MergeFrom(const ReadyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rev = 1;
  bool has_rev() const;
  void clear_rev();
  static const int kRevFieldNumber = 1;
  ::google::protobuf::int32 rev() const;
  void set_rev(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.ReadyReq)
 private:
  inline void set_has_rev();
  inline void clear_has_rev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rev_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static ReadyReq* default_instance_;
};
// -------------------------------------------------------------------

class ReadyAck : public ::google::protobuf::Message {
 public:
  ReadyAck();
  virtual ~ReadyAck();

  ReadyAck(const ReadyAck& from);

  inline ReadyAck& operator=(const ReadyAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadyAck& default_instance();

  void Swap(ReadyAck* other);

  // implements Message ----------------------------------------------

  inline ReadyAck* New() const { return New(NULL); }

  ReadyAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadyAck& from);
  void MergeFrom(const ReadyAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.ReadyAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static ReadyAck* default_instance_;
};
// -------------------------------------------------------------------

class CallScoreReq : public ::google::protobuf::Message {
 public:
  CallScoreReq();
  virtual ~CallScoreReq();

  CallScoreReq(const CallScoreReq& from);

  inline CallScoreReq& operator=(const CallScoreReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallScoreReq& default_instance();

  void Swap(CallScoreReq* other);

  // implements Message ----------------------------------------------

  inline CallScoreReq* New() const { return New(NULL); }

  CallScoreReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallScoreReq& from);
  void MergeFrom(const CallScoreReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallScoreReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 score = 1;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.CallScoreReq)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 score_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static CallScoreReq* default_instance_;
};
// -------------------------------------------------------------------

class CallScoreAck : public ::google::protobuf::Message {
 public:
  CallScoreAck();
  virtual ~CallScoreAck();

  CallScoreAck(const CallScoreAck& from);

  inline CallScoreAck& operator=(const CallScoreAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallScoreAck& default_instance();

  void Swap(CallScoreAck* other);

  // implements Message ----------------------------------------------

  inline CallScoreAck* New() const { return New(NULL); }

  CallScoreAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallScoreAck& from);
  void MergeFrom(const CallScoreAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallScoreAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.CallScoreAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static CallScoreAck* default_instance_;
};
// -------------------------------------------------------------------

class TakeoutCardReq : public ::google::protobuf::Message {
 public:
  TakeoutCardReq();
  virtual ~TakeoutCardReq();

  TakeoutCardReq(const TakeoutCardReq& from);

  inline TakeoutCardReq& operator=(const TakeoutCardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeoutCardReq& default_instance();

  void Swap(TakeoutCardReq* other);

  // implements Message ----------------------------------------------

  inline TakeoutCardReq* New() const { return New(NULL); }

  TakeoutCardReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeoutCardReq& from);
  void MergeFrom(const TakeoutCardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TakeoutCardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TakeoutCardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TakeoutCardReq* default_instance_;
};
// -------------------------------------------------------------------

class TakeoutCardAck : public ::google::protobuf::Message {
 public:
  TakeoutCardAck();
  virtual ~TakeoutCardAck();

  TakeoutCardAck(const TakeoutCardAck& from);

  inline TakeoutCardAck& operator=(const TakeoutCardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeoutCardAck& default_instance();

  void Swap(TakeoutCardAck* other);

  // implements Message ----------------------------------------------

  inline TakeoutCardAck* New() const { return New(NULL); }

  TakeoutCardAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeoutCardAck& from);
  void MergeFrom(const TakeoutCardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TakeoutCardAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TakeoutCardAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TakeoutCardAck* default_instance_;
};
// -------------------------------------------------------------------

class TrustReq : public ::google::protobuf::Message {
 public:
  TrustReq();
  virtual ~TrustReq();

  TrustReq(const TrustReq& from);

  inline TrustReq& operator=(const TrustReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustReq& default_instance();

  void Swap(TrustReq* other);

  // implements Message ----------------------------------------------

  inline TrustReq* New() const { return New(NULL); }

  TrustReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustReq& from);
  void MergeFrom(const TrustReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rev = 1;
  bool has_rev() const;
  void clear_rev();
  static const int kRevFieldNumber = 1;
  ::google::protobuf::int32 rev() const;
  void set_rev(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TrustReq)
 private:
  inline void set_has_rev();
  inline void clear_has_rev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rev_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TrustReq* default_instance_;
};
// -------------------------------------------------------------------

class TrustAck : public ::google::protobuf::Message {
 public:
  TrustAck();
  virtual ~TrustAck();

  TrustAck(const TrustAck& from);

  inline TrustAck& operator=(const TrustAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustAck& default_instance();

  void Swap(TrustAck* other);

  // implements Message ----------------------------------------------

  inline TrustAck* New() const { return New(NULL); }

  TrustAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustAck& from);
  void MergeFrom(const TrustAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 surplus = 2;
  bool has_surplus() const;
  void clear_surplus();
  static const int kSurplusFieldNumber = 2;
  ::google::protobuf::int32 surplus() const;
  void set_surplus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TrustAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_surplus();
  inline void clear_has_surplus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 surplus_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TrustAck* default_instance_;
};
// -------------------------------------------------------------------

class TrustLiftReq : public ::google::protobuf::Message {
 public:
  TrustLiftReq();
  virtual ~TrustLiftReq();

  TrustLiftReq(const TrustLiftReq& from);

  inline TrustLiftReq& operator=(const TrustLiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustLiftReq& default_instance();

  void Swap(TrustLiftReq* other);

  // implements Message ----------------------------------------------

  inline TrustLiftReq* New() const { return New(NULL); }

  TrustLiftReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustLiftReq& from);
  void MergeFrom(const TrustLiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustLiftReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rev = 1;
  bool has_rev() const;
  void clear_rev();
  static const int kRevFieldNumber = 1;
  ::google::protobuf::int32 rev() const;
  void set_rev(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TrustLiftReq)
 private:
  inline void set_has_rev();
  inline void clear_has_rev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rev_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TrustLiftReq* default_instance_;
};
// -------------------------------------------------------------------

class TrustLiftAck : public ::google::protobuf::Message {
 public:
  TrustLiftAck();
  virtual ~TrustLiftAck();

  TrustLiftAck(const TrustLiftAck& from);

  inline TrustLiftAck& operator=(const TrustLiftAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustLiftAck& default_instance();

  void Swap(TrustLiftAck* other);

  // implements Message ----------------------------------------------

  inline TrustLiftAck* New() const { return New(NULL); }

  TrustLiftAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustLiftAck& from);
  void MergeFrom(const TrustLiftAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustLiftAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TrustLiftAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TrustLiftAck* default_instance_;
};
// -------------------------------------------------------------------

class KeepPlayingReq : public ::google::protobuf::Message {
 public:
  KeepPlayingReq();
  virtual ~KeepPlayingReq();

  KeepPlayingReq(const KeepPlayingReq& from);

  inline KeepPlayingReq& operator=(const KeepPlayingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepPlayingReq& default_instance();

  void Swap(KeepPlayingReq* other);

  // implements Message ----------------------------------------------

  inline KeepPlayingReq* New() const { return New(NULL); }

  KeepPlayingReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepPlayingReq& from);
  void MergeFrom(const KeepPlayingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepPlayingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rev = 1;
  bool has_rev() const;
  void clear_rev();
  static const int kRevFieldNumber = 1;
  ::google::protobuf::int32 rev() const;
  void set_rev(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.KeepPlayingReq)
 private:
  inline void set_has_rev();
  inline void clear_has_rev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rev_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static KeepPlayingReq* default_instance_;
};
// -------------------------------------------------------------------

class KeepPlayingAck_GameInfo : public ::google::protobuf::Message {
 public:
  KeepPlayingAck_GameInfo();
  virtual ~KeepPlayingAck_GameInfo();

  KeepPlayingAck_GameInfo(const KeepPlayingAck_GameInfo& from);

  inline KeepPlayingAck_GameInfo& operator=(const KeepPlayingAck_GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepPlayingAck_GameInfo& default_instance();

  void Swap(KeepPlayingAck_GameInfo* other);

  // implements Message ----------------------------------------------

  inline KeepPlayingAck_GameInfo* New() const { return New(NULL); }

  KeepPlayingAck_GameInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepPlayingAck_GameInfo& from);
  void MergeFrom(const KeepPlayingAck_GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepPlayingAck_GameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // required int32 seatlord = 2;
  bool has_seatlord() const;
  void clear_seatlord();
  static const int kSeatlordFieldNumber = 2;
  ::google::protobuf::int32 seatlord() const;
  void set_seatlord(::google::protobuf::int32 value);

  // required int32 seatactive = 3;
  bool has_seatactive() const;
  void clear_seatactive();
  static const int kSeatactiveFieldNumber = 3;
  ::google::protobuf::int32 seatactive() const;
  void set_seatactive(::google::protobuf::int32 value);

  // required int32 multiple = 4;
  bool has_multiple() const;
  void clear_multiple();
  static const int kMultipleFieldNumber = 4;
  ::google::protobuf::int32 multiple() const;
  void set_multiple(::google::protobuf::int32 value);

  // required int32 maxcallscore = 5;
  bool has_maxcallscore() const;
  void clear_maxcallscore();
  static const int kMaxcallscoreFieldNumber = 5;
  ::google::protobuf::int32 maxcallscore() const;
  void set_maxcallscore(::google::protobuf::int32 value);

  // repeated int32 basecards = 6;
  int basecards_size() const;
  void clear_basecards();
  static const int kBasecardsFieldNumber = 6;
  ::google::protobuf::int32 basecards(int index) const;
  void set_basecards(int index, ::google::protobuf::int32 value);
  void add_basecards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      basecards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_basecards();

  // @@protoc_insertion_point(class_scope:PBGameDDZ.KeepPlayingAck.GameInfo)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_seatlord();
  inline void clear_has_seatlord();
  inline void set_has_seatactive();
  inline void clear_has_seatactive();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_maxcallscore();
  inline void clear_has_maxcallscore();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 seatlord_;
  ::google::protobuf::int32 seatactive_;
  ::google::protobuf::int32 multiple_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > basecards_;
  ::google::protobuf::int32 maxcallscore_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static KeepPlayingAck_GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class KeepPlayingAck_PlayerInfo : public ::google::protobuf::Message {
 public:
  KeepPlayingAck_PlayerInfo();
  virtual ~KeepPlayingAck_PlayerInfo();

  KeepPlayingAck_PlayerInfo(const KeepPlayingAck_PlayerInfo& from);

  inline KeepPlayingAck_PlayerInfo& operator=(const KeepPlayingAck_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepPlayingAck_PlayerInfo& default_instance();

  void Swap(KeepPlayingAck_PlayerInfo* other);

  // implements Message ----------------------------------------------

  inline KeepPlayingAck_PlayerInfo* New() const { return New(NULL); }

  KeepPlayingAck_PlayerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepPlayingAck_PlayerInfo& from);
  void MergeFrom(const KeepPlayingAck_PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepPlayingAck_PlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool trust = 1;
  bool has_trust() const;
  void clear_trust();
  static const int kTrustFieldNumber = 1;
  bool trust() const;
  void set_trust(bool value);

  // required int32 trustsurplus = 2;
  bool has_trustsurplus() const;
  void clear_trustsurplus();
  static const int kTrustsurplusFieldNumber = 2;
  ::google::protobuf::int32 trustsurplus() const;
  void set_trustsurplus(::google::protobuf::int32 value);

  // required int32 callscore = 3;
  bool has_callscore() const;
  void clear_callscore();
  static const int kCallscoreFieldNumber = 3;
  ::google::protobuf::int32 callscore() const;
  void set_callscore(::google::protobuf::int32 value);

  // repeated int32 cards = 4;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 4;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated int32 lastcards = 5;
  int lastcards_size() const;
  void clear_lastcards();
  static const int kLastcardsFieldNumber = 5;
  ::google::protobuf::int32 lastcards(int index) const;
  void set_lastcards(int index, ::google::protobuf::int32 value);
  void add_lastcards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lastcards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lastcards();

  // required .PBGameDDZ.UserInfo detailinfo = 6;
  bool has_detailinfo() const;
  void clear_detailinfo();
  static const int kDetailinfoFieldNumber = 6;
  const ::PBGameDDZ::UserInfo& detailinfo() const;
  ::PBGameDDZ::UserInfo* mutable_detailinfo();
  ::PBGameDDZ::UserInfo* release_detailinfo();
  void set_allocated_detailinfo(::PBGameDDZ::UserInfo* detailinfo);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.KeepPlayingAck.PlayerInfo)
 private:
  inline void set_has_trust();
  inline void clear_has_trust();
  inline void set_has_trustsurplus();
  inline void clear_has_trustsurplus();
  inline void set_has_callscore();
  inline void clear_has_callscore();
  inline void set_has_detailinfo();
  inline void clear_has_detailinfo();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool trust_;
  ::google::protobuf::int32 trustsurplus_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lastcards_;
  ::PBGameDDZ::UserInfo* detailinfo_;
  ::google::protobuf::int32 callscore_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static KeepPlayingAck_PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class KeepPlayingAck : public ::google::protobuf::Message {
 public:
  KeepPlayingAck();
  virtual ~KeepPlayingAck();

  KeepPlayingAck(const KeepPlayingAck& from);

  inline KeepPlayingAck& operator=(const KeepPlayingAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepPlayingAck& default_instance();

  void Swap(KeepPlayingAck* other);

  // implements Message ----------------------------------------------

  inline KeepPlayingAck* New() const { return New(NULL); }

  KeepPlayingAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepPlayingAck& from);
  void MergeFrom(const KeepPlayingAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepPlayingAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef KeepPlayingAck_GameInfo GameInfo;
  typedef KeepPlayingAck_PlayerInfo PlayerInfo;

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
  bool has_gameinfo() const;
  void clear_gameinfo();
  static const int kGameinfoFieldNumber = 2;
  const ::PBGameDDZ::KeepPlayingAck_GameInfo& gameinfo() const;
  ::PBGameDDZ::KeepPlayingAck_GameInfo* mutable_gameinfo();
  ::PBGameDDZ::KeepPlayingAck_GameInfo* release_gameinfo();
  void set_allocated_gameinfo(::PBGameDDZ::KeepPlayingAck_GameInfo* gameinfo);

  // repeated .PBGameDDZ.KeepPlayingAck.PlayerInfo playerinfo = 3;
  int playerinfo_size() const;
  void clear_playerinfo();
  static const int kPlayerinfoFieldNumber = 3;
  const ::PBGameDDZ::KeepPlayingAck_PlayerInfo& playerinfo(int index) const;
  ::PBGameDDZ::KeepPlayingAck_PlayerInfo* mutable_playerinfo(int index);
  ::PBGameDDZ::KeepPlayingAck_PlayerInfo* add_playerinfo();
  ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::KeepPlayingAck_PlayerInfo >*
      mutable_playerinfo();
  const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::KeepPlayingAck_PlayerInfo >&
      playerinfo() const;

  // required int32 ready = 4;
  bool has_ready() const;
  void clear_ready();
  static const int kReadyFieldNumber = 4;
  ::google::protobuf::int32 ready() const;
  void set_ready(::google::protobuf::int32 value);

  // required int32 callscore = 5;
  bool has_callscore() const;
  void clear_callscore();
  static const int kCallscoreFieldNumber = 5;
  ::google::protobuf::int32 callscore() const;
  void set_callscore(::google::protobuf::int32 value);

  // required int32 takeout = 6;
  bool has_takeout() const;
  void clear_takeout();
  static const int kTakeoutFieldNumber = 6;
  ::google::protobuf::int32 takeout() const;
  void set_takeout(::google::protobuf::int32 value);

  // required int32 settle = 7;
  bool has_settle() const;
  void clear_settle();
  static const int kSettleFieldNumber = 7;
  ::google::protobuf::int32 settle() const;
  void set_settle(::google::protobuf::int32 value);

  // required string gameChannel = 8;
  bool has_gamechannel() const;
  void clear_gamechannel();
  static const int kGameChannelFieldNumber = 8;
  const ::std::string& gamechannel() const;
  void set_gamechannel(const ::std::string& value);
  void set_gamechannel(const char* value);
  void set_gamechannel(const char* value, size_t size);
  ::std::string* mutable_gamechannel();
  ::std::string* release_gamechannel();
  void set_allocated_gamechannel(::std::string* gamechannel);

  // required int32 basicScore = 9;
  bool has_basicscore() const;
  void clear_basicscore();
  static const int kBasicScoreFieldNumber = 9;
  ::google::protobuf::int32 basicscore() const;
  void set_basicscore(::google::protobuf::int32 value);

  // optional .PBGameDDZ.MatchInfo matchInfo = 10;
  bool has_matchinfo() const;
  void clear_matchinfo();
  static const int kMatchInfoFieldNumber = 10;
  const ::PBGameDDZ::MatchInfo& matchinfo() const;
  ::PBGameDDZ::MatchInfo* mutable_matchinfo();
  ::PBGameDDZ::MatchInfo* release_matchinfo();
  void set_allocated_matchinfo(::PBGameDDZ::MatchInfo* matchinfo);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.KeepPlayingAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gameinfo();
  inline void clear_has_gameinfo();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_callscore();
  inline void clear_has_callscore();
  inline void set_has_takeout();
  inline void clear_has_takeout();
  inline void set_has_settle();
  inline void clear_has_settle();
  inline void set_has_gamechannel();
  inline void clear_has_gamechannel();
  inline void set_has_basicscore();
  inline void clear_has_basicscore();
  inline void set_has_matchinfo();
  inline void clear_has_matchinfo();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PBGameDDZ::KeepPlayingAck_GameInfo* gameinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::KeepPlayingAck_PlayerInfo > playerinfo_;
  ::google::protobuf::int32 callscore_;
  ::google::protobuf::int32 takeout_;
  ::google::protobuf::internal::ArenaStringPtr gamechannel_;
  ::google::protobuf::int32 settle_;
  ::google::protobuf::int32 basicscore_;
  ::PBGameDDZ::MatchInfo* matchinfo_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static KeepPlayingAck* default_instance_;
};
// -------------------------------------------------------------------

class GameStatusNtf : public ::google::protobuf::Message {
 public:
  GameStatusNtf();
  virtual ~GameStatusNtf();

  GameStatusNtf(const GameStatusNtf& from);

  inline GameStatusNtf& operator=(const GameStatusNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStatusNtf& default_instance();

  void Swap(GameStatusNtf* other);

  // implements Message ----------------------------------------------

  inline GameStatusNtf* New() const { return New(NULL); }

  GameStatusNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStatusNtf& from);
  void MergeFrom(const GameStatusNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameStatusNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.GameStatusNtf)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static GameStatusNtf* default_instance_;
};
// -------------------------------------------------------------------

class GameSwitchSceneNtf : public ::google::protobuf::Message {
 public:
  GameSwitchSceneNtf();
  virtual ~GameSwitchSceneNtf();

  GameSwitchSceneNtf(const GameSwitchSceneNtf& from);

  inline GameSwitchSceneNtf& operator=(const GameSwitchSceneNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSwitchSceneNtf& default_instance();

  void Swap(GameSwitchSceneNtf* other);

  // implements Message ----------------------------------------------

  inline GameSwitchSceneNtf* New() const { return New(NULL); }

  GameSwitchSceneNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSwitchSceneNtf& from);
  void MergeFrom(const GameSwitchSceneNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameSwitchSceneNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gameName = 1;
  bool has_gamename() const;
  void clear_gamename();
  static const int kGameNameFieldNumber = 1;
  const ::std::string& gamename() const;
  void set_gamename(const ::std::string& value);
  void set_gamename(const char* value);
  void set_gamename(const char* value, size_t size);
  ::std::string* mutable_gamename();
  ::std::string* release_gamename();
  void set_allocated_gamename(::std::string* gamename);

  // required bool isMatch = 2;
  bool has_ismatch() const;
  void clear_ismatch();
  static const int kIsMatchFieldNumber = 2;
  bool ismatch() const;
  void set_ismatch(bool value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.GameSwitchSceneNtf)
 private:
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_ismatch();
  inline void clear_has_ismatch();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gamename_;
  bool ismatch_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static GameSwitchSceneNtf* default_instance_;
};
// -------------------------------------------------------------------

class GameStartNtf : public ::google::protobuf::Message {
 public:
  GameStartNtf();
  virtual ~GameStartNtf();

  GameStartNtf(const GameStartNtf& from);

  inline GameStartNtf& operator=(const GameStartNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStartNtf& default_instance();

  void Swap(GameStartNtf* other);

  // implements Message ----------------------------------------------

  inline GameStartNtf* New() const { return New(NULL); }

  GameStartNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStartNtf& from);
  void MergeFrom(const GameStartNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameStartNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gameName = 1;
  bool has_gamename() const;
  void clear_gamename();
  static const int kGameNameFieldNumber = 1;
  const ::std::string& gamename() const;
  void set_gamename(const ::std::string& value);
  void set_gamename(const char* value);
  void set_gamename(const char* value, size_t size);
  ::std::string* mutable_gamename();
  ::std::string* release_gamename();
  void set_allocated_gamename(::std::string* gamename);

  // required int32 basicScore = 2;
  bool has_basicscore() const;
  void clear_basicscore();
  static const int kBasicScoreFieldNumber = 2;
  ::google::protobuf::int32 basicscore() const;
  void set_basicscore(::google::protobuf::int32 value);

  // repeated .PBGameDDZ.UserInfo userinfo = 3;
  int userinfo_size() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 3;
  const ::PBGameDDZ::UserInfo& userinfo(int index) const;
  ::PBGameDDZ::UserInfo* mutable_userinfo(int index);
  ::PBGameDDZ::UserInfo* add_userinfo();
  ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::UserInfo >*
      mutable_userinfo();
  const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::UserInfo >&
      userinfo() const;

  // optional .PBGameDDZ.MatchInfo matchInfo = 4;
  bool has_matchinfo() const;
  void clear_matchinfo();
  static const int kMatchInfoFieldNumber = 4;
  const ::PBGameDDZ::MatchInfo& matchinfo() const;
  ::PBGameDDZ::MatchInfo* mutable_matchinfo();
  ::PBGameDDZ::MatchInfo* release_matchinfo();
  void set_allocated_matchinfo(::PBGameDDZ::MatchInfo* matchinfo);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.GameStartNtf)
 private:
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_basicscore();
  inline void clear_has_basicscore();
  inline void set_has_matchinfo();
  inline void clear_has_matchinfo();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gamename_;
  ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::UserInfo > userinfo_;
  ::PBGameDDZ::MatchInfo* matchinfo_;
  ::google::protobuf::int32 basicscore_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static GameStartNtf* default_instance_;
};
// -------------------------------------------------------------------

class DealCardNtf : public ::google::protobuf::Message {
 public:
  DealCardNtf();
  virtual ~DealCardNtf();

  DealCardNtf(const DealCardNtf& from);

  inline DealCardNtf& operator=(const DealCardNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DealCardNtf& default_instance();

  void Swap(DealCardNtf* other);

  // implements Message ----------------------------------------------

  inline DealCardNtf* New() const { return New(NULL); }

  DealCardNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DealCardNtf& from);
  void MergeFrom(const DealCardNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DealCardNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 headerseat = 1;
  bool has_headerseat() const;
  void clear_headerseat();
  static const int kHeaderseatFieldNumber = 1;
  ::google::protobuf::int32 headerseat() const;
  void set_headerseat(::google::protobuf::int32 value);

  // repeated .PBGameDDZ.HandCardList cards = 2;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 2;
  const ::PBGameDDZ::HandCardList& cards(int index) const;
  ::PBGameDDZ::HandCardList* mutable_cards(int index);
  ::PBGameDDZ::HandCardList* add_cards();
  ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::HandCardList >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::HandCardList >&
      cards() const;

  // @@protoc_insertion_point(class_scope:PBGameDDZ.DealCardNtf)
 private:
  inline void set_has_headerseat();
  inline void clear_has_headerseat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::HandCardList > cards_;
  ::google::protobuf::int32 headerseat_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static DealCardNtf* default_instance_;
};
// -------------------------------------------------------------------

class UserCallScoreNtf : public ::google::protobuf::Message {
 public:
  UserCallScoreNtf();
  virtual ~UserCallScoreNtf();

  UserCallScoreNtf(const UserCallScoreNtf& from);

  inline UserCallScoreNtf& operator=(const UserCallScoreNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCallScoreNtf& default_instance();

  void Swap(UserCallScoreNtf* other);

  // implements Message ----------------------------------------------

  inline UserCallScoreNtf* New() const { return New(NULL); }

  UserCallScoreNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserCallScoreNtf& from);
  void MergeFrom(const UserCallScoreNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserCallScoreNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatno = 1;
  bool has_seatno() const;
  void clear_seatno();
  static const int kSeatnoFieldNumber = 1;
  ::google::protobuf::int32 seatno() const;
  void set_seatno(::google::protobuf::int32 value);

  // required int32 seatnext = 2 [default = -1];
  bool has_seatnext() const;
  void clear_seatnext();
  static const int kSeatnextFieldNumber = 2;
  ::google::protobuf::int32 seatnext() const;
  void set_seatnext(::google::protobuf::int32 value);

  // required int32 score = 3;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.UserCallScoreNtf)
 private:
  inline void set_has_seatno();
  inline void clear_has_seatno();
  inline void set_has_seatnext();
  inline void clear_has_seatnext();
  inline void set_has_score();
  inline void clear_has_score();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatno_;
  ::google::protobuf::int32 seatnext_;
  ::google::protobuf::int32 score_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static UserCallScoreNtf* default_instance_;
};
// -------------------------------------------------------------------

class LordSetNtf : public ::google::protobuf::Message {
 public:
  LordSetNtf();
  virtual ~LordSetNtf();

  LordSetNtf(const LordSetNtf& from);

  inline LordSetNtf& operator=(const LordSetNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LordSetNtf& default_instance();

  void Swap(LordSetNtf* other);

  // implements Message ----------------------------------------------

  inline LordSetNtf* New() const { return New(NULL); }

  LordSetNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LordSetNtf& from);
  void MergeFrom(const LordSetNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LordSetNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatlord = 1;
  bool has_seatlord() const;
  void clear_seatlord();
  static const int kSeatlordFieldNumber = 1;
  ::google::protobuf::int32 seatlord() const;
  void set_seatlord(::google::protobuf::int32 value);

  // required int32 callscore = 2;
  bool has_callscore() const;
  void clear_callscore();
  static const int kCallscoreFieldNumber = 2;
  ::google::protobuf::int32 callscore() const;
  void set_callscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.LordSetNtf)
 private:
  inline void set_has_seatlord();
  inline void clear_has_seatlord();
  inline void set_has_callscore();
  inline void clear_has_callscore();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatlord_;
  ::google::protobuf::int32 callscore_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static LordSetNtf* default_instance_;
};
// -------------------------------------------------------------------

class SendBaseCardNtf : public ::google::protobuf::Message {
 public:
  SendBaseCardNtf();
  virtual ~SendBaseCardNtf();

  SendBaseCardNtf(const SendBaseCardNtf& from);

  inline SendBaseCardNtf& operator=(const SendBaseCardNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendBaseCardNtf& default_instance();

  void Swap(SendBaseCardNtf* other);

  // implements Message ----------------------------------------------

  inline SendBaseCardNtf* New() const { return New(NULL); }

  SendBaseCardNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendBaseCardNtf& from);
  void MergeFrom(const SendBaseCardNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendBaseCardNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 basecards = 1;
  int basecards_size() const;
  void clear_basecards();
  static const int kBasecardsFieldNumber = 1;
  ::google::protobuf::int32 basecards(int index) const;
  void set_basecards(int index, ::google::protobuf::int32 value);
  void add_basecards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      basecards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_basecards();

  // @@protoc_insertion_point(class_scope:PBGameDDZ.SendBaseCardNtf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > basecards_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static SendBaseCardNtf* default_instance_;
};
// -------------------------------------------------------------------

class TakeoutCardNtf : public ::google::protobuf::Message {
 public:
  TakeoutCardNtf();
  virtual ~TakeoutCardNtf();

  TakeoutCardNtf(const TakeoutCardNtf& from);

  inline TakeoutCardNtf& operator=(const TakeoutCardNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeoutCardNtf& default_instance();

  void Swap(TakeoutCardNtf* other);

  // implements Message ----------------------------------------------

  inline TakeoutCardNtf* New() const { return New(NULL); }

  TakeoutCardNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeoutCardNtf& from);
  void MergeFrom(const TakeoutCardNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TakeoutCardNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatno = 1;
  bool has_seatno() const;
  void clear_seatno();
  static const int kSeatnoFieldNumber = 1;
  ::google::protobuf::int32 seatno() const;
  void set_seatno(::google::protobuf::int32 value);

  // required int32 seatnext = 2;
  bool has_seatnext() const;
  void clear_seatnext();
  static const int kSeatnextFieldNumber = 2;
  ::google::protobuf::int32 seatnext() const;
  void set_seatnext(::google::protobuf::int32 value);

  // repeated int32 cards = 3;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 3;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // required int32 cardtype = 4;
  bool has_cardtype() const;
  void clear_cardtype();
  static const int kCardtypeFieldNumber = 4;
  ::google::protobuf::int32 cardtype() const;
  void set_cardtype(::google::protobuf::int32 value);

  // required int32 multiple = 5;
  bool has_multiple() const;
  void clear_multiple();
  static const int kMultipleFieldNumber = 5;
  ::google::protobuf::int32 multiple() const;
  void set_multiple(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TakeoutCardNtf)
 private:
  inline void set_has_seatno();
  inline void clear_has_seatno();
  inline void set_has_seatnext();
  inline void clear_has_seatnext();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();
  inline void set_has_multiple();
  inline void clear_has_multiple();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatno_;
  ::google::protobuf::int32 seatnext_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 multiple_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TakeoutCardNtf* default_instance_;
};
// -------------------------------------------------------------------

class TrustNtf : public ::google::protobuf::Message {
 public:
  TrustNtf();
  virtual ~TrustNtf();

  TrustNtf(const TrustNtf& from);

  inline TrustNtf& operator=(const TrustNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustNtf& default_instance();

  void Swap(TrustNtf* other);

  // implements Message ----------------------------------------------

  inline TrustNtf* New() const { return New(NULL); }

  TrustNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustNtf& from);
  void MergeFrom(const TrustNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatno = 1;
  bool has_seatno() const;
  void clear_seatno();
  static const int kSeatnoFieldNumber = 1;
  ::google::protobuf::int32 seatno() const;
  void set_seatno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TrustNtf)
 private:
  inline void set_has_seatno();
  inline void clear_has_seatno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatno_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TrustNtf* default_instance_;
};
// -------------------------------------------------------------------

class TrustLiftNtf : public ::google::protobuf::Message {
 public:
  TrustLiftNtf();
  virtual ~TrustLiftNtf();

  TrustLiftNtf(const TrustLiftNtf& from);

  inline TrustLiftNtf& operator=(const TrustLiftNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustLiftNtf& default_instance();

  void Swap(TrustLiftNtf* other);

  // implements Message ----------------------------------------------

  inline TrustLiftNtf* New() const { return New(NULL); }

  TrustLiftNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustLiftNtf& from);
  void MergeFrom(const TrustLiftNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustLiftNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatno = 1;
  bool has_seatno() const;
  void clear_seatno();
  static const int kSeatnoFieldNumber = 1;
  ::google::protobuf::int32 seatno() const;
  void set_seatno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.TrustLiftNtf)
 private:
  inline void set_has_seatno();
  inline void clear_has_seatno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatno_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static TrustLiftNtf* default_instance_;
};
// -------------------------------------------------------------------

class GameOverNtf : public ::google::protobuf::Message {
 public:
  GameOverNtf();
  virtual ~GameOverNtf();

  GameOverNtf(const GameOverNtf& from);

  inline GameOverNtf& operator=(const GameOverNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOverNtf& default_instance();

  void Swap(GameOverNtf* other);

  // implements Message ----------------------------------------------

  inline GameOverNtf* New() const { return New(NULL); }

  GameOverNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOverNtf& from);
  void MergeFrom(const GameOverNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameOverNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reason = 1 [default = 2];
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::google::protobuf::int32 reason() const;
  void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.GameOverNtf)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 reason_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static GameOverNtf* default_instance_;
};
// -------------------------------------------------------------------

class ActTimeoutNtf : public ::google::protobuf::Message {
 public:
  ActTimeoutNtf();
  virtual ~ActTimeoutNtf();

  ActTimeoutNtf(const ActTimeoutNtf& from);

  inline ActTimeoutNtf& operator=(const ActTimeoutNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActTimeoutNtf& default_instance();

  void Swap(ActTimeoutNtf* other);

  // implements Message ----------------------------------------------

  inline ActTimeoutNtf* New() const { return New(NULL); }

  ActTimeoutNtf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActTimeoutNtf& from);
  void MergeFrom(const ActTimeoutNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActTimeoutNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ready = 1;
  bool has_ready() const;
  void clear_ready();
  static const int kReadyFieldNumber = 1;
  ::google::protobuf::int32 ready() const;
  void set_ready(::google::protobuf::int32 value);

  // required int32 callscore = 2;
  bool has_callscore() const;
  void clear_callscore();
  static const int kCallscoreFieldNumber = 2;
  ::google::protobuf::int32 callscore() const;
  void set_callscore(::google::protobuf::int32 value);

  // required int32 takeout = 3;
  bool has_takeout() const;
  void clear_takeout();
  static const int kTakeoutFieldNumber = 3;
  ::google::protobuf::int32 takeout() const;
  void set_takeout(::google::protobuf::int32 value);

  // required int32 settle = 4;
  bool has_settle() const;
  void clear_settle();
  static const int kSettleFieldNumber = 4;
  ::google::protobuf::int32 settle() const;
  void set_settle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBGameDDZ.ActTimeoutNtf)
 private:
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_callscore();
  inline void clear_has_callscore();
  inline void set_has_takeout();
  inline void clear_has_takeout();
  inline void set_has_settle();
  inline void clear_has_settle();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::int32 callscore_;
  ::google::protobuf::int32 takeout_;
  ::google::protobuf::int32 settle_;
  friend void  protobuf_AddDesc_PBGameDDZ_2eproto();
  friend void protobuf_AssignDesc_PBGameDDZ_2eproto();
  friend void protobuf_ShutdownFile_PBGameDDZ_2eproto();

  void InitAsDefaultInstance();
  static ActTimeoutNtf* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// required string username = 1;
inline bool UserInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.username)
}
inline void UserInfo::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.UserInfo.username)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.UserInfo.username)
}
inline ::std::string* UserInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.UserInfo.username)
}

// required string nickname = 2;
inline bool UserInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& UserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.nickname)
}
inline void UserInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.UserInfo.nickname)
}
inline void UserInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.UserInfo.nickname)
}
inline ::std::string* UserInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.UserInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.UserInfo.nickname)
}

// required int32 avataType = 3;
inline bool UserInfo::has_avatatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_avatatype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_avatatype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_avatatype() {
  avatatype_ = 0;
  clear_has_avatatype();
}
inline ::google::protobuf::int32 UserInfo::avatatype() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.avataType)
  return avatatype_;
}
inline void UserInfo::set_avatatype(::google::protobuf::int32 value) {
  set_has_avatatype();
  avatatype_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.avataType)
}

// required string avataId = 4;
inline bool UserInfo::has_avataid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_avataid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_avataid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_avataid() {
  avataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avataid();
}
inline const ::std::string& UserInfo::avataid() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.avataId)
  return avataid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_avataid(const ::std::string& value) {
  set_has_avataid();
  avataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.avataId)
}
inline void UserInfo::set_avataid(const char* value) {
  set_has_avataid();
  avataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.UserInfo.avataId)
}
inline void UserInfo::set_avataid(const char* value, size_t size) {
  set_has_avataid();
  avataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.UserInfo.avataId)
}
inline ::std::string* UserInfo::mutable_avataid() {
  set_has_avataid();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.UserInfo.avataId)
  return avataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_avataid() {
  clear_has_avataid();
  return avataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_avataid(::std::string* avataid) {
  if (avataid != NULL) {
    set_has_avataid();
  } else {
    clear_has_avataid();
  }
  avataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avataid);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.UserInfo.avataId)
}

// required int32 sex = 5;
inline bool UserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.sex)
  return sex_;
}
inline void UserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.sex)
}

// required int64 coins = 6;
inline bool UserInfo::has_coins() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_coins() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_coins() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_coins() {
  coins_ = GOOGLE_LONGLONG(0);
  clear_has_coins();
}
inline ::google::protobuf::int64 UserInfo::coins() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.coins)
  return coins_;
}
inline void UserInfo::set_coins(::google::protobuf::int64 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.coins)
}

// required int64 vipPoints = 7;
inline bool UserInfo::has_vippoints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_vippoints() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_vippoints() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_vippoints() {
  vippoints_ = GOOGLE_LONGLONG(0);
  clear_has_vippoints();
}
inline ::google::protobuf::int64 UserInfo::vippoints() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.vipPoints)
  return vippoints_;
}
inline void UserInfo::set_vippoints(::google::protobuf::int64 value) {
  set_has_vippoints();
  vippoints_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.vipPoints)
}

// optional int64 exp = 8;
inline bool UserInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 UserInfo::exp() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.exp)
  return exp_;
}
inline void UserInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.exp)
}

// optional int32 innings = 9;
inline bool UserInfo::has_innings() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_innings() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_innings() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_innings() {
  innings_ = 0;
  clear_has_innings();
}
inline ::google::protobuf::int32 UserInfo::innings() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.innings)
  return innings_;
}
inline void UserInfo::set_innings(::google::protobuf::int32 value) {
  set_has_innings();
  innings_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.innings)
}

// optional int32 winInnings = 10;
inline bool UserInfo::has_wininnings() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_wininnings() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_wininnings() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_wininnings() {
  wininnings_ = 0;
  clear_has_wininnings();
}
inline ::google::protobuf::int32 UserInfo::wininnings() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.winInnings)
  return wininnings_;
}
inline void UserInfo::set_wininnings(::google::protobuf::int32 value) {
  set_has_wininnings();
  wininnings_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.winInnings)
}

// optional int32 place = 11;
inline bool UserInfo::has_place() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::set_has_place() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfo::clear_has_place() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfo::clear_place() {
  place_ = 0;
  clear_has_place();
}
inline ::google::protobuf::int32 UserInfo::place() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserInfo.place)
  return place_;
}
inline void UserInfo::set_place(::google::protobuf::int32 value) {
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserInfo.place)
}

// -------------------------------------------------------------------

// MatchInfo

// required int32 stageNum = 1;
inline bool MatchInfo::has_stagenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchInfo::set_has_stagenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchInfo::clear_has_stagenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchInfo::clear_stagenum() {
  stagenum_ = 0;
  clear_has_stagenum();
}
inline ::google::protobuf::int32 MatchInfo::stagenum() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.MatchInfo.stageNum)
  return stagenum_;
}
inline void MatchInfo::set_stagenum(::google::protobuf::int32 value) {
  set_has_stagenum();
  stagenum_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.MatchInfo.stageNum)
}

// required int32 inningNum = 2;
inline bool MatchInfo::has_inningnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchInfo::set_has_inningnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchInfo::clear_has_inningnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchInfo::clear_inningnum() {
  inningnum_ = 0;
  clear_has_inningnum();
}
inline ::google::protobuf::int32 MatchInfo::inningnum() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.MatchInfo.inningNum)
  return inningnum_;
}
inline void MatchInfo::set_inningnum(::google::protobuf::int32 value) {
  set_has_inningnum();
  inningnum_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.MatchInfo.inningNum)
}

// required int32 userCount = 3;
inline bool MatchInfo::has_usercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchInfo::set_has_usercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchInfo::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchInfo::clear_usercount() {
  usercount_ = 0;
  clear_has_usercount();
}
inline ::google::protobuf::int32 MatchInfo::usercount() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.MatchInfo.userCount)
  return usercount_;
}
inline void MatchInfo::set_usercount(::google::protobuf::int32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.MatchInfo.userCount)
}

// -------------------------------------------------------------------

// HandCardList

// repeated int32 cards = 1;
inline int HandCardList::cards_size() const {
  return cards_.size();
}
inline void HandCardList::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 HandCardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.HandCardList.cards)
  return cards_.Get(index);
}
inline void HandCardList::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.HandCardList.cards)
}
inline void HandCardList::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.HandCardList.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HandCardList::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.HandCardList.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HandCardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.HandCardList.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// TableCardList

// repeated int32 cards = 1;
inline int TableCardList::cards_size() const {
  return cards_.size();
}
inline void TableCardList::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 TableCardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TableCardList.cards)
  return cards_.Get(index);
}
inline void TableCardList::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.TableCardList.cards)
}
inline void TableCardList::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.TableCardList.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TableCardList::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.TableCardList.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TableCardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.TableCardList.cards)
  return &cards_;
}

// required int32 type = 2;
inline bool TableCardList::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableCardList::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableCardList::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableCardList::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TableCardList::type() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TableCardList.type)
  return type_;
}
inline void TableCardList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TableCardList.type)
}

// -------------------------------------------------------------------

// ReadyReq

// required int32 rev = 1;
inline bool ReadyReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadyReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadyReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadyReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
inline ::google::protobuf::int32 ReadyReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ReadyReq.rev)
  return rev_;
}
inline void ReadyReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ReadyReq.rev)
}

// -------------------------------------------------------------------

// ReadyAck

// required int32 result = 1;
inline bool ReadyAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadyAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadyAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadyAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ReadyAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ReadyAck.result)
  return result_;
}
inline void ReadyAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ReadyAck.result)
}

// -------------------------------------------------------------------

// CallScoreReq

// required int32 score = 1;
inline bool CallScoreReq::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallScoreReq::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallScoreReq::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallScoreReq::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 CallScoreReq::score() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.CallScoreReq.score)
  return score_;
}
inline void CallScoreReq::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.CallScoreReq.score)
}

// -------------------------------------------------------------------

// CallScoreAck

// required int32 result = 1;
inline bool CallScoreAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallScoreAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallScoreAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallScoreAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CallScoreAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.CallScoreAck.result)
  return result_;
}
inline void CallScoreAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.CallScoreAck.result)
}

// -------------------------------------------------------------------

// TakeoutCardReq

// repeated int32 cards = 1;
inline int TakeoutCardReq::cards_size() const {
  return cards_.size();
}
inline void TakeoutCardReq::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 TakeoutCardReq::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardReq.cards)
  return cards_.Get(index);
}
inline void TakeoutCardReq::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardReq.cards)
}
inline void TakeoutCardReq::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.TakeoutCardReq.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TakeoutCardReq::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.TakeoutCardReq.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TakeoutCardReq::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.TakeoutCardReq.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// TakeoutCardAck

// required int32 result = 1;
inline bool TakeoutCardAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeoutCardAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeoutCardAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeoutCardAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TakeoutCardAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardAck.result)
  return result_;
}
inline void TakeoutCardAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardAck.result)
}

// -------------------------------------------------------------------

// TrustReq

// required int32 rev = 1;
inline bool TrustReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
inline ::google::protobuf::int32 TrustReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustReq.rev)
  return rev_;
}
inline void TrustReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustReq.rev)
}

// -------------------------------------------------------------------

// TrustAck

// required int32 result = 1;
inline bool TrustAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrustAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustAck.result)
  return result_;
}
inline void TrustAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustAck.result)
}

// optional int32 surplus = 2;
inline bool TrustAck::has_surplus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrustAck::set_has_surplus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrustAck::clear_has_surplus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrustAck::clear_surplus() {
  surplus_ = 0;
  clear_has_surplus();
}
inline ::google::protobuf::int32 TrustAck::surplus() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustAck.surplus)
  return surplus_;
}
inline void TrustAck::set_surplus(::google::protobuf::int32 value) {
  set_has_surplus();
  surplus_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustAck.surplus)
}

// -------------------------------------------------------------------

// TrustLiftReq

// required int32 rev = 1;
inline bool TrustLiftReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustLiftReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustLiftReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustLiftReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
inline ::google::protobuf::int32 TrustLiftReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustLiftReq.rev)
  return rev_;
}
inline void TrustLiftReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustLiftReq.rev)
}

// -------------------------------------------------------------------

// TrustLiftAck

// required int32 result = 1;
inline bool TrustLiftAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustLiftAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustLiftAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustLiftAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrustLiftAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustLiftAck.result)
  return result_;
}
inline void TrustLiftAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustLiftAck.result)
}

// -------------------------------------------------------------------

// KeepPlayingReq

// required int32 rev = 1;
inline bool KeepPlayingReq::has_rev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepPlayingReq::set_has_rev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepPlayingReq::clear_has_rev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepPlayingReq::clear_rev() {
  rev_ = 0;
  clear_has_rev();
}
inline ::google::protobuf::int32 KeepPlayingReq::rev() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingReq.rev)
  return rev_;
}
inline void KeepPlayingReq::set_rev(::google::protobuf::int32 value) {
  set_has_rev();
  rev_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingReq.rev)
}

// -------------------------------------------------------------------

// KeepPlayingAck_GameInfo

// required int32 status = 1;
inline bool KeepPlayingAck_GameInfo::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepPlayingAck_GameInfo::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepPlayingAck_GameInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepPlayingAck_GameInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 KeepPlayingAck_GameInfo::status() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.status)
  return status_;
}
inline void KeepPlayingAck_GameInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.status)
}

// required int32 seatlord = 2;
inline bool KeepPlayingAck_GameInfo::has_seatlord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeepPlayingAck_GameInfo::set_has_seatlord() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeepPlayingAck_GameInfo::clear_has_seatlord() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeepPlayingAck_GameInfo::clear_seatlord() {
  seatlord_ = 0;
  clear_has_seatlord();
}
inline ::google::protobuf::int32 KeepPlayingAck_GameInfo::seatlord() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.seatlord)
  return seatlord_;
}
inline void KeepPlayingAck_GameInfo::set_seatlord(::google::protobuf::int32 value) {
  set_has_seatlord();
  seatlord_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.seatlord)
}

// required int32 seatactive = 3;
inline bool KeepPlayingAck_GameInfo::has_seatactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeepPlayingAck_GameInfo::set_has_seatactive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeepPlayingAck_GameInfo::clear_has_seatactive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeepPlayingAck_GameInfo::clear_seatactive() {
  seatactive_ = 0;
  clear_has_seatactive();
}
inline ::google::protobuf::int32 KeepPlayingAck_GameInfo::seatactive() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.seatactive)
  return seatactive_;
}
inline void KeepPlayingAck_GameInfo::set_seatactive(::google::protobuf::int32 value) {
  set_has_seatactive();
  seatactive_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.seatactive)
}

// required int32 multiple = 4;
inline bool KeepPlayingAck_GameInfo::has_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeepPlayingAck_GameInfo::set_has_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeepPlayingAck_GameInfo::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeepPlayingAck_GameInfo::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline ::google::protobuf::int32 KeepPlayingAck_GameInfo::multiple() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.multiple)
  return multiple_;
}
inline void KeepPlayingAck_GameInfo::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.multiple)
}

// required int32 maxcallscore = 5;
inline bool KeepPlayingAck_GameInfo::has_maxcallscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeepPlayingAck_GameInfo::set_has_maxcallscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KeepPlayingAck_GameInfo::clear_has_maxcallscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KeepPlayingAck_GameInfo::clear_maxcallscore() {
  maxcallscore_ = 0;
  clear_has_maxcallscore();
}
inline ::google::protobuf::int32 KeepPlayingAck_GameInfo::maxcallscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.maxcallscore)
  return maxcallscore_;
}
inline void KeepPlayingAck_GameInfo::set_maxcallscore(::google::protobuf::int32 value) {
  set_has_maxcallscore();
  maxcallscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.maxcallscore)
}

// repeated int32 basecards = 6;
inline int KeepPlayingAck_GameInfo::basecards_size() const {
  return basecards_.size();
}
inline void KeepPlayingAck_GameInfo::clear_basecards() {
  basecards_.Clear();
}
inline ::google::protobuf::int32 KeepPlayingAck_GameInfo::basecards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
  return basecards_.Get(index);
}
inline void KeepPlayingAck_GameInfo::set_basecards(int index, ::google::protobuf::int32 value) {
  basecards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
}
inline void KeepPlayingAck_GameInfo::add_basecards(::google::protobuf::int32 value) {
  basecards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeepPlayingAck_GameInfo::basecards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
  return basecards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeepPlayingAck_GameInfo::mutable_basecards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.GameInfo.basecards)
  return &basecards_;
}

// -------------------------------------------------------------------

// KeepPlayingAck_PlayerInfo

// required bool trust = 1;
inline bool KeepPlayingAck_PlayerInfo::has_trust() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepPlayingAck_PlayerInfo::set_has_trust() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepPlayingAck_PlayerInfo::clear_has_trust() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepPlayingAck_PlayerInfo::clear_trust() {
  trust_ = false;
  clear_has_trust();
}
inline bool KeepPlayingAck_PlayerInfo::trust() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.trust)
  return trust_;
}
inline void KeepPlayingAck_PlayerInfo::set_trust(bool value) {
  set_has_trust();
  trust_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.trust)
}

// required int32 trustsurplus = 2;
inline bool KeepPlayingAck_PlayerInfo::has_trustsurplus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeepPlayingAck_PlayerInfo::set_has_trustsurplus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeepPlayingAck_PlayerInfo::clear_has_trustsurplus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeepPlayingAck_PlayerInfo::clear_trustsurplus() {
  trustsurplus_ = 0;
  clear_has_trustsurplus();
}
inline ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::trustsurplus() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.trustsurplus)
  return trustsurplus_;
}
inline void KeepPlayingAck_PlayerInfo::set_trustsurplus(::google::protobuf::int32 value) {
  set_has_trustsurplus();
  trustsurplus_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.trustsurplus)
}

// required int32 callscore = 3;
inline bool KeepPlayingAck_PlayerInfo::has_callscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeepPlayingAck_PlayerInfo::set_has_callscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeepPlayingAck_PlayerInfo::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeepPlayingAck_PlayerInfo::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
inline ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.callscore)
  return callscore_;
}
inline void KeepPlayingAck_PlayerInfo::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.callscore)
}

// repeated int32 cards = 4;
inline int KeepPlayingAck_PlayerInfo::cards_size() const {
  return cards_.size();
}
inline void KeepPlayingAck_PlayerInfo::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
  return cards_.Get(index);
}
inline void KeepPlayingAck_PlayerInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
}
inline void KeepPlayingAck_PlayerInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeepPlayingAck_PlayerInfo::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeepPlayingAck_PlayerInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.cards)
  return &cards_;
}

// repeated int32 lastcards = 5;
inline int KeepPlayingAck_PlayerInfo::lastcards_size() const {
  return lastcards_.size();
}
inline void KeepPlayingAck_PlayerInfo::clear_lastcards() {
  lastcards_.Clear();
}
inline ::google::protobuf::int32 KeepPlayingAck_PlayerInfo::lastcards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
  return lastcards_.Get(index);
}
inline void KeepPlayingAck_PlayerInfo::set_lastcards(int index, ::google::protobuf::int32 value) {
  lastcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
}
inline void KeepPlayingAck_PlayerInfo::add_lastcards(::google::protobuf::int32 value) {
  lastcards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeepPlayingAck_PlayerInfo::lastcards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
  return lastcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeepPlayingAck_PlayerInfo::mutable_lastcards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.PlayerInfo.lastcards)
  return &lastcards_;
}

// required .PBGameDDZ.UserInfo detailinfo = 6;
inline bool KeepPlayingAck_PlayerInfo::has_detailinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KeepPlayingAck_PlayerInfo::set_has_detailinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KeepPlayingAck_PlayerInfo::clear_has_detailinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KeepPlayingAck_PlayerInfo::clear_detailinfo() {
  if (detailinfo_ != NULL) detailinfo_->::PBGameDDZ::UserInfo::Clear();
  clear_has_detailinfo();
}
inline const ::PBGameDDZ::UserInfo& KeepPlayingAck_PlayerInfo::detailinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.PlayerInfo.detailinfo)
  return detailinfo_ != NULL ? *detailinfo_ : *default_instance_->detailinfo_;
}
inline ::PBGameDDZ::UserInfo* KeepPlayingAck_PlayerInfo::mutable_detailinfo() {
  set_has_detailinfo();
  if (detailinfo_ == NULL) {
    detailinfo_ = new ::PBGameDDZ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.PlayerInfo.detailinfo)
  return detailinfo_;
}
inline ::PBGameDDZ::UserInfo* KeepPlayingAck_PlayerInfo::release_detailinfo() {
  clear_has_detailinfo();
  ::PBGameDDZ::UserInfo* temp = detailinfo_;
  detailinfo_ = NULL;
  return temp;
}
inline void KeepPlayingAck_PlayerInfo::set_allocated_detailinfo(::PBGameDDZ::UserInfo* detailinfo) {
  delete detailinfo_;
  detailinfo_ = detailinfo;
  if (detailinfo) {
    set_has_detailinfo();
  } else {
    clear_has_detailinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.PlayerInfo.detailinfo)
}

// -------------------------------------------------------------------

// KeepPlayingAck

// required int32 result = 1;
inline bool KeepPlayingAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepPlayingAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepPlayingAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepPlayingAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 KeepPlayingAck::result() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.result)
  return result_;
}
inline void KeepPlayingAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.result)
}

// required .PBGameDDZ.KeepPlayingAck.GameInfo gameinfo = 2;
inline bool KeepPlayingAck::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeepPlayingAck::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeepPlayingAck::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeepPlayingAck::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::PBGameDDZ::KeepPlayingAck_GameInfo::Clear();
  clear_has_gameinfo();
}
inline const ::PBGameDDZ::KeepPlayingAck_GameInfo& KeepPlayingAck::gameinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.gameinfo)
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
}
inline ::PBGameDDZ::KeepPlayingAck_GameInfo* KeepPlayingAck::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) {
    gameinfo_ = new ::PBGameDDZ::KeepPlayingAck_GameInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.gameinfo)
  return gameinfo_;
}
inline ::PBGameDDZ::KeepPlayingAck_GameInfo* KeepPlayingAck::release_gameinfo() {
  clear_has_gameinfo();
  ::PBGameDDZ::KeepPlayingAck_GameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
inline void KeepPlayingAck::set_allocated_gameinfo(::PBGameDDZ::KeepPlayingAck_GameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.gameinfo)
}

// repeated .PBGameDDZ.KeepPlayingAck.PlayerInfo playerinfo = 3;
inline int KeepPlayingAck::playerinfo_size() const {
  return playerinfo_.size();
}
inline void KeepPlayingAck::clear_playerinfo() {
  playerinfo_.Clear();
}
inline const ::PBGameDDZ::KeepPlayingAck_PlayerInfo& KeepPlayingAck::playerinfo(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_.Get(index);
}
inline ::PBGameDDZ::KeepPlayingAck_PlayerInfo* KeepPlayingAck::mutable_playerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_.Mutable(index);
}
inline ::PBGameDDZ::KeepPlayingAck_PlayerInfo* KeepPlayingAck::add_playerinfo() {
  // @@protoc_insertion_point(field_add:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::KeepPlayingAck_PlayerInfo >*
KeepPlayingAck::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.KeepPlayingAck.playerinfo)
  return &playerinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::KeepPlayingAck_PlayerInfo >&
KeepPlayingAck::playerinfo() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.KeepPlayingAck.playerinfo)
  return playerinfo_;
}

// required int32 ready = 4;
inline bool KeepPlayingAck::has_ready() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeepPlayingAck::set_has_ready() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeepPlayingAck::clear_has_ready() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeepPlayingAck::clear_ready() {
  ready_ = 0;
  clear_has_ready();
}
inline ::google::protobuf::int32 KeepPlayingAck::ready() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.ready)
  return ready_;
}
inline void KeepPlayingAck::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.ready)
}

// required int32 callscore = 5;
inline bool KeepPlayingAck::has_callscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeepPlayingAck::set_has_callscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KeepPlayingAck::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KeepPlayingAck::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
inline ::google::protobuf::int32 KeepPlayingAck::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.callscore)
  return callscore_;
}
inline void KeepPlayingAck::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.callscore)
}

// required int32 takeout = 6;
inline bool KeepPlayingAck::has_takeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KeepPlayingAck::set_has_takeout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KeepPlayingAck::clear_has_takeout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KeepPlayingAck::clear_takeout() {
  takeout_ = 0;
  clear_has_takeout();
}
inline ::google::protobuf::int32 KeepPlayingAck::takeout() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.takeout)
  return takeout_;
}
inline void KeepPlayingAck::set_takeout(::google::protobuf::int32 value) {
  set_has_takeout();
  takeout_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.takeout)
}

// required int32 settle = 7;
inline bool KeepPlayingAck::has_settle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KeepPlayingAck::set_has_settle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KeepPlayingAck::clear_has_settle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KeepPlayingAck::clear_settle() {
  settle_ = 0;
  clear_has_settle();
}
inline ::google::protobuf::int32 KeepPlayingAck::settle() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.settle)
  return settle_;
}
inline void KeepPlayingAck::set_settle(::google::protobuf::int32 value) {
  set_has_settle();
  settle_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.settle)
}

// required string gameChannel = 8;
inline bool KeepPlayingAck::has_gamechannel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KeepPlayingAck::set_has_gamechannel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KeepPlayingAck::clear_has_gamechannel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KeepPlayingAck::clear_gamechannel() {
  gamechannel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamechannel();
}
inline const ::std::string& KeepPlayingAck::gamechannel() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.gameChannel)
  return gamechannel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepPlayingAck::set_gamechannel(const ::std::string& value) {
  set_has_gamechannel();
  gamechannel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.gameChannel)
}
inline void KeepPlayingAck::set_gamechannel(const char* value) {
  set_has_gamechannel();
  gamechannel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.KeepPlayingAck.gameChannel)
}
inline void KeepPlayingAck::set_gamechannel(const char* value, size_t size) {
  set_has_gamechannel();
  gamechannel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.KeepPlayingAck.gameChannel)
}
inline ::std::string* KeepPlayingAck::mutable_gamechannel() {
  set_has_gamechannel();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.gameChannel)
  return gamechannel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeepPlayingAck::release_gamechannel() {
  clear_has_gamechannel();
  return gamechannel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepPlayingAck::set_allocated_gamechannel(::std::string* gamechannel) {
  if (gamechannel != NULL) {
    set_has_gamechannel();
  } else {
    clear_has_gamechannel();
  }
  gamechannel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamechannel);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.gameChannel)
}

// required int32 basicScore = 9;
inline bool KeepPlayingAck::has_basicscore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KeepPlayingAck::set_has_basicscore() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KeepPlayingAck::clear_has_basicscore() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KeepPlayingAck::clear_basicscore() {
  basicscore_ = 0;
  clear_has_basicscore();
}
inline ::google::protobuf::int32 KeepPlayingAck::basicscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.basicScore)
  return basicscore_;
}
inline void KeepPlayingAck::set_basicscore(::google::protobuf::int32 value) {
  set_has_basicscore();
  basicscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.KeepPlayingAck.basicScore)
}

// optional .PBGameDDZ.MatchInfo matchInfo = 10;
inline bool KeepPlayingAck::has_matchinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KeepPlayingAck::set_has_matchinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KeepPlayingAck::clear_has_matchinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KeepPlayingAck::clear_matchinfo() {
  if (matchinfo_ != NULL) matchinfo_->::PBGameDDZ::MatchInfo::Clear();
  clear_has_matchinfo();
}
inline const ::PBGameDDZ::MatchInfo& KeepPlayingAck::matchinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.KeepPlayingAck.matchInfo)
  return matchinfo_ != NULL ? *matchinfo_ : *default_instance_->matchinfo_;
}
inline ::PBGameDDZ::MatchInfo* KeepPlayingAck::mutable_matchinfo() {
  set_has_matchinfo();
  if (matchinfo_ == NULL) {
    matchinfo_ = new ::PBGameDDZ::MatchInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.KeepPlayingAck.matchInfo)
  return matchinfo_;
}
inline ::PBGameDDZ::MatchInfo* KeepPlayingAck::release_matchinfo() {
  clear_has_matchinfo();
  ::PBGameDDZ::MatchInfo* temp = matchinfo_;
  matchinfo_ = NULL;
  return temp;
}
inline void KeepPlayingAck::set_allocated_matchinfo(::PBGameDDZ::MatchInfo* matchinfo) {
  delete matchinfo_;
  matchinfo_ = matchinfo;
  if (matchinfo) {
    set_has_matchinfo();
  } else {
    clear_has_matchinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.KeepPlayingAck.matchInfo)
}

// -------------------------------------------------------------------

// GameStatusNtf

// required int32 status = 1;
inline bool GameStatusNtf::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStatusNtf::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStatusNtf::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStatusNtf::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GameStatusNtf::status() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStatusNtf.status)
  return status_;
}
inline void GameStatusNtf::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameStatusNtf.status)
}

// -------------------------------------------------------------------

// GameSwitchSceneNtf

// required string gameName = 1;
inline bool GameSwitchSceneNtf::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSwitchSceneNtf::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSwitchSceneNtf::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSwitchSceneNtf::clear_gamename() {
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamename();
}
inline const ::std::string& GameSwitchSceneNtf::gamename() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameSwitchSceneNtf.gameName)
  return gamename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSwitchSceneNtf::set_gamename(const ::std::string& value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameSwitchSceneNtf.gameName)
}
inline void GameSwitchSceneNtf::set_gamename(const char* value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.GameSwitchSceneNtf.gameName)
}
inline void GameSwitchSceneNtf::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.GameSwitchSceneNtf.gameName)
}
inline ::std::string* GameSwitchSceneNtf::mutable_gamename() {
  set_has_gamename();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameSwitchSceneNtf.gameName)
  return gamename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSwitchSceneNtf::release_gamename() {
  clear_has_gamename();
  return gamename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSwitchSceneNtf::set_allocated_gamename(::std::string* gamename) {
  if (gamename != NULL) {
    set_has_gamename();
  } else {
    clear_has_gamename();
  }
  gamename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamename);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.GameSwitchSceneNtf.gameName)
}

// required bool isMatch = 2;
inline bool GameSwitchSceneNtf::has_ismatch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSwitchSceneNtf::set_has_ismatch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSwitchSceneNtf::clear_has_ismatch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSwitchSceneNtf::clear_ismatch() {
  ismatch_ = false;
  clear_has_ismatch();
}
inline bool GameSwitchSceneNtf::ismatch() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameSwitchSceneNtf.isMatch)
  return ismatch_;
}
inline void GameSwitchSceneNtf::set_ismatch(bool value) {
  set_has_ismatch();
  ismatch_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameSwitchSceneNtf.isMatch)
}

// -------------------------------------------------------------------

// GameStartNtf

// required string gameName = 1;
inline bool GameStartNtf::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStartNtf::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStartNtf::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStartNtf::clear_gamename() {
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamename();
}
inline const ::std::string& GameStartNtf::gamename() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.gameName)
  return gamename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStartNtf::set_gamename(const ::std::string& value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameStartNtf.gameName)
}
inline void GameStartNtf::set_gamename(const char* value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBGameDDZ.GameStartNtf.gameName)
}
inline void GameStartNtf::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBGameDDZ.GameStartNtf.gameName)
}
inline ::std::string* GameStartNtf::mutable_gamename() {
  set_has_gamename();
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameStartNtf.gameName)
  return gamename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStartNtf::release_gamename() {
  clear_has_gamename();
  return gamename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStartNtf::set_allocated_gamename(::std::string* gamename) {
  if (gamename != NULL) {
    set_has_gamename();
  } else {
    clear_has_gamename();
  }
  gamename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamename);
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.GameStartNtf.gameName)
}

// required int32 basicScore = 2;
inline bool GameStartNtf::has_basicscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStartNtf::set_has_basicscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStartNtf::clear_has_basicscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStartNtf::clear_basicscore() {
  basicscore_ = 0;
  clear_has_basicscore();
}
inline ::google::protobuf::int32 GameStartNtf::basicscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.basicScore)
  return basicscore_;
}
inline void GameStartNtf::set_basicscore(::google::protobuf::int32 value) {
  set_has_basicscore();
  basicscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameStartNtf.basicScore)
}

// repeated .PBGameDDZ.UserInfo userinfo = 3;
inline int GameStartNtf::userinfo_size() const {
  return userinfo_.size();
}
inline void GameStartNtf::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::PBGameDDZ::UserInfo& GameStartNtf::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_.Get(index);
}
inline ::PBGameDDZ::UserInfo* GameStartNtf::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_.Mutable(index);
}
inline ::PBGameDDZ::UserInfo* GameStartNtf::add_userinfo() {
  // @@protoc_insertion_point(field_add:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::UserInfo >*
GameStartNtf::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.GameStartNtf.userinfo)
  return &userinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::UserInfo >&
GameStartNtf::userinfo() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.GameStartNtf.userinfo)
  return userinfo_;
}

// optional .PBGameDDZ.MatchInfo matchInfo = 4;
inline bool GameStartNtf::has_matchinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameStartNtf::set_has_matchinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameStartNtf::clear_has_matchinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameStartNtf::clear_matchinfo() {
  if (matchinfo_ != NULL) matchinfo_->::PBGameDDZ::MatchInfo::Clear();
  clear_has_matchinfo();
}
inline const ::PBGameDDZ::MatchInfo& GameStartNtf::matchinfo() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameStartNtf.matchInfo)
  return matchinfo_ != NULL ? *matchinfo_ : *default_instance_->matchinfo_;
}
inline ::PBGameDDZ::MatchInfo* GameStartNtf::mutable_matchinfo() {
  set_has_matchinfo();
  if (matchinfo_ == NULL) {
    matchinfo_ = new ::PBGameDDZ::MatchInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.GameStartNtf.matchInfo)
  return matchinfo_;
}
inline ::PBGameDDZ::MatchInfo* GameStartNtf::release_matchinfo() {
  clear_has_matchinfo();
  ::PBGameDDZ::MatchInfo* temp = matchinfo_;
  matchinfo_ = NULL;
  return temp;
}
inline void GameStartNtf::set_allocated_matchinfo(::PBGameDDZ::MatchInfo* matchinfo) {
  delete matchinfo_;
  matchinfo_ = matchinfo;
  if (matchinfo) {
    set_has_matchinfo();
  } else {
    clear_has_matchinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PBGameDDZ.GameStartNtf.matchInfo)
}

// -------------------------------------------------------------------

// DealCardNtf

// required int32 headerseat = 1;
inline bool DealCardNtf::has_headerseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DealCardNtf::set_has_headerseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DealCardNtf::clear_has_headerseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DealCardNtf::clear_headerseat() {
  headerseat_ = 0;
  clear_has_headerseat();
}
inline ::google::protobuf::int32 DealCardNtf::headerseat() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.DealCardNtf.headerseat)
  return headerseat_;
}
inline void DealCardNtf::set_headerseat(::google::protobuf::int32 value) {
  set_has_headerseat();
  headerseat_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.DealCardNtf.headerseat)
}

// repeated .PBGameDDZ.HandCardList cards = 2;
inline int DealCardNtf::cards_size() const {
  return cards_.size();
}
inline void DealCardNtf::clear_cards() {
  cards_.Clear();
}
inline const ::PBGameDDZ::HandCardList& DealCardNtf::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.DealCardNtf.cards)
  return cards_.Get(index);
}
inline ::PBGameDDZ::HandCardList* DealCardNtf::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:PBGameDDZ.DealCardNtf.cards)
  return cards_.Mutable(index);
}
inline ::PBGameDDZ::HandCardList* DealCardNtf::add_cards() {
  // @@protoc_insertion_point(field_add:PBGameDDZ.DealCardNtf.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::HandCardList >*
DealCardNtf::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.DealCardNtf.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGameDDZ::HandCardList >&
DealCardNtf::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.DealCardNtf.cards)
  return cards_;
}

// -------------------------------------------------------------------

// UserCallScoreNtf

// required int32 seatno = 1;
inline bool UserCallScoreNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCallScoreNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCallScoreNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCallScoreNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
inline ::google::protobuf::int32 UserCallScoreNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserCallScoreNtf.seatno)
  return seatno_;
}
inline void UserCallScoreNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserCallScoreNtf.seatno)
}

// required int32 seatnext = 2 [default = -1];
inline bool UserCallScoreNtf::has_seatnext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCallScoreNtf::set_has_seatnext() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCallScoreNtf::clear_has_seatnext() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCallScoreNtf::clear_seatnext() {
  seatnext_ = -1;
  clear_has_seatnext();
}
inline ::google::protobuf::int32 UserCallScoreNtf::seatnext() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserCallScoreNtf.seatnext)
  return seatnext_;
}
inline void UserCallScoreNtf::set_seatnext(::google::protobuf::int32 value) {
  set_has_seatnext();
  seatnext_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserCallScoreNtf.seatnext)
}

// required int32 score = 3;
inline bool UserCallScoreNtf::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserCallScoreNtf::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserCallScoreNtf::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserCallScoreNtf::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 UserCallScoreNtf::score() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.UserCallScoreNtf.score)
  return score_;
}
inline void UserCallScoreNtf::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.UserCallScoreNtf.score)
}

// -------------------------------------------------------------------

// LordSetNtf

// required int32 seatlord = 1;
inline bool LordSetNtf::has_seatlord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LordSetNtf::set_has_seatlord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LordSetNtf::clear_has_seatlord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LordSetNtf::clear_seatlord() {
  seatlord_ = 0;
  clear_has_seatlord();
}
inline ::google::protobuf::int32 LordSetNtf::seatlord() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.LordSetNtf.seatlord)
  return seatlord_;
}
inline void LordSetNtf::set_seatlord(::google::protobuf::int32 value) {
  set_has_seatlord();
  seatlord_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.LordSetNtf.seatlord)
}

// required int32 callscore = 2;
inline bool LordSetNtf::has_callscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LordSetNtf::set_has_callscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LordSetNtf::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LordSetNtf::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
inline ::google::protobuf::int32 LordSetNtf::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.LordSetNtf.callscore)
  return callscore_;
}
inline void LordSetNtf::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.LordSetNtf.callscore)
}

// -------------------------------------------------------------------

// SendBaseCardNtf

// repeated int32 basecards = 1;
inline int SendBaseCardNtf::basecards_size() const {
  return basecards_.size();
}
inline void SendBaseCardNtf::clear_basecards() {
  basecards_.Clear();
}
inline ::google::protobuf::int32 SendBaseCardNtf::basecards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.SendBaseCardNtf.basecards)
  return basecards_.Get(index);
}
inline void SendBaseCardNtf::set_basecards(int index, ::google::protobuf::int32 value) {
  basecards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.SendBaseCardNtf.basecards)
}
inline void SendBaseCardNtf::add_basecards(::google::protobuf::int32 value) {
  basecards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.SendBaseCardNtf.basecards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SendBaseCardNtf::basecards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.SendBaseCardNtf.basecards)
  return basecards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SendBaseCardNtf::mutable_basecards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.SendBaseCardNtf.basecards)
  return &basecards_;
}

// -------------------------------------------------------------------

// TakeoutCardNtf

// required int32 seatno = 1;
inline bool TakeoutCardNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeoutCardNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeoutCardNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeoutCardNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
inline ::google::protobuf::int32 TakeoutCardNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.seatno)
  return seatno_;
}
inline void TakeoutCardNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.seatno)
}

// required int32 seatnext = 2;
inline bool TakeoutCardNtf::has_seatnext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeoutCardNtf::set_has_seatnext() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeoutCardNtf::clear_has_seatnext() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeoutCardNtf::clear_seatnext() {
  seatnext_ = 0;
  clear_has_seatnext();
}
inline ::google::protobuf::int32 TakeoutCardNtf::seatnext() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.seatnext)
  return seatnext_;
}
inline void TakeoutCardNtf::set_seatnext(::google::protobuf::int32 value) {
  set_has_seatnext();
  seatnext_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.seatnext)
}

// repeated int32 cards = 3;
inline int TakeoutCardNtf::cards_size() const {
  return cards_.size();
}
inline void TakeoutCardNtf::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 TakeoutCardNtf::cards(int index) const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.cards)
  return cards_.Get(index);
}
inline void TakeoutCardNtf::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.cards)
}
inline void TakeoutCardNtf::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:PBGameDDZ.TakeoutCardNtf.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TakeoutCardNtf::cards() const {
  // @@protoc_insertion_point(field_list:PBGameDDZ.TakeoutCardNtf.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TakeoutCardNtf::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:PBGameDDZ.TakeoutCardNtf.cards)
  return &cards_;
}

// required int32 cardtype = 4;
inline bool TakeoutCardNtf::has_cardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TakeoutCardNtf::set_has_cardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TakeoutCardNtf::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TakeoutCardNtf::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 TakeoutCardNtf::cardtype() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.cardtype)
  return cardtype_;
}
inline void TakeoutCardNtf::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.cardtype)
}

// required int32 multiple = 5;
inline bool TakeoutCardNtf::has_multiple() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TakeoutCardNtf::set_has_multiple() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TakeoutCardNtf::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TakeoutCardNtf::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline ::google::protobuf::int32 TakeoutCardNtf::multiple() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TakeoutCardNtf.multiple)
  return multiple_;
}
inline void TakeoutCardNtf::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TakeoutCardNtf.multiple)
}

// -------------------------------------------------------------------

// TrustNtf

// required int32 seatno = 1;
inline bool TrustNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
inline ::google::protobuf::int32 TrustNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustNtf.seatno)
  return seatno_;
}
inline void TrustNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustNtf.seatno)
}

// -------------------------------------------------------------------

// TrustLiftNtf

// required int32 seatno = 1;
inline bool TrustLiftNtf::has_seatno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustLiftNtf::set_has_seatno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustLiftNtf::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustLiftNtf::clear_seatno() {
  seatno_ = 0;
  clear_has_seatno();
}
inline ::google::protobuf::int32 TrustLiftNtf::seatno() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.TrustLiftNtf.seatno)
  return seatno_;
}
inline void TrustLiftNtf::set_seatno(::google::protobuf::int32 value) {
  set_has_seatno();
  seatno_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.TrustLiftNtf.seatno)
}

// -------------------------------------------------------------------

// GameOverNtf

// required int32 reason = 1 [default = 2];
inline bool GameOverNtf::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOverNtf::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOverNtf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOverNtf::clear_reason() {
  reason_ = 2;
  clear_has_reason();
}
inline ::google::protobuf::int32 GameOverNtf::reason() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.GameOverNtf.reason)
  return reason_;
}
inline void GameOverNtf::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.GameOverNtf.reason)
}

// -------------------------------------------------------------------

// ActTimeoutNtf

// required int32 ready = 1;
inline bool ActTimeoutNtf::has_ready() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActTimeoutNtf::set_has_ready() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActTimeoutNtf::clear_has_ready() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActTimeoutNtf::clear_ready() {
  ready_ = 0;
  clear_has_ready();
}
inline ::google::protobuf::int32 ActTimeoutNtf::ready() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.ready)
  return ready_;
}
inline void ActTimeoutNtf::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.ready)
}

// required int32 callscore = 2;
inline bool ActTimeoutNtf::has_callscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActTimeoutNtf::set_has_callscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActTimeoutNtf::clear_has_callscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActTimeoutNtf::clear_callscore() {
  callscore_ = 0;
  clear_has_callscore();
}
inline ::google::protobuf::int32 ActTimeoutNtf::callscore() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.callscore)
  return callscore_;
}
inline void ActTimeoutNtf::set_callscore(::google::protobuf::int32 value) {
  set_has_callscore();
  callscore_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.callscore)
}

// required int32 takeout = 3;
inline bool ActTimeoutNtf::has_takeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActTimeoutNtf::set_has_takeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActTimeoutNtf::clear_has_takeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActTimeoutNtf::clear_takeout() {
  takeout_ = 0;
  clear_has_takeout();
}
inline ::google::protobuf::int32 ActTimeoutNtf::takeout() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.takeout)
  return takeout_;
}
inline void ActTimeoutNtf::set_takeout(::google::protobuf::int32 value) {
  set_has_takeout();
  takeout_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.takeout)
}

// required int32 settle = 4;
inline bool ActTimeoutNtf::has_settle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActTimeoutNtf::set_has_settle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActTimeoutNtf::clear_has_settle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActTimeoutNtf::clear_settle() {
  settle_ = 0;
  clear_has_settle();
}
inline ::google::protobuf::int32 ActTimeoutNtf::settle() const {
  // @@protoc_insertion_point(field_get:PBGameDDZ.ActTimeoutNtf.settle)
  return settle_;
}
inline void ActTimeoutNtf::set_settle(::google::protobuf::int32 value) {
  set_has_settle();
  settle_ = value;
  // @@protoc_insertion_point(field_set:PBGameDDZ.ActTimeoutNtf.settle)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBGameDDZ

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PBGameDDZ::reqMsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBGameDDZ::reqMsgID>() {
  return ::PBGameDDZ::reqMsgID_descriptor();
}
template <> struct is_proto_enum< ::PBGameDDZ::notifyMsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBGameDDZ::notifyMsgID>() {
  return ::PBGameDDZ::notifyMsgID_descriptor();
}
template <> struct is_proto_enum< ::PBGameDDZ::gameErrno> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBGameDDZ::gameErrno>() {
  return ::PBGameDDZ::gameErrno_descriptor();
}
template <> struct is_proto_enum< ::PBGameDDZ::gameStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBGameDDZ::gameStatus>() {
  return ::PBGameDDZ::gameStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PBGameDDZ_2eproto__INCLUDED
